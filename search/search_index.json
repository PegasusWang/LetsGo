{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Golang \u89c6\u9891\u6559\u7a0b \u00b6 \u76ee\u7684 \u00b6 \u901a\u8fc7\u8fde\u8f7d\u77ed\u89c6\u9891\u548c\u6587\u7ae0\u7684\u5f62\u5f0f\u5e2e\u52a9\u6709\u4e00\u5b9a\u5176\u4ed6\u8bed\u8a00\u7f16\u7a0b\u57fa\u7840\u7684\u4eba\u5feb\u901f\u5b66\u4e60\u548c\u5165\u95e8 Golang\u3002 \u5185\u5bb9\u5305\u62ec Golang \u57fa\u7840\u3001\u5185\u7f6e\u5e93\u3001web \u5f00\u53d1\u3001\u5e76\u53d1\u7f16\u7a0b\u7b49\uff0c\u5747\u6765\u81ea\u7b14\u8005\u65e5\u5e38\u5b66\u4e60\u548c\u5f00\u53d1\u7ecf\u9a8c\u603b\u7ed3\u3002 \u6559\u7a0b\u4e2d\u4f1a\u6709\u4e00\u4e9b\u548c Python \u7b49\u8bed\u8a00\u7279\u6027\u7684\u5bf9\u6bd4\uff0c\u65b9\u4fbf\u8bfb\u8005\u7406\u89e3\u3002\u5e0c\u671b\u6559\u7a0b\u6709\u5982\u4e0b\u7279\u8272\uff1a \u6bcf\u4e00\u5c0f\u8282\u5747\u5305\u542b\u89c6\u9891\u548c\u6587\u7ae0\uff0c\u6f14\u793a\u7b14\u8005\u65e5\u5e38\u5f00\u53d1\u7684\u5de5\u4f5c\u6d41\uff08\u5f53\u7136\u672a\u5fc5\u662f\u6700\u4f73\u65b9\u5f0f\uff0c\u8bfb\u8005\u670b\u53cb\u53ef\u4ee5\u5206\u4eab\u4e0b\u81ea\u5df1\u7684\u5f00\u53d1\u7ecf\u9a8c\uff09 \u5168\u90e8\u4ee3\u7801\u89c6\u9891\u4e2d\u73b0\u573a\u7f16\u5199\uff0c\u907f\u514d\u6559\u79d1\u4e66\u5f0f\u67af\u71e5\u8bb2\u89e3\u4ee3\u7801 \u4e3b\u6b21\u5206\u660e\uff0c\u5feb\u901f\u4e0a\u624b\uff0c\u4e3b\u8981\u5206\u4eab\u65e5\u5e38\u4e1a\u52a1\u5f00\u53d1\u4e2d\u6700\u5e38\u7528\u7684\u7279\u6027 \u7ed3\u5408\u5b9e\u6218\uff0c\u7b14\u8005\u81ea\u5df1\u8fb9\u8e29\u5751\u8fb9\u603b\u7ed3\u4e1a\u52a1\u5f00\u53d1\u4e2d\u9047\u5230\u7684\u4e00\u4e9b\u75db\u70b9\u548c\u89e3\u51b3\u65b9\u6848\u3002\u6bd4\u5982\u5982\u4f55\u505a\u5355\u6d4b\u3001\u4ee3\u7801\u5982\u4f55\u5206\u5c42\u3001\u5982\u4f55\u6392\u67e5\u6027\u80fd\u95ee\u9898\u7b49 \u6700\u4f73\u5b9e\u8df5\u3002\u603b\u7ed3\u4e1a\u52a1\u5f00\u53d1\u4e2d\u4e00\u4e9b\u597d\u7684\u5b9e\u8df5\u5206\u4eab\u51fa\u6765\uff0c\u8d34\u5730\u6c14 \u672c\u7535\u5b50\u4e66\u4e3b\u8981\u9762\u5411\u6709\u4e00\u5b9a\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u5f00\u53d1\u7ecf\u9a8c\u7684\u5f00\u53d1\u8005\u5feb\u901f\u4e0a\u624b go\uff0c\u4e0d\u4f1a\u6d89\u53ca\u5230\u4e00\u4e9b\u975e\u5e38\u5177\u4f53\u548c\u7ec6\u8282\u7684\u95ee\u9898\uff0c\u975e\u96f6\u57fa\u7840\u6559\u7a0b\u3002 \u6bd4\u5982\u5982\u4f55\u4e0b\u8f7d IDE\uff0c\u5982\u4f55\u5bfc\u51fa\u73af\u5883\u53d8\u91cf\u7b49\uff0c \u7f16\u7a0b\u65b0\u624b\u53ef\u4ee5\u5148\u8865\u4e00\u8865\u5f00\u53d1\u57fa\u7840\u3002 \u672c\u5c0f\u4e66\u4f1a\u6d89\u53ca\u5230\u4ee5\u4e0b\u5185\u5bb9\uff0c\u5c06\u4f1a\u957f\u671f\u4e0d\u95f4\u65ad\u66f4\u65b0\u6587\u7ae0\u548c\u5c0f\u89c6\u9891\uff08\u9664\u975e\u7b14\u8005\u53c8\u6362\u5de5\u4f5c\u5b66\u4e60\u522b\u7684\u6280\u672f\u6808\u4e86\uff09: go \u57fa\u7840: \u5feb\u901f\u4e0a\u624b\u4e86\u89e3 golang \u8bed\u6cd5\u57fa\u7840\u5e76\u4e0a\u624b\u5f00\u53d1\u3002go \u8bed\u6cd5\u7b80\u6d01\uff0c\u6ca1\u6709\u90a3\u4e48\u591a\u8bed\u6cd5\u7cd6\uff0c\u6bd4\u5176\u4ed6\u8bed\u8a00\u66f4\u5bb9\u6613\u4e0a\u624b\uff0c\u5c24\u5176\u662f\u5b66\u8fc7c\u8bed\u8a00 go \u5185\u7f6e\u5e93\uff1a\u719f\u6089\u5e38\u89c1\u5185\u7f6e\u5e93\u7684\u4f7f\u7528\u65b9\u5f0f\uff0c\u589e\u52a0\u5f00\u53d1\u6548\u7387 go \u8e29\u5751: \u7b14\u8005\u65e5\u5e38\u4f7f\u7528\u8fc7\u7a0b\u4e2d\u78b0\u5230\u7684\u4e00\u4e9b\u5751\uff0c\u6216\u8005\u4e00\u4e9b\u65b0\u624b\u7ecf\u5e38\u4f1a\u72af\u7684\u9519\u8bef\uff0c\u9632\u6b62\u5927\u5bb6\u8e29\u5751 go web \u5f00\u53d1\uff1a\u5305\u542b\u5e38\u7528\u7684 go web \u6846\u67b6\uff0cweb \u5f00\u53d1\u5e38\u7528\u7684\u7b2c\u4e09\u65b9\u5e93(http/mysql/redis/kafka)\u5feb\u901f\u4e0a\u624b\u5f00\u53d1 go \u6700\u4f73\u5b9e\u8df5: \u6bd4\u5982\u4ee3\u7801\u7ec4\u7ec7\uff0c\u5355\u5143\u6d4b\u8bd5\uff0c\u6027\u80fd\u6d4b\u8bd5\uff0c\u5de5\u7a0b\u5b9e\u8df5\u7b49 go \u9ad8\u7ea7\u7279\u6027: go \u7684\u4e00\u4e9b\u9ad8\u7ea7\u8bed\u6cd5\u7279\u6027 go \u5e76\u53d1\u7f16\u7a0b: go \u7684\u4e00\u5927\u5356\u70b9\uff0c\u5b66\u4e60\u5982\u4f55\u5b9e\u73b0\u9ad8\u6027\u80fd web \u540e\u7aef \u5f00\u53d1\u5de5\u4f5c\u6d41(vim/tmux\u7b49)\u3002\u5f53\u7136\u53ea\u662f\u7b14\u8005\u81ea\u5df1\u7684\u5de5\u4f5c\u6d41\uff0c\u7b14\u8005\u4e00\u822c\u4f1a\u5411\u5468\u56f4\u7684\u540c\u4e8b\u5b66\u4e60\u66f4\u9ad8\u6548\u7684\u65b9\u5f0f\uff0c\u4f60\u4e5f\u53ef\u4ee5\u7559\u8a00\u4f60\u89c9\u5f97\u66f4\u597d\u7684\u5f00\u53d1\u65b9\u5f0f\u3002 \u60a8\u53ef\u4ee5\u5728\u4ee5\u4e0b\u5730\u5740\u9605\u8bfb\uff1a \u9605\u8bfb\u5730\u5740\uff1a https://pegasuswang.github.io/LetsGo/ \u672c\u9879\u76ee\u5730\u5740\uff1a https://github.com/PegasusWang/LetsGo \u5982\u4f55\u5feb\u901f\u4e0a\u624b\u65b0\u8bed\u8a00 \u00b6 \u7b14\u8005\u7684\u7ecf\u9a8c\u5c31\u662f\u300e\u5b66\u4ee5\u81f4\u7528\u300f\uff0c\u5982\u679c\u5149\u5b66\u4e0d\u7ec3\uff0c\u5f88\u5feb\u5c31\u4f1a\u5fd8\u8bb0\u3002\u5b66\u4e00\u95e8\u65b0\u8bed\u8a00\u7684\u6700\u597d\u65b9\u5f0f\u5c31\u662f\u5728\u719f\u6089\u4e86\u57fa\u672c\u8bed\u6cd5\u4ee5\u540e\uff0c \u901a\u8fc7 \u5927\u91cf \u7684\u7f16\u7801\u548c\u9879\u76ee\u7ec3\u4e60\u6765\u719f\u6089\u5b83\u3002\u671f\u95f4\u4f60\u8fd8\u9700\u8981\u9891\u7e41\u501f\u52a9\u6587\u6863/\u641c\u7d22\u5f15\u64ce\u7b49\u5de5\u5177\uff0c\u8fb9\u5199\u8fb9\u67e5\uff0c\u5f88\u5feb\u5c31\u53ef\u4ee5\u4e0a\u624b\u3002 \u4e4b\u540e\u518d\u53bb\u8003\u8651\u4e00\u4e9b\u5177\u4f53\u7684\u8bed\u8a00\u7ec6\u8282\u548c\u6df1\u5165\u7684\u7279\u6027\uff0c \u65b0\u8bed\u8a00\u5b66\u4e60\u5341\u6b65\u6cd5\uff0c\u5bf9\u4e8e\u5f88\u591a\u5de5\u7a0b\u4e0a\u4f7f\u7528\u7684\u8bed\u8a00\u6765\u8bf4\u5b66\u4e60\u65b9\u5f0f\u90fd\u6bd4\u8f83\u7c7b\u4f3c\uff1a 1.\u5b89\u88c5\u5e76\u4e14\u642d\u5efa\u5f00\u53d1\u73af\u5883 2.\u57fa\u7840\u7c7b\u578b\u548c\u590d\u5408\u7c7b\u578b\u3002\u57fa\u7840\u6570\u636e\u7c7b\u578b(\u6570\u503c\u7c7b\u578b\uff0c\u5b57\u7b26\u4e32\uff09\u548c\u590d\u5408\u7c7b\u578b(map/set/list) 3.\u8fc7\u7a0b\u5f0f\u7f16\u7a0b\uff0c\u63a7\u5236\u6d41\u8bed\u53e5\u3002\u5224\u65ad\u3001\u5faa\u73af\u3001\u9009\u62e9 4.\u5982\u4f55\u4f7f\u7528\u51fd\u6570\u3002\u5b9a\u4e49\u65b9\u5f0f\uff0c\u4f20\u503c\u548c\u8fd4\u56de\u503c\u3002 5.\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u3002\u7c7b\u548c\u5b9e\u4f8b\uff0c\u6570\u636e\u548c\u65b9\u6cd5\uff0c\u7ec4\u5408and\u7ee7\u627f\uff0c\u63a5\u53e3\u7b49\u6982\u5ff5 6.\u5185\u7f6e\u5e93\uff08\u6587\u4ef6\u3001\u7f51\u7edc\u3001\u65f6\u95f4\u3001\u65e5\u5fd7\u7b49\uff09 7.\u627e\u4e00\u4e2a\u5e7f\u6cdb\u4f7f\u7528\u7684\u7b2c\u4e09\u65b9\u5e93\u5f00\u59cb\u5199\uff08\u6284\uff09\u9879\u76ee\uff0c\u6bd4\u5982\u4f7f\u7528 golang \u7684 gin web \u6846\u67b6\u91cd\u6784\u4f60\u4eec\u7684 restful \u5e94\u7528 8.\u8fb9\u5199\u8fb9\u67e5\uff0c\u5927\u91cf\u7ec3\u4e60\u3002\u5e38\u7528\u4ee3\u7801\u7247\u6bb5\u603b\u7ed3\u6210\u6587\u6863\u3002\u6bd4\u5982 golang \u91cc\u8fb9\u5404\u79cd\u8f6c\u6362\uff0c\u4f60\u53ef\u4ee5\u5efa\u7acb\u4e00\u4e2a\u4ee3\u7801\u4ed3\u5e93\u4e13\u95e8\u7528\u6765\u8bb0\u5f55\u7b14\u8bb0\u548c\u4ee3\u7801\u7247\u6bb5\uff0c\u5728\u4f60\u5f00\u53d1\u7684\u65f6\u5019\u5feb\u901f\u67e5\u9605\u4f1a\u975e\u5e38\u65b9\u4fbf 9.\u7b2c\u4e09\u65b9\u5e93\u5feb\u901f\u7f16\u5199 demo \u4ee3\u7801\u3002\u4ece github \u641c\u7d22\u5173\u952e\u8bcd\u3002web \u6846\u67b6/redis/mysql/kafka \u7b49\u7b2c\u4e09\u65b9\u5e93 10.\u6700\u4f73\u5b9e\u8df5\uff1a\u9047\u5230\u7684\u5751\uff1b\u4ee3\u7801\u5206\u5c42\uff1b\u5355\u5143\u6d4b\u8bd5\uff1b\u9759\u6001\u68c0\u67e5\u3002\u5206\u4eab\u4e0e\u8f93\u51fa\uff08\u8d39\u66fc\u5b66\u4e60\u6cd5\uff09 \u603b\u7ed3\u8d77\u6765\u5c31\u662f\uff1a \u591a\u5199\u591a\u7ec3\u3002\u5149\u770b\u4e66\u662f\u5b66\u4e0d\u4f1a\u7f16\u7a0b\u7684\uff0c\u7ec3\u4e60\u5230\u624b\u719f\u3002\u4e66\u4e0a\u7684\u4f8b\u5b50\u4e00\u5b9a\u8981\u81ea\u5df1\u4eb2\u81ea\u5c1d\u8bd5\u7f16\u5199\u548c\u5b9e\u73b0\uff0c\u5343\u4e07\u4e0d\u8981\u53ea\u770b\u4e0d\u6572 \u7167\u846b\u82a6\u753b\u74e2\uff0c\u4e00\u5f00\u59cb\u5b66\u4f1a\u6a21\u4eff\u522b\u4eba\u7684\u5199\u6cd5\u3002\u770b\u6e90\u7801\uff0c\u5b66\u4e60\u4f18\u79c0\u7684\u8bbe\u8ba1\u548c\u5199\u6cd5\uff0c\u6162\u6162\u4f60\u5c31\u6709\u611f\u89c9\u4e86 \u505a\u9879\u76ee\uff0c\u603b\u7ed3\uff0c\u8f93\u51fa\u3002\u5de9\u56fa\u6240\u5b66\u77e5\u8bc6\uff0c\u6280\u672f\u5206\u4eab\u548c\u8f93\u51fa\u3002\u8d39\u66fc\u5b66\u4e60\u6cd5\uff0c\u52a0\u6df1\u4f60\u7684\u7406\u89e3\u5c42\u6b21\u548c\u8bb0\u5fc6\u6548\u679c \u5b66\u4e60\u4e00\u95e8\u65b0\u7f16\u7a0b\u8bed\u8a00\uff0c\u771f\u6ca1\u90a3\u4e48\u96be![\u89c6\u9891] \u5de5\u5177 \u00b6 \u7b14\u8005\u4f7f\u7528 when-changed \u6765\u76d1\u63a7\u6587\u4ef6\u53d8\u52a8\u5e76\u4e14\u6267\u884c go \u4ee3\u7801\uff0c\u8fd9\u6837\u4f60\u53ef\u4ee5\u8fb9\u5199\u4ee3\u7801\uff0c\u4fdd\u5b58\u540e\u81ea\u52a8\u8fd0\u884c\u89c2\u5bdf\u7ed3\u679c\uff0c \u5728\u5199\u4ee3\u7801\u9a8c\u8bc1\u4f60\u7684\u60f3\u6cd5\u7684\u65f6\u5019\u4f1a\u6bd4\u8f83\u65b9\u4fbf\uff0c\u89c6\u9891\u91cc\u7b14\u8005\u4f1a\u8be6\u7ec6\u6f14\u793a\u3002 1 2 3 4 5 6 7 pip install when-changed # \u76d1\u63a7\u5f53\u524d\u6587\u4ef6\u5939\u53d8\u52a8\u5e76\u4e14\u6267\u884c\u547d\u4ee4 when-changed -v -r -1 -s ./ go run main.go # \u7b14\u8005\u559c\u6b22\u81ea\u5df1 alias \u4e00\u4e2a\u5feb\u6377\u547d\u4ee4\u653e\u5230 zshrc/bashrc \u91cc\uff0c\u6bd4\u5982 alias go_monitor_run = \"when-changed -r -v -1 . go run \" # \u8fd9\u6837\u5c31\u53ef\u4ee5\u76f4\u63a5\u6267\u884c\u5982\u4e0b\u547d\u4ee4\uff0c\u4fee\u6539\u5b8c\u4e4b\u540e\u81ea\u52a8\u6267\u884c\u4ee3\u7801\u770b\u6548\u679c\u5566 go_monitor_run main.go \u672c\u7535\u5b50\u4e66\u5236\u4f5c\u548c\u5199\u4f5c\u65b9\u5f0f \u00b6 \u4f7f\u7528 mkdocs \u548c markdown \u6784\u5efa\uff0c\u4f7f\u7528 Python-Markdown-Math \u5b8c\u6210\u6570\u5b66\u516c\u5f0f\u3002 markdown \u8bed\u6cd5\u53c2\u8003\uff1ahttp://xianbai.me/learn-md/article/about/readme.html \u5b89\u88c5\u4f9d\u8d56\uff1a 1 2 3 4 5 6 7 8 pip install mkdocs # \u5236\u4f5c\u7535\u5b50\u4e66, http://markdown-docs-zh.readthedocs.io/zh_CN/latest/ # https://stackoverflow.com/questions/27882261/mkdocs-and-mathjax/31874157 pip install https://github.com/mitya57/python-markdown-math/archive/master.zip # \u5efa\u8bae\u76f4\u63a5\u5b89\u88c5 requirements.txt \u4e2d\u7684\u4f9d\u8d56\u3002\u5df2\u7ecf\u9501\u5b9a\u4e86\u7248\u672c\uff0c\u4e0d\u540c\u7684 mkdocs \u4e4b\u95f4\u6709\u4e00\u5b9a\u5dee\u5f02 pip install -r requirements.txt # \u5982\u679c\u4f60 fork \u4e86\u672c\u9879\u76ee\uff0c\u53ef\u4ee5\u5b9a\u671f\u62c9\u53d6\u4e3b\u4ed3\u5e93\u7684\u4ee3\u7801\u6765\u83b7\u53d6\u66f4\u65b0\uff0c\u76ee\u524d\u8fd8\u5728\u4e0d\u65ad\u66f4\u65b0\u76f8\u5173\u7ae0\u8282 \u4f60\u53ef\u4ee5 clone \u672c\u9879\u76ee\u540e\u5728\u672c\u5730\u7f16\u5199\u548c\u67e5\u770b\u7535\u5b50\u4e66\uff1a 1 2 3 4 mkdocs serve # \u4fee\u6539\u81ea\u52a8\u66f4\u65b0\uff0c\u6d4f\u89c8\u5668\u6253\u5f00 http://localhost:8000 \u8bbf\u95ee # \u6570\u5b66\u516c\u5f0f\u53c2\u8003 https://www.zybuluo.com/codeep/note/163962 mkdocs gh-deploy # \u90e8\u7f72\u5230\u81ea\u5df1\u7684 github pages # \u7ed9 mkdocs \u589e\u52a0 gitalk \u8bc4\u8bba\u7cfb\u7edf https://50u1w4y.github.io/site/misc/gitalkBuild/ B \u7ad9\u77ed\u89c6\u9891\u5730\u5740(\u8fde\u8f7d\u4e2d) \u00b6 go \u57fa\u7840\u7cfb\u5217\u9891\u9053 \u5b66 Golang \u6da8\u5de5\u8d44\u7cfb\u5217\uff0c\u4f60\u7684\u7b2c\u4e00\u4e2a Golang \u4ee3\u7801 \u5b66 golang \u6da8\u5de5\u8d44\u7cfb\u5217\uff0c\u804a\u804a Go \u7684\u57fa\u7840\u7c7b\u578b \u5b66 golang \u6da8\u5de5\u8d44\u7cfb\u5217\uff0c\u5feb\u901f\u5165\u95e8 go \u6570\u7ec4\u4e0e\u5207\u7247 \u5b66 golang \u6da8\u5de5\u8d44\u7cfb\u5217\uff0cgolang \u6620\u5c04 \u5b66 golang \u6da8\u5de5\u8d44\u7cfb\u5217\uff0cgo \u6d41\u7a0b\u63a7\u5236 \u5b66 golang \u6da8\u5de5\u8d44\u7cfb\u5217\uff0cgo \u51fd\u6570\u521d\u63a2 \u5b66 golang \u6da8\u5de5\u8d44\u7cfb\u5217\uff0c\u5b66\u4e60 go \u51fd\u6570\u7279\u6027 \u77e5\u4e4e\u4e13\u680f \u00b6 \u5b66 Golang \u6da8\u5de5\u8d44\u7cfb\u5217\uff0c\u4f60\u7684\u7b2c\u4e00\u4e2a Go \u7a0b\u5e8f[\u89c6\u9891] \u5b66 golang \u6da8\u5de5\u8d44\u7cfb\u5217\uff0c\u804a\u804a Go \u7684\u57fa\u7840\u7c7b\u578b \u5b66 Golang \u6da8\u5de5\u8d44\u7cfb\u5217\uff0cGolang \u6570\u7ec4\u548c\u5207\u7247 \u5b66 Golang \u6da8\u5de5\u8d44\u7cfb\u5217\uff0cGo map\u6620\u5c04 \u5b66 golang \u6da8\u5de5\u8d44\u7cfb\u5217\uff0cgo \u6d41\u7a0b\u63a7\u5236 \u5b66 golang \u6da8\u5de5\u8d44\u7cfb\u5217\uff0c\u4e00\u8d77\u5b66\u4e60 go \u51fd\u6570 \u52d8\u8bef \u00b6 \u672c\u7cfb\u5217\u5747\u6765\u81ea\u7b14\u8005\u65e5\u5e38\u5b66\u4e60\u548c\u5de5\u4f5c\u603b\u7ed3\uff0c\u758f\u6f0f\u4e4b\u5904\u5728\u6240\u96be\u514d\uff0c\u5982\u679c\u6587\u7ae0\u6216\u8005\u89c6\u9891\u6709\u8bef\uff0c\u60a8\u53ef\u4ee5\u5230\u672c\u9879\u76ee github \u4ed3\u5e93\u6216\u8005\u6587\u7ae0\u8bc4\u8bba\u533a\u6307\u51fa\uff0c\u6b22\u8fce\u6279\u8bc4\u6307\u6b63\u3002 \u7b14\u8005\u4f1a\u8ba4\u771f\u5bf9\u5f85\u5e76\u4e14\u4fee\u590d\u9519\u8bef\u3002","title":"\u7b80\u4ecb"},{"location":"#golang","text":"","title":"Golang \u89c6\u9891\u6559\u7a0b"},{"location":"#_1","text":"\u901a\u8fc7\u8fde\u8f7d\u77ed\u89c6\u9891\u548c\u6587\u7ae0\u7684\u5f62\u5f0f\u5e2e\u52a9\u6709\u4e00\u5b9a\u5176\u4ed6\u8bed\u8a00\u7f16\u7a0b\u57fa\u7840\u7684\u4eba\u5feb\u901f\u5b66\u4e60\u548c\u5165\u95e8 Golang\u3002 \u5185\u5bb9\u5305\u62ec Golang \u57fa\u7840\u3001\u5185\u7f6e\u5e93\u3001web \u5f00\u53d1\u3001\u5e76\u53d1\u7f16\u7a0b\u7b49\uff0c\u5747\u6765\u81ea\u7b14\u8005\u65e5\u5e38\u5b66\u4e60\u548c\u5f00\u53d1\u7ecf\u9a8c\u603b\u7ed3\u3002 \u6559\u7a0b\u4e2d\u4f1a\u6709\u4e00\u4e9b\u548c Python \u7b49\u8bed\u8a00\u7279\u6027\u7684\u5bf9\u6bd4\uff0c\u65b9\u4fbf\u8bfb\u8005\u7406\u89e3\u3002\u5e0c\u671b\u6559\u7a0b\u6709\u5982\u4e0b\u7279\u8272\uff1a \u6bcf\u4e00\u5c0f\u8282\u5747\u5305\u542b\u89c6\u9891\u548c\u6587\u7ae0\uff0c\u6f14\u793a\u7b14\u8005\u65e5\u5e38\u5f00\u53d1\u7684\u5de5\u4f5c\u6d41\uff08\u5f53\u7136\u672a\u5fc5\u662f\u6700\u4f73\u65b9\u5f0f\uff0c\u8bfb\u8005\u670b\u53cb\u53ef\u4ee5\u5206\u4eab\u4e0b\u81ea\u5df1\u7684\u5f00\u53d1\u7ecf\u9a8c\uff09 \u5168\u90e8\u4ee3\u7801\u89c6\u9891\u4e2d\u73b0\u573a\u7f16\u5199\uff0c\u907f\u514d\u6559\u79d1\u4e66\u5f0f\u67af\u71e5\u8bb2\u89e3\u4ee3\u7801 \u4e3b\u6b21\u5206\u660e\uff0c\u5feb\u901f\u4e0a\u624b\uff0c\u4e3b\u8981\u5206\u4eab\u65e5\u5e38\u4e1a\u52a1\u5f00\u53d1\u4e2d\u6700\u5e38\u7528\u7684\u7279\u6027 \u7ed3\u5408\u5b9e\u6218\uff0c\u7b14\u8005\u81ea\u5df1\u8fb9\u8e29\u5751\u8fb9\u603b\u7ed3\u4e1a\u52a1\u5f00\u53d1\u4e2d\u9047\u5230\u7684\u4e00\u4e9b\u75db\u70b9\u548c\u89e3\u51b3\u65b9\u6848\u3002\u6bd4\u5982\u5982\u4f55\u505a\u5355\u6d4b\u3001\u4ee3\u7801\u5982\u4f55\u5206\u5c42\u3001\u5982\u4f55\u6392\u67e5\u6027\u80fd\u95ee\u9898\u7b49 \u6700\u4f73\u5b9e\u8df5\u3002\u603b\u7ed3\u4e1a\u52a1\u5f00\u53d1\u4e2d\u4e00\u4e9b\u597d\u7684\u5b9e\u8df5\u5206\u4eab\u51fa\u6765\uff0c\u8d34\u5730\u6c14 \u672c\u7535\u5b50\u4e66\u4e3b\u8981\u9762\u5411\u6709\u4e00\u5b9a\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u5f00\u53d1\u7ecf\u9a8c\u7684\u5f00\u53d1\u8005\u5feb\u901f\u4e0a\u624b go\uff0c\u4e0d\u4f1a\u6d89\u53ca\u5230\u4e00\u4e9b\u975e\u5e38\u5177\u4f53\u548c\u7ec6\u8282\u7684\u95ee\u9898\uff0c\u975e\u96f6\u57fa\u7840\u6559\u7a0b\u3002 \u6bd4\u5982\u5982\u4f55\u4e0b\u8f7d IDE\uff0c\u5982\u4f55\u5bfc\u51fa\u73af\u5883\u53d8\u91cf\u7b49\uff0c \u7f16\u7a0b\u65b0\u624b\u53ef\u4ee5\u5148\u8865\u4e00\u8865\u5f00\u53d1\u57fa\u7840\u3002 \u672c\u5c0f\u4e66\u4f1a\u6d89\u53ca\u5230\u4ee5\u4e0b\u5185\u5bb9\uff0c\u5c06\u4f1a\u957f\u671f\u4e0d\u95f4\u65ad\u66f4\u65b0\u6587\u7ae0\u548c\u5c0f\u89c6\u9891\uff08\u9664\u975e\u7b14\u8005\u53c8\u6362\u5de5\u4f5c\u5b66\u4e60\u522b\u7684\u6280\u672f\u6808\u4e86\uff09: go \u57fa\u7840: \u5feb\u901f\u4e0a\u624b\u4e86\u89e3 golang \u8bed\u6cd5\u57fa\u7840\u5e76\u4e0a\u624b\u5f00\u53d1\u3002go \u8bed\u6cd5\u7b80\u6d01\uff0c\u6ca1\u6709\u90a3\u4e48\u591a\u8bed\u6cd5\u7cd6\uff0c\u6bd4\u5176\u4ed6\u8bed\u8a00\u66f4\u5bb9\u6613\u4e0a\u624b\uff0c\u5c24\u5176\u662f\u5b66\u8fc7c\u8bed\u8a00 go \u5185\u7f6e\u5e93\uff1a\u719f\u6089\u5e38\u89c1\u5185\u7f6e\u5e93\u7684\u4f7f\u7528\u65b9\u5f0f\uff0c\u589e\u52a0\u5f00\u53d1\u6548\u7387 go \u8e29\u5751: \u7b14\u8005\u65e5\u5e38\u4f7f\u7528\u8fc7\u7a0b\u4e2d\u78b0\u5230\u7684\u4e00\u4e9b\u5751\uff0c\u6216\u8005\u4e00\u4e9b\u65b0\u624b\u7ecf\u5e38\u4f1a\u72af\u7684\u9519\u8bef\uff0c\u9632\u6b62\u5927\u5bb6\u8e29\u5751 go web \u5f00\u53d1\uff1a\u5305\u542b\u5e38\u7528\u7684 go web \u6846\u67b6\uff0cweb \u5f00\u53d1\u5e38\u7528\u7684\u7b2c\u4e09\u65b9\u5e93(http/mysql/redis/kafka)\u5feb\u901f\u4e0a\u624b\u5f00\u53d1 go \u6700\u4f73\u5b9e\u8df5: \u6bd4\u5982\u4ee3\u7801\u7ec4\u7ec7\uff0c\u5355\u5143\u6d4b\u8bd5\uff0c\u6027\u80fd\u6d4b\u8bd5\uff0c\u5de5\u7a0b\u5b9e\u8df5\u7b49 go \u9ad8\u7ea7\u7279\u6027: go \u7684\u4e00\u4e9b\u9ad8\u7ea7\u8bed\u6cd5\u7279\u6027 go \u5e76\u53d1\u7f16\u7a0b: go \u7684\u4e00\u5927\u5356\u70b9\uff0c\u5b66\u4e60\u5982\u4f55\u5b9e\u73b0\u9ad8\u6027\u80fd web \u540e\u7aef \u5f00\u53d1\u5de5\u4f5c\u6d41(vim/tmux\u7b49)\u3002\u5f53\u7136\u53ea\u662f\u7b14\u8005\u81ea\u5df1\u7684\u5de5\u4f5c\u6d41\uff0c\u7b14\u8005\u4e00\u822c\u4f1a\u5411\u5468\u56f4\u7684\u540c\u4e8b\u5b66\u4e60\u66f4\u9ad8\u6548\u7684\u65b9\u5f0f\uff0c\u4f60\u4e5f\u53ef\u4ee5\u7559\u8a00\u4f60\u89c9\u5f97\u66f4\u597d\u7684\u5f00\u53d1\u65b9\u5f0f\u3002 \u60a8\u53ef\u4ee5\u5728\u4ee5\u4e0b\u5730\u5740\u9605\u8bfb\uff1a \u9605\u8bfb\u5730\u5740\uff1a https://pegasuswang.github.io/LetsGo/ \u672c\u9879\u76ee\u5730\u5740\uff1a https://github.com/PegasusWang/LetsGo","title":"\u76ee\u7684"},{"location":"#_2","text":"\u7b14\u8005\u7684\u7ecf\u9a8c\u5c31\u662f\u300e\u5b66\u4ee5\u81f4\u7528\u300f\uff0c\u5982\u679c\u5149\u5b66\u4e0d\u7ec3\uff0c\u5f88\u5feb\u5c31\u4f1a\u5fd8\u8bb0\u3002\u5b66\u4e00\u95e8\u65b0\u8bed\u8a00\u7684\u6700\u597d\u65b9\u5f0f\u5c31\u662f\u5728\u719f\u6089\u4e86\u57fa\u672c\u8bed\u6cd5\u4ee5\u540e\uff0c \u901a\u8fc7 \u5927\u91cf \u7684\u7f16\u7801\u548c\u9879\u76ee\u7ec3\u4e60\u6765\u719f\u6089\u5b83\u3002\u671f\u95f4\u4f60\u8fd8\u9700\u8981\u9891\u7e41\u501f\u52a9\u6587\u6863/\u641c\u7d22\u5f15\u64ce\u7b49\u5de5\u5177\uff0c\u8fb9\u5199\u8fb9\u67e5\uff0c\u5f88\u5feb\u5c31\u53ef\u4ee5\u4e0a\u624b\u3002 \u4e4b\u540e\u518d\u53bb\u8003\u8651\u4e00\u4e9b\u5177\u4f53\u7684\u8bed\u8a00\u7ec6\u8282\u548c\u6df1\u5165\u7684\u7279\u6027\uff0c \u65b0\u8bed\u8a00\u5b66\u4e60\u5341\u6b65\u6cd5\uff0c\u5bf9\u4e8e\u5f88\u591a\u5de5\u7a0b\u4e0a\u4f7f\u7528\u7684\u8bed\u8a00\u6765\u8bf4\u5b66\u4e60\u65b9\u5f0f\u90fd\u6bd4\u8f83\u7c7b\u4f3c\uff1a 1.\u5b89\u88c5\u5e76\u4e14\u642d\u5efa\u5f00\u53d1\u73af\u5883 2.\u57fa\u7840\u7c7b\u578b\u548c\u590d\u5408\u7c7b\u578b\u3002\u57fa\u7840\u6570\u636e\u7c7b\u578b(\u6570\u503c\u7c7b\u578b\uff0c\u5b57\u7b26\u4e32\uff09\u548c\u590d\u5408\u7c7b\u578b(map/set/list) 3.\u8fc7\u7a0b\u5f0f\u7f16\u7a0b\uff0c\u63a7\u5236\u6d41\u8bed\u53e5\u3002\u5224\u65ad\u3001\u5faa\u73af\u3001\u9009\u62e9 4.\u5982\u4f55\u4f7f\u7528\u51fd\u6570\u3002\u5b9a\u4e49\u65b9\u5f0f\uff0c\u4f20\u503c\u548c\u8fd4\u56de\u503c\u3002 5.\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u3002\u7c7b\u548c\u5b9e\u4f8b\uff0c\u6570\u636e\u548c\u65b9\u6cd5\uff0c\u7ec4\u5408and\u7ee7\u627f\uff0c\u63a5\u53e3\u7b49\u6982\u5ff5 6.\u5185\u7f6e\u5e93\uff08\u6587\u4ef6\u3001\u7f51\u7edc\u3001\u65f6\u95f4\u3001\u65e5\u5fd7\u7b49\uff09 7.\u627e\u4e00\u4e2a\u5e7f\u6cdb\u4f7f\u7528\u7684\u7b2c\u4e09\u65b9\u5e93\u5f00\u59cb\u5199\uff08\u6284\uff09\u9879\u76ee\uff0c\u6bd4\u5982\u4f7f\u7528 golang \u7684 gin web \u6846\u67b6\u91cd\u6784\u4f60\u4eec\u7684 restful \u5e94\u7528 8.\u8fb9\u5199\u8fb9\u67e5\uff0c\u5927\u91cf\u7ec3\u4e60\u3002\u5e38\u7528\u4ee3\u7801\u7247\u6bb5\u603b\u7ed3\u6210\u6587\u6863\u3002\u6bd4\u5982 golang \u91cc\u8fb9\u5404\u79cd\u8f6c\u6362\uff0c\u4f60\u53ef\u4ee5\u5efa\u7acb\u4e00\u4e2a\u4ee3\u7801\u4ed3\u5e93\u4e13\u95e8\u7528\u6765\u8bb0\u5f55\u7b14\u8bb0\u548c\u4ee3\u7801\u7247\u6bb5\uff0c\u5728\u4f60\u5f00\u53d1\u7684\u65f6\u5019\u5feb\u901f\u67e5\u9605\u4f1a\u975e\u5e38\u65b9\u4fbf 9.\u7b2c\u4e09\u65b9\u5e93\u5feb\u901f\u7f16\u5199 demo \u4ee3\u7801\u3002\u4ece github \u641c\u7d22\u5173\u952e\u8bcd\u3002web \u6846\u67b6/redis/mysql/kafka \u7b49\u7b2c\u4e09\u65b9\u5e93 10.\u6700\u4f73\u5b9e\u8df5\uff1a\u9047\u5230\u7684\u5751\uff1b\u4ee3\u7801\u5206\u5c42\uff1b\u5355\u5143\u6d4b\u8bd5\uff1b\u9759\u6001\u68c0\u67e5\u3002\u5206\u4eab\u4e0e\u8f93\u51fa\uff08\u8d39\u66fc\u5b66\u4e60\u6cd5\uff09 \u603b\u7ed3\u8d77\u6765\u5c31\u662f\uff1a \u591a\u5199\u591a\u7ec3\u3002\u5149\u770b\u4e66\u662f\u5b66\u4e0d\u4f1a\u7f16\u7a0b\u7684\uff0c\u7ec3\u4e60\u5230\u624b\u719f\u3002\u4e66\u4e0a\u7684\u4f8b\u5b50\u4e00\u5b9a\u8981\u81ea\u5df1\u4eb2\u81ea\u5c1d\u8bd5\u7f16\u5199\u548c\u5b9e\u73b0\uff0c\u5343\u4e07\u4e0d\u8981\u53ea\u770b\u4e0d\u6572 \u7167\u846b\u82a6\u753b\u74e2\uff0c\u4e00\u5f00\u59cb\u5b66\u4f1a\u6a21\u4eff\u522b\u4eba\u7684\u5199\u6cd5\u3002\u770b\u6e90\u7801\uff0c\u5b66\u4e60\u4f18\u79c0\u7684\u8bbe\u8ba1\u548c\u5199\u6cd5\uff0c\u6162\u6162\u4f60\u5c31\u6709\u611f\u89c9\u4e86 \u505a\u9879\u76ee\uff0c\u603b\u7ed3\uff0c\u8f93\u51fa\u3002\u5de9\u56fa\u6240\u5b66\u77e5\u8bc6\uff0c\u6280\u672f\u5206\u4eab\u548c\u8f93\u51fa\u3002\u8d39\u66fc\u5b66\u4e60\u6cd5\uff0c\u52a0\u6df1\u4f60\u7684\u7406\u89e3\u5c42\u6b21\u548c\u8bb0\u5fc6\u6548\u679c \u5b66\u4e60\u4e00\u95e8\u65b0\u7f16\u7a0b\u8bed\u8a00\uff0c\u771f\u6ca1\u90a3\u4e48\u96be![\u89c6\u9891]","title":"\u5982\u4f55\u5feb\u901f\u4e0a\u624b\u65b0\u8bed\u8a00"},{"location":"#_3","text":"\u7b14\u8005\u4f7f\u7528 when-changed \u6765\u76d1\u63a7\u6587\u4ef6\u53d8\u52a8\u5e76\u4e14\u6267\u884c go \u4ee3\u7801\uff0c\u8fd9\u6837\u4f60\u53ef\u4ee5\u8fb9\u5199\u4ee3\u7801\uff0c\u4fdd\u5b58\u540e\u81ea\u52a8\u8fd0\u884c\u89c2\u5bdf\u7ed3\u679c\uff0c \u5728\u5199\u4ee3\u7801\u9a8c\u8bc1\u4f60\u7684\u60f3\u6cd5\u7684\u65f6\u5019\u4f1a\u6bd4\u8f83\u65b9\u4fbf\uff0c\u89c6\u9891\u91cc\u7b14\u8005\u4f1a\u8be6\u7ec6\u6f14\u793a\u3002 1 2 3 4 5 6 7 pip install when-changed # \u76d1\u63a7\u5f53\u524d\u6587\u4ef6\u5939\u53d8\u52a8\u5e76\u4e14\u6267\u884c\u547d\u4ee4 when-changed -v -r -1 -s ./ go run main.go # \u7b14\u8005\u559c\u6b22\u81ea\u5df1 alias \u4e00\u4e2a\u5feb\u6377\u547d\u4ee4\u653e\u5230 zshrc/bashrc \u91cc\uff0c\u6bd4\u5982 alias go_monitor_run = \"when-changed -r -v -1 . go run \" # \u8fd9\u6837\u5c31\u53ef\u4ee5\u76f4\u63a5\u6267\u884c\u5982\u4e0b\u547d\u4ee4\uff0c\u4fee\u6539\u5b8c\u4e4b\u540e\u81ea\u52a8\u6267\u884c\u4ee3\u7801\u770b\u6548\u679c\u5566 go_monitor_run main.go","title":"\u5de5\u5177"},{"location":"#_4","text":"\u4f7f\u7528 mkdocs \u548c markdown \u6784\u5efa\uff0c\u4f7f\u7528 Python-Markdown-Math \u5b8c\u6210\u6570\u5b66\u516c\u5f0f\u3002 markdown \u8bed\u6cd5\u53c2\u8003\uff1ahttp://xianbai.me/learn-md/article/about/readme.html \u5b89\u88c5\u4f9d\u8d56\uff1a 1 2 3 4 5 6 7 8 pip install mkdocs # \u5236\u4f5c\u7535\u5b50\u4e66, http://markdown-docs-zh.readthedocs.io/zh_CN/latest/ # https://stackoverflow.com/questions/27882261/mkdocs-and-mathjax/31874157 pip install https://github.com/mitya57/python-markdown-math/archive/master.zip # \u5efa\u8bae\u76f4\u63a5\u5b89\u88c5 requirements.txt \u4e2d\u7684\u4f9d\u8d56\u3002\u5df2\u7ecf\u9501\u5b9a\u4e86\u7248\u672c\uff0c\u4e0d\u540c\u7684 mkdocs \u4e4b\u95f4\u6709\u4e00\u5b9a\u5dee\u5f02 pip install -r requirements.txt # \u5982\u679c\u4f60 fork \u4e86\u672c\u9879\u76ee\uff0c\u53ef\u4ee5\u5b9a\u671f\u62c9\u53d6\u4e3b\u4ed3\u5e93\u7684\u4ee3\u7801\u6765\u83b7\u53d6\u66f4\u65b0\uff0c\u76ee\u524d\u8fd8\u5728\u4e0d\u65ad\u66f4\u65b0\u76f8\u5173\u7ae0\u8282 \u4f60\u53ef\u4ee5 clone \u672c\u9879\u76ee\u540e\u5728\u672c\u5730\u7f16\u5199\u548c\u67e5\u770b\u7535\u5b50\u4e66\uff1a 1 2 3 4 mkdocs serve # \u4fee\u6539\u81ea\u52a8\u66f4\u65b0\uff0c\u6d4f\u89c8\u5668\u6253\u5f00 http://localhost:8000 \u8bbf\u95ee # \u6570\u5b66\u516c\u5f0f\u53c2\u8003 https://www.zybuluo.com/codeep/note/163962 mkdocs gh-deploy # \u90e8\u7f72\u5230\u81ea\u5df1\u7684 github pages # \u7ed9 mkdocs \u589e\u52a0 gitalk \u8bc4\u8bba\u7cfb\u7edf https://50u1w4y.github.io/site/misc/gitalkBuild/","title":"\u672c\u7535\u5b50\u4e66\u5236\u4f5c\u548c\u5199\u4f5c\u65b9\u5f0f"},{"location":"#b","text":"go \u57fa\u7840\u7cfb\u5217\u9891\u9053 \u5b66 Golang \u6da8\u5de5\u8d44\u7cfb\u5217\uff0c\u4f60\u7684\u7b2c\u4e00\u4e2a Golang \u4ee3\u7801 \u5b66 golang \u6da8\u5de5\u8d44\u7cfb\u5217\uff0c\u804a\u804a Go \u7684\u57fa\u7840\u7c7b\u578b \u5b66 golang \u6da8\u5de5\u8d44\u7cfb\u5217\uff0c\u5feb\u901f\u5165\u95e8 go \u6570\u7ec4\u4e0e\u5207\u7247 \u5b66 golang \u6da8\u5de5\u8d44\u7cfb\u5217\uff0cgolang \u6620\u5c04 \u5b66 golang \u6da8\u5de5\u8d44\u7cfb\u5217\uff0cgo \u6d41\u7a0b\u63a7\u5236 \u5b66 golang \u6da8\u5de5\u8d44\u7cfb\u5217\uff0cgo \u51fd\u6570\u521d\u63a2 \u5b66 golang \u6da8\u5de5\u8d44\u7cfb\u5217\uff0c\u5b66\u4e60 go \u51fd\u6570\u7279\u6027","title":"B \u7ad9\u77ed\u89c6\u9891\u5730\u5740(\u8fde\u8f7d\u4e2d)"},{"location":"#_5","text":"\u5b66 Golang \u6da8\u5de5\u8d44\u7cfb\u5217\uff0c\u4f60\u7684\u7b2c\u4e00\u4e2a Go \u7a0b\u5e8f[\u89c6\u9891] \u5b66 golang \u6da8\u5de5\u8d44\u7cfb\u5217\uff0c\u804a\u804a Go \u7684\u57fa\u7840\u7c7b\u578b \u5b66 Golang \u6da8\u5de5\u8d44\u7cfb\u5217\uff0cGolang \u6570\u7ec4\u548c\u5207\u7247 \u5b66 Golang \u6da8\u5de5\u8d44\u7cfb\u5217\uff0cGo map\u6620\u5c04 \u5b66 golang \u6da8\u5de5\u8d44\u7cfb\u5217\uff0cgo \u6d41\u7a0b\u63a7\u5236 \u5b66 golang \u6da8\u5de5\u8d44\u7cfb\u5217\uff0c\u4e00\u8d77\u5b66\u4e60 go \u51fd\u6570","title":"\u77e5\u4e4e\u4e13\u680f"},{"location":"#_6","text":"\u672c\u7cfb\u5217\u5747\u6765\u81ea\u7b14\u8005\u65e5\u5e38\u5b66\u4e60\u548c\u5de5\u4f5c\u603b\u7ed3\uff0c\u758f\u6f0f\u4e4b\u5904\u5728\u6240\u96be\u514d\uff0c\u5982\u679c\u6587\u7ae0\u6216\u8005\u89c6\u9891\u6709\u8bef\uff0c\u60a8\u53ef\u4ee5\u5230\u672c\u9879\u76ee github \u4ed3\u5e93\u6216\u8005\u6587\u7ae0\u8bc4\u8bba\u533a\u6307\u51fa\uff0c\u6b22\u8fce\u6279\u8bc4\u6307\u6b63\u3002 \u7b14\u8005\u4f1a\u8ba4\u771f\u5bf9\u5f85\u5e76\u4e14\u4fee\u590d\u9519\u8bef\u3002","title":"\u52d8\u8bef"},{"location":"basics/00_hello_go/hello_go/","text":"Hello Go! \u00b6 Quote Go is not meant to innovate programming theory. It\u2019s meant to innovate programming practice. \u2013 Samuel Tesla Why Golang(\u540e\u6587\u5747\u7b80\u79f0 Go) ? \u00b6 \u5f53\u7136\u662f\u8001\u677f\u8981\u6c42\u7684\uff0c\u563f\u563f\u3002\u7b14\u8005\u5de5\u4f5c\u7684\u524d\u51e0\u5e74\u90fd\u662f\u5199 Python\uff0c\u521a\u6bd5\u4e1a\u90a3\u4f1a Python \u8fd8\u6ca1\u6709\u90a3\u4e48\u706b\u3002\u5373\u4f7f\u5230\u73b0\u5728\uff0cPython \u540e\u7aef\u4f9d\u65e7\u4e0d\u662f\u4e3b\u6d41\u3002\u4e0d\u8fc7\u7b14\u8005\u611f\u89c9\u5bf9\u4e8e\u5f88\u591a\u4e2d\u5c0f\u516c\u53f8\u6765\u8bf4 Python \u8fd8\u662f\u591f\u7528\u7684\uff0c\u5e76\u4e14 Python \u53ef\u4ee5\u505a\u5f88\u591a\u4e8b\u60c5\u3002 \u6700\u8fd1\u53c8\u6362\u5de5\u4f5c\u4e86\u5230\u4e86\u4e00\u5bb6\u5927\u5382\uff0c\u5185\u90e8\u5f88\u591a\u662f c\u8279 \u9879\u76ee\u3002\u5bf9\u4e8e\u5927\u516c\u53f8\u52a8\u8f84\u6709\u767e\u5343\u4e07\u751a\u81f3\u4e0a\u4ebf\u7684\u65e5\u6d3b\u6765\u8bf4\uff0c\u5f88\u5c11\u4f1a\u4f7f\u7528\u811a\u672c\u8bed\u8a00\u6765\u505a\u9ad8\u6027\u80fd\u540e\u7aef\u3002 \u76ee\u524d\u7b14\u8005\u5f00\u59cb\u5b66\u4e60\u4f7f\u7528 c++(\u5386\u53f2\u9057\u7559) \u548c Golang \u5199\u540e\u7aef\u4e1a\u52a1\uff0c\u4e0d\u8fc7 c++ \u5199\u4e1a\u52a1\u6765\u8bf4\u6bd4\u8f83\u75db\u82e6\uff0c\u5f88\u591a\u4e1a\u52a1\u5f00\u59cb\u4f7f\u7528 Golang \u8fdb\u884c\u91cd\u6784\u3002 \u4e0d\u5f97\u4e0d\u627f\u8ba4\uff0c\u4ece\u56fd\u5185\u62db\u8058\u4fe1\u606f\u548c\u5e02\u573a\u884c\u60c5\u6765\u8bf4\uff0c\u8fd9\u51e0\u5e74 Golang \u4f5c\u4e3a\u4e92\u8054\u7f51\u540e\u7aef\u8bed\u8a00\u786e\u5b9e\u8d8a\u6765\u8d8a\u706b\uff0c\u5f88\u591a\u4e92\u8054\u7f51\u516c\u53f8\u90fd\u5f00\u59cb\u4f7f\u7528\u5b83\u3002 \u8bf4\u8bf4\u4e2a\u4eba\u611f\u89c9 Golang \u7684\u4e00\u4e9b\u4f18\u7f3a\u70b9\u5427(Go \u53f7\u79f0 21 \u4e16\u7eaa\u7684 C \u8bed\u8a00): \u6709\u4e2a\u597d\u7239(google)\u548c\u4e00\u5806\u725b\u4eba\u5f00\u53d1\u7ef4\u62a4 \u6027\u80fd\u9ad8\uff0c\u5e76\u53d1\u53cb\u597d\uff0c\u5185\u7f6e goroutine \u652f\u6301 \u5de5\u7a0b\u53cb\u597d\uff0c\u8bed\u6cd5\u7b80\u6d01\uff0c\u5bb9\u6613\u5b66\u4e60\u3001\u4e0a\u624b\u548c\u7ef4\u62a4\u3002Go \u7684\u8bed\u6cd5\u7279\u6027\u76f8\u6bd4\u5176\u4ed6\u8bed\u8a00\u6765\u8bf4\u66f4\u52a0\u7b80\u6d01\uff0c\u53ea\u670925\u4e2a\u5173\u952e\u8bcd \u9759\u6001\u7f16\u8bd1\u578b\u8bed\u8a00\uff0c\u90e8\u7f72\u975e\u5e38\u65b9\u4fbf\uff0c\u53ea\u9700\u8981 build \u4e00\u4e2a\u4e8c\u8fdb\u5236\u6587\u4ef6\u6254\u5230\u670d\u52a1\u5668\u4e0a \u56fd\u5185\u4e92\u8054\u7f51\u516c\u53f8 golang \u5c97\u4f4d\u65e5\u76ca\u589e\u591a\uff0c\u662f\u9ad8\u6027\u80fdweb\u540e\u7aef\u3001\u4e91\u670d\u52a1\u3001\u533a\u5757\u94fe\u7b49\u9886\u57df\u4e00\u95e8\u6bd4\u8f83\u6709\u524d\u666f\u7684\u8bed\u8a00\uff0c\u6709docker/k8s\u8fd9\u79cd\u6740\u624b\u7ea7\u5e94\u7528 \u4e5f\u6709\u4e00\u4e9b\u4e00\u76f4\u88ab\u4eba\u55b7\u7684\u5730\u65b9(\u5f53\u7136\u8bbe\u8ba1\u54f2\u5b66\u8fd9\u79cd\u95ee\u9898\uff0c\u4e0d\u540c\u4eba\u6709\u4e0d\u540c\u770b\u6cd5\uff09\uff1a \u9519\u8bef\u68c0\u67e5\uff0cerror check \u6bd4\u8f83\u539f\u59cb\u3002\u7ecf\u5e38\u770b\u5230\u4e00\u5806 err check \u4ee3\u7801\u5939\u6742\u5728\u4ee3\u7801\u903b\u8f91\u91cc \u6682\u65f6\u6ca1\u6709\u6cdb\u578b\uff0c\u67d0\u4e9b\u573a\u666f\u4e0b\u6bd4\u8f83\u7e41\u7410 \u751f\u6001\u4e0d\u591f\u5b8c\u5584\u7b49\u3002Go \u8fd8\u662f\u6bd4\u8f83\u5e74\u8f7b\u7684\u8bed\u8a00\uff0c\u751f\u6001\u76f8\u6bd4\u4e00\u4e9b\u53d1\u5c55\u8f83\u4e45\u7684\u8bed\u8a00\u8fd8\u76f8\u5bf9\u6b20\u7f3a GC\uff0c\u5b9e\u9645\u4e0a go \u5728\u5783\u573e\u56de\u6536\u4e0a\u6bd4\u5f53\u5e74\u6539\u5584\u975e\u5e38\u591a\uff0cweb \u540e\u7aef\u4e0a\u57fa\u672c\u4e0d\u662f\u4e2a\u95ee\u9898 \u603b\u5f97\u6765\u8bf4\uff0c\u7b14\u8005\u611f\u89c9\u4f5c\u4e3a\u5fae\u670d\u52a1\u540e\u7aef\u8bed\u8a00\u6765\u8bf4\uff0c\u8fd8\u662f\u5b8c\u5168\u591f\u7528\u7684\u3002go \u5728\u56fd\u5185\u7b97\u662f\u589e\u957f\u6bd4\u8f83\u5feb\u7684\u8bed\u8a00\u4e4b\u4e00\uff0c\u62db\u8058\u5c97\u4f4d\u76f8\u8f83\u4e8e\u524d\u51e0\u5e74\u589e\u52a0\u4e0d\u5c11\u3002 \u4e0b\u56fe\u662f go \u7684\u5173\u952e\u8bcd\u5217\u8868\uff0c\u53ea\u6709 25 \u4e2a\uff1a \u4e0b\u8f7d\u548c\u5b89\u88c5 Golang \u00b6 \u672c\u7cfb\u5217\u4e0d\u662f\u9488\u5bf9\u7f16\u7a0b\u65b0\u624b\u7684\u6559\u7a0b\uff0c\u5982\u679c\u4f60\u8fd8\u65e0\u6cd5\u8bbf\u95ee\u76f8\u5173\u7f51\u7ad9\uff0c\u8bf7\u81ea\u884c\u89e3\u51b3\u3002 \u7b14\u8005\u8fd8\u662f\u4f9d\u65e7\u5f3a\u70c8\u5efa\u8bae\u4f60\u4f7f\u7528 Linux \u64cd\u4f5c\u7cfb\u7edf\u6765\u5b66\u4e60\uff0c\u56e0\u4e3a\u4e92\u8054\u7f51\u516c\u53f8\u5927\u591a\u4f7f\u7528 linxu server\u3002 \u8bf7\u5230 golang \u5b98\u7f51\u4e0b\u8f7d\u5e76\u4e14\u5b89\u88c5\u4f60\u7684\u5bf9\u5e94\u7cfb\u7edf\u73af\u5883\u7684\u5b89\u88c5\u5305(go\u662f\u8de8\u5e73\u53f0\u7684MacOS/Windows/Linux) https://golang.org/ https://github.com/golang/go \u5f53\u7136\u5982\u679c\u4f60\u662f\u4f7f\u7528 linux/macos \u8fd8\u53ef\u4ee5\u7528\u5bf9\u5e94\u5305\u7ba1\u7406\u5668\u6765\u5b89\u88c5\u3002\u6bd4\u5982\u7b14\u8005\u4f7f\u7528 macos \u7684 brew install \u5c31\u53ef\u4ee5\u5b89\u88c5\u4e86\u3002 \u5b89\u88c5\u5b8c\u6210\u4e4b\u540e\u8f93\u5165 go version \u8f93\u51fa\u4e86 go \u7248\u672c\u5c31\u5b89\u88c5\u5b8c\u6210\uff0c\u5efa\u8bae\u5b89\u88c5\u6700\u65b0\u7684\u7248\u672c\u5c31\u597d\uff0c\u5bf9\u4e8e\u76ee\u524d\u5b66\u4e60 go \u6765\u8bf4\u7248\u672c\u5f71\u54cd\u4e0d\u5927\u3002 \u914d\u7f6e\u73af\u5883\u53d8\u91cf \u00b6 go \u9700\u8981\u914d\u7f6e\u73af\u5883\u53d8\u91cf\u6307\u5b9a\u5176\u5b89\u88c5\u8def\u5f84(GOROOT)\u548c(GOPATH)\uff0c\u7b14\u8005\u5728\u7c7b unix \u7cfb\u7edf\u4e0b\u4e00\u822c\u53ea\u9700\u8981\u914d\u7f6e\u4e00\u4e0b GOPATH \u6307\u5b9a\u4f60\u7684\u9879\u76ee\u8def\u5f84\u3002 \u6bd4\u5982\u52a0\u5165\u5982\u4e0b\u914d\u7f6e\u5230\u4f60\u7684 .bashrc \u6216\u8005 .zshrc \u91cc\u8fb9\u3002 \u8fd9\u91cc\u6bd4\u5982\u6211\u5728\u6211\u7684\u7528\u6237\u6839\u76ee\u5f55\u5efa\u7acb\u4e00\u4e2a\u540d\u5b57\u4e3a go \u7684\u6587\u4ef6\u5939\u5b58\u653e\u6211\u7684 go \u4ee3\u7801\u3002 1 2 export GOPATH = $HOME /go # don't forget to change your path correctly! export PATH = $PATH : $GOPATH /bin \u4e4b\u540e\u91cd\u542f\u7ec8\u7aef\u6216\u8005 source \u4e00\u4e0b\u4f60\u6539\u7684 rc \u6587\u4ef6\u5c31\u53ef\u4ee5\u4e86\u3002 \u5230\u8fd9\u91cc\u5982\u679c\u5b89\u88c5\u5b8c\u6210\u5e76\u4e14\u914d\u7f6e\u597d\u4e86\u73af\u5883\u53d8\u91cf\u5c31\u53ef\u4ee5\u5f00\u59cb\u7f16\u5199\u4ee3\u7801\u4e86\u3002 \u5f00\u53d1\u5de5\u5177 \u00b6 \u7b14\u8005\u89c6\u9891\u4e2d\u5c06\u4f7f\u7528 neovim(vim-go\u63d2\u4ef6)/tmux \u7b49\u5de5\u5177\u6765\u8fdb\u884c\u5f00\u53d1\u6f14\u793a\uff0c\u4e3b\u8981\u662f\u56e0\u4e3a\u7b14\u8005\u6bd4\u8f83\u719f\u6089\uff0c\u800c\u4e0d\u4e00\u5b9a\u662f\u6700\u597d\u7528\u7684\u3002 \u7b14\u8005\u5efa\u8bae\u4f60\u6311\u9009\u4e00\u4e2a\u81ea\u5df1\u719f\u6089\u7684\u5f00\u53d1\u5de5\u5177\u6765\u7f16\u5199 Golang \u4ee3\u7801\u3002\u76ee\u524d\u793e\u533a\u4e2d\u6bd4\u8f83\u6d41\u884c\u7684\u6709\uff1a Goland: \u6d41\u884c\u7684 Golang IDE, Jetbrains \u5168\u5bb6\u6876\u7cfb\u5217\u4ea7\u54c1 Vscode: \u5de8\u786c\u51fa\u54c1\u7684\u4ee3\u7801\u7f16\u8f91\u5668\uff0c\u76ee\u524d\u793e\u533a\u4e2d\u5e7f\u6cdb\u4f7f\u7528 Neovim/vim: \u5f88\u591a linux/mac \u7528\u6237\u7684\u9009\u62e9\uff0c\u7ed3\u5408 vim-go \u7b49\u63d2\u4ef6\u5f00\u53d1\u3002\u914d\u5408 coc.nvim \u8865\u5168 Emacs/Sublime/Atom \u7b49\u8de8\u5e73\u53f0\u7f16\u8f91\u5668\uff0c\u7ed3\u5408\u5bf9\u5e94\u7684 go \u8bed\u8a00\u63d2\u4ef6 \u5584\u7528\u5de5\u5177 \u00b6 \u4e00\u4e2a\u597d\u7684\u7f16\u7801\u4e60\u60ef\u662f\u6253\u5f00\u4f60\u7684\u5f00\u53d1\u5de5\u5177\u7684 gofmt(\u683c\u5f0f\u5316\u4ee3\u7801) \u548c goimports(\u81ea\u52a8 import)\uff0c\u8fd9\u6837\u5199 go \u4ee3\u7801\u4f1a\u65b9\u4fbf\u5f88\u591a\uff0c\u6bd4\u5982\u4fdd\u5b58\u4ee3\u7801\u7684\u65f6\u5019\u7f16\u8f91\u5668\u81ea\u52a8\u5e2e\u52a9\u4f60\u683c\u5f0f\u5316\u4ee3\u7801\u5e76\u4e14\u5f15\u5165\u4f9d\u8d56\u7684\u5305\uff0c\u5927\u5927\u51cf\u8f7b\u4e86\u7f16\u5199\u4ee3\u7801\u7684\u5fc3\u667a\u8d1f\u62c5\u3002 \u6700\u597d\u4e5f\u52a0\u4e0a\u9759\u6001\u68c0\u67e5\uff0c\u6bd4\u5982 golang \u6709 golangci-lint \u5de5\u5177\u53ef\u4ee5\u96c6\u6210\u5230\u4f60\u7684\u7f16\u8f91\u5668\u91cc\uff0c(\u7b14\u8005\u7528\u7684 vim neomake)\uff0c \u8fd9\u6837\u7f16\u5199\u4ee3\u7801\u5982\u679c\u6709\u4e00\u4e9b\u5c0f\u9519\u8bef\u5f00\u53d1\u5de5\u5177\u4f1a\u63d0\u793a\u4f60\u4fee\u6b63\uff0c\u51cf\u5c11\u4e00\u4e9b\u5728\u4f4e\u7ea7\u4ee3\u7801\u9519\u8bef\u4e0a\u6d6a\u8d39\u7684\u65f6\u95f4\u3002 \u4f60\u7684\u7b2c\u4e00\u4e2a Go \u7a0b\u5e8f \u00b6 \u9996\u5148\u8bb0\u5f97\u5b89\u88c5 when-changed \u6216\u8005\u7c7b\u4f3c\u5de5\u5177\uff0c\u8fd9\u6837\u5199\u5b8c\u4ee3\u7801\u76f4\u63a5\u4fdd\u5b58\u5c31\u53ef\u4ee5\u81ea\u52a8\u8fd0\u884c\u4f60\u7684 golang \u4ee3\u7801\u4e86\uff0c\u89e3\u653e\u53cc\u624b\u7684\u597d\u5de5\u5177\u3002 \u7b14\u8005\u4f1a\u4f7f\u7528 tmux \u6253\u5f00\u4e24\u4e2a\u7a97\u53e3\uff0c\u4e00\u4e2a\u7a97\u53e3\u7f16\u5199\u4ee3\u7801\uff0c\u4e00\u4e2a\u7528\u6765\u8fd0\u884c go \u5e76\u4e14\u4fdd\u5b58\u4ee3\u7801\u4e4b\u540e\u81ea\u52a8\u8fd0\u884c\u8f93\u51fa\u7ed3\u679c\u3002 \u5728\u4f60\u7684 GOPATH \u4e0b\u521b\u5efa\u4e00\u4e2a\u6587\u4ef6\u5939\u7528\u6765\u7f16\u5199\u6d4b\u8bd5\u4ee3\u7801\u3002 \u6bd4\u5982\u7b14\u8005\u7684\u662f GOPATH \u662f $HOME/go \uff0c\u7136\u540e\u8fdb\u5165\u5230 src \u91cc\u8fb9\uff0c \u968f\u4fbf\u521b\u5efa\u4e00\u4e2a\u6587\u4ef6\u5939\u6bd4\u5982\u53eb\u505a expamples\uff0c\u7136\u540e\u7f16\u5199\u4e00\u4e2a main.go \u5c31\u53ef\u4ee5\u4e86 \u597d\u4e86\uff0c\u8ba9\u6211\u4eec\u6765\u7f16\u5199\u548c\u8fd0\u884c\u7b2c\u4e00\u4e2a Go \u4ee3\u7801\u5427\uff0c\u6253\u5f00\u4f60\u7684\u5f00\u53d1\u5de5\u5177\u7136\u540e\u8f93\u5165\u4ee5\u4e0b\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 // hello_go.go package main import \"fmt\" func main () { fmt . Println ( \"Hello Golang!\" ) } \u9ebb\u96c0\u867d\u5c0f\u4e94\u810f\u4ff1\u5168\uff0c\u7b80\u5355\u770b\u4e0b\u8fd9\u6bb5\u4ee3\u7801\u90fd\u7528\u5230\u4e86\u54ea\u4e9b\u8bed\u6cd5\u7279\u6027\uff1a \u5305\u7684\u58f0\u660e (package main) \u6ce8\u91ca, go \u548c c++ \u4e00\u6837\u4f7f\u7528\u53cc\u659c\u7ebf\u548c /* \u6ce8\u91ca */ \u5206\u522b\u6765\u6ce8\u91ca\u5355\u884c\u548c\u591a\u884c\u4ee3\u7801 \u6bcf\u4e2a go \u7a0b\u5e8f\u90fd\u4ee5 main \u51fd\u6570\u4f5c\u4e3a\u5165\u53e3\u3002\u5b9a\u4e49\u51fd\u6570\u4f7f\u7528 func \u5f00\u5934 \u554a\u54c8\uff0c\u6ce8\u610f\u5728 go \u4ee3\u7801\u91cc\uff0c\u5fc5\u987b\u628a\u65b9\u62ec\u53f7\u653e\u5728\u51fd\u6570\u53f3\u8fb9\uff0c\u800c\u4e14\u4f7f\u7528 tab \u6765\u8fdb\u884c\u4ee3\u7801\u7f29\u8fdb(gofmt\u683c\u5f0f\u5316)\u3002\u5426\u5219\u7f16\u8bd1\u62a5\u9519\uff0c\u7b14\u8005\u8fd9\u91cc\u5efa\u8bae\u5927\u5bb6\u7528 gofmt \u5de5\u5177\u81ea\u52a8\u683c\u5f0f\u5316\u4ee3\u7801\u3002go \u5de5\u7a0b\u4e0a\u9650\u5236\u6bd4\u8f83\u4e25\u683c\uff0c\u76f4\u63a5\u5b9a\u6b7b\u4e86\u4e00\u4e9b\u8bed\u6cd5\u4e89\u8bba\uff08\u6bd4\u5982\u53f3\u65b9\u62ec\u53f7\u5f00\u53e3\u653e\u54ea\u91cc\uff1f\u7528 tab \u8fd8\u662f\u7a7a\u683c\u7b49\uff09 \u6bcf\u4e00\u884c\u4ee3\u7801\u4e0d\u7528\u6700\u540e\u52a0\u4e0a\u5206\u53f7\uff08\u5b9e\u9645\u4e0a\u7f16\u8bd1\u5668\u4f1a\u7ed9\u4f60\u505a\u8fd9\u79cd\u4e8b\uff09 \u8c03\u7528\u4e86\u5185\u7f6e\u5305 fmt \u7684\u51fd\u6570 Println \u6765\u6253\u5370\u8f93\u51fa(\u4ee5\u540e\u6211\u4eec\u4f1a\u770b\u5230\u5305\u91cc\u53ea\u6709\u5927\u5199\u5f00\u5934\u7684\u51fd\u6570\u624d\u80fd\u88ab\u5176\u4ed6\u5305\u5bfc\u5165\u4f7f\u7528) \u4f60\u53ef\u4ee5 git clone \u8fd9\u4e2a\u9879\u76ee\u5230\u4f60\u7684 GOPATH/src \u4e0b\uff0c\u7136\u540e\u8fdb\u5165 expamples \u91cc\u7684\u6587\u4ef6\u5939\uff0c\u627e\u5230 go \u6587\u4ef6\u5c31\u53ef\u4ee5\u4f7f\u7528 go run \u8fd0\u884c\u793a\u4f8b\u4ee3\u7801\u3002 \u89c6\u9891\u91cc\u6211\u4f1a\u6f14\u793a\u7f16\u5199\u4e00\u4e2a\u7b80\u5355\u7684 go \u4ee3\u7801\u5e76\u4e14\u8fd0\u884c\u5b83\u3002 \u7ec3\u4e60 \u00b6 \u8bf7\u5b89\u88c5 golang \u5f00\u53d1\u73af\u5883\u548c\u5f00\u53d1\u5de5\u5177\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u4e00\u4e2a\u81ea\u5df1\u64c5\u957f\u7684\u5f00\u53d1\u5de5\u5177\u7f16\u5199 go \u4ee3\u7801\u3002\u6709\u4e9b go \u5de5\u5177\u9700\u8981\u7f51\u7edc\u4ee3\u7406(\u672c\u4e66\u5f15\u7528\u7684\u4e00\u4e9b\u7f51\u7ad9\u94fe\u63a5\u53ef\u80fd\u4e5f\u9700\u8981\u4ee3\u7406\u8bbf\u95ee) \u8bf7\u7f16\u5199\u4f60\u7684\u7b2c\u4e00\u4e2a golang \u4ee3\u7801\u7ec3\u4e60\u8f93\u51fa hello Go\uff01 \u641c\u7d22\u5982\u4f55\u7528\u4f60\u7684\u5f00\u53d1\u5de5\u5177\u501f\u52a9 gofmt \u6765\u683c\u5f0f\u5316\u4f60\u7684\u4ee3\u7801\uff0c\u8fd9\u6837\u5199\u4ee3\u7801\u7684\u65f6\u5019\u4f1a\u51cf\u5c11\u5fc3\u667a\u8d1f\u62c5\uff0c\u628a\u7cbe\u529b\u96c6\u4e2d\u5728\u4ee3\u7801\u903b\u8f91\u672c\u8eab \u9664\u4e86 gofmt\uff0c\u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528 goimports\uff0c\u8fd9\u4e2a\u5de5\u5177\u4e0d\u4ec5\u53ef\u4ee5\u81ea\u52a8\u683c\u5f0f\u5316\uff0c\u8fd8\u53ef\u4ee5\u81ea\u52a8\u5e2e\u4f60\u5bfc\u5165import \u7684\u5305\uff0c\u975e\u5e38\u65b9\u4fbf\uff0c\u5f3a\u70c8\u5efa\u8bae\u4f60\u914d\u7f6e\u5230\u4f60\u7684\u5f00\u53d1\u5de5\u5177\u91cc\uff0c\u4fdd\u5b58\u7684\u65f6\u5019\u81ea\u52a8\u6267\u884c \u4e0b\u4e00\u7ae0\u6211\u4eec\u6765\u770b\u4e00\u4e0b go \u8bed\u8a00\u7684\u6570\u636e\u7c7b\u578b\u3002","title":"Hello Go!"},{"location":"basics/00_hello_go/hello_go/#hello-go","text":"Quote Go is not meant to innovate programming theory. It\u2019s meant to innovate programming practice. \u2013 Samuel Tesla","title":"Hello Go!"},{"location":"basics/00_hello_go/hello_go/#why-golang-go","text":"\u5f53\u7136\u662f\u8001\u677f\u8981\u6c42\u7684\uff0c\u563f\u563f\u3002\u7b14\u8005\u5de5\u4f5c\u7684\u524d\u51e0\u5e74\u90fd\u662f\u5199 Python\uff0c\u521a\u6bd5\u4e1a\u90a3\u4f1a Python \u8fd8\u6ca1\u6709\u90a3\u4e48\u706b\u3002\u5373\u4f7f\u5230\u73b0\u5728\uff0cPython \u540e\u7aef\u4f9d\u65e7\u4e0d\u662f\u4e3b\u6d41\u3002\u4e0d\u8fc7\u7b14\u8005\u611f\u89c9\u5bf9\u4e8e\u5f88\u591a\u4e2d\u5c0f\u516c\u53f8\u6765\u8bf4 Python \u8fd8\u662f\u591f\u7528\u7684\uff0c\u5e76\u4e14 Python \u53ef\u4ee5\u505a\u5f88\u591a\u4e8b\u60c5\u3002 \u6700\u8fd1\u53c8\u6362\u5de5\u4f5c\u4e86\u5230\u4e86\u4e00\u5bb6\u5927\u5382\uff0c\u5185\u90e8\u5f88\u591a\u662f c\u8279 \u9879\u76ee\u3002\u5bf9\u4e8e\u5927\u516c\u53f8\u52a8\u8f84\u6709\u767e\u5343\u4e07\u751a\u81f3\u4e0a\u4ebf\u7684\u65e5\u6d3b\u6765\u8bf4\uff0c\u5f88\u5c11\u4f1a\u4f7f\u7528\u811a\u672c\u8bed\u8a00\u6765\u505a\u9ad8\u6027\u80fd\u540e\u7aef\u3002 \u76ee\u524d\u7b14\u8005\u5f00\u59cb\u5b66\u4e60\u4f7f\u7528 c++(\u5386\u53f2\u9057\u7559) \u548c Golang \u5199\u540e\u7aef\u4e1a\u52a1\uff0c\u4e0d\u8fc7 c++ \u5199\u4e1a\u52a1\u6765\u8bf4\u6bd4\u8f83\u75db\u82e6\uff0c\u5f88\u591a\u4e1a\u52a1\u5f00\u59cb\u4f7f\u7528 Golang \u8fdb\u884c\u91cd\u6784\u3002 \u4e0d\u5f97\u4e0d\u627f\u8ba4\uff0c\u4ece\u56fd\u5185\u62db\u8058\u4fe1\u606f\u548c\u5e02\u573a\u884c\u60c5\u6765\u8bf4\uff0c\u8fd9\u51e0\u5e74 Golang \u4f5c\u4e3a\u4e92\u8054\u7f51\u540e\u7aef\u8bed\u8a00\u786e\u5b9e\u8d8a\u6765\u8d8a\u706b\uff0c\u5f88\u591a\u4e92\u8054\u7f51\u516c\u53f8\u90fd\u5f00\u59cb\u4f7f\u7528\u5b83\u3002 \u8bf4\u8bf4\u4e2a\u4eba\u611f\u89c9 Golang \u7684\u4e00\u4e9b\u4f18\u7f3a\u70b9\u5427(Go \u53f7\u79f0 21 \u4e16\u7eaa\u7684 C \u8bed\u8a00): \u6709\u4e2a\u597d\u7239(google)\u548c\u4e00\u5806\u725b\u4eba\u5f00\u53d1\u7ef4\u62a4 \u6027\u80fd\u9ad8\uff0c\u5e76\u53d1\u53cb\u597d\uff0c\u5185\u7f6e goroutine \u652f\u6301 \u5de5\u7a0b\u53cb\u597d\uff0c\u8bed\u6cd5\u7b80\u6d01\uff0c\u5bb9\u6613\u5b66\u4e60\u3001\u4e0a\u624b\u548c\u7ef4\u62a4\u3002Go \u7684\u8bed\u6cd5\u7279\u6027\u76f8\u6bd4\u5176\u4ed6\u8bed\u8a00\u6765\u8bf4\u66f4\u52a0\u7b80\u6d01\uff0c\u53ea\u670925\u4e2a\u5173\u952e\u8bcd \u9759\u6001\u7f16\u8bd1\u578b\u8bed\u8a00\uff0c\u90e8\u7f72\u975e\u5e38\u65b9\u4fbf\uff0c\u53ea\u9700\u8981 build \u4e00\u4e2a\u4e8c\u8fdb\u5236\u6587\u4ef6\u6254\u5230\u670d\u52a1\u5668\u4e0a \u56fd\u5185\u4e92\u8054\u7f51\u516c\u53f8 golang \u5c97\u4f4d\u65e5\u76ca\u589e\u591a\uff0c\u662f\u9ad8\u6027\u80fdweb\u540e\u7aef\u3001\u4e91\u670d\u52a1\u3001\u533a\u5757\u94fe\u7b49\u9886\u57df\u4e00\u95e8\u6bd4\u8f83\u6709\u524d\u666f\u7684\u8bed\u8a00\uff0c\u6709docker/k8s\u8fd9\u79cd\u6740\u624b\u7ea7\u5e94\u7528 \u4e5f\u6709\u4e00\u4e9b\u4e00\u76f4\u88ab\u4eba\u55b7\u7684\u5730\u65b9(\u5f53\u7136\u8bbe\u8ba1\u54f2\u5b66\u8fd9\u79cd\u95ee\u9898\uff0c\u4e0d\u540c\u4eba\u6709\u4e0d\u540c\u770b\u6cd5\uff09\uff1a \u9519\u8bef\u68c0\u67e5\uff0cerror check \u6bd4\u8f83\u539f\u59cb\u3002\u7ecf\u5e38\u770b\u5230\u4e00\u5806 err check \u4ee3\u7801\u5939\u6742\u5728\u4ee3\u7801\u903b\u8f91\u91cc \u6682\u65f6\u6ca1\u6709\u6cdb\u578b\uff0c\u67d0\u4e9b\u573a\u666f\u4e0b\u6bd4\u8f83\u7e41\u7410 \u751f\u6001\u4e0d\u591f\u5b8c\u5584\u7b49\u3002Go \u8fd8\u662f\u6bd4\u8f83\u5e74\u8f7b\u7684\u8bed\u8a00\uff0c\u751f\u6001\u76f8\u6bd4\u4e00\u4e9b\u53d1\u5c55\u8f83\u4e45\u7684\u8bed\u8a00\u8fd8\u76f8\u5bf9\u6b20\u7f3a GC\uff0c\u5b9e\u9645\u4e0a go \u5728\u5783\u573e\u56de\u6536\u4e0a\u6bd4\u5f53\u5e74\u6539\u5584\u975e\u5e38\u591a\uff0cweb \u540e\u7aef\u4e0a\u57fa\u672c\u4e0d\u662f\u4e2a\u95ee\u9898 \u603b\u5f97\u6765\u8bf4\uff0c\u7b14\u8005\u611f\u89c9\u4f5c\u4e3a\u5fae\u670d\u52a1\u540e\u7aef\u8bed\u8a00\u6765\u8bf4\uff0c\u8fd8\u662f\u5b8c\u5168\u591f\u7528\u7684\u3002go \u5728\u56fd\u5185\u7b97\u662f\u589e\u957f\u6bd4\u8f83\u5feb\u7684\u8bed\u8a00\u4e4b\u4e00\uff0c\u62db\u8058\u5c97\u4f4d\u76f8\u8f83\u4e8e\u524d\u51e0\u5e74\u589e\u52a0\u4e0d\u5c11\u3002 \u4e0b\u56fe\u662f go \u7684\u5173\u952e\u8bcd\u5217\u8868\uff0c\u53ea\u6709 25 \u4e2a\uff1a","title":"Why Golang(\u540e\u6587\u5747\u7b80\u79f0 Go) ?"},{"location":"basics/00_hello_go/hello_go/#golang","text":"\u672c\u7cfb\u5217\u4e0d\u662f\u9488\u5bf9\u7f16\u7a0b\u65b0\u624b\u7684\u6559\u7a0b\uff0c\u5982\u679c\u4f60\u8fd8\u65e0\u6cd5\u8bbf\u95ee\u76f8\u5173\u7f51\u7ad9\uff0c\u8bf7\u81ea\u884c\u89e3\u51b3\u3002 \u7b14\u8005\u8fd8\u662f\u4f9d\u65e7\u5f3a\u70c8\u5efa\u8bae\u4f60\u4f7f\u7528 Linux \u64cd\u4f5c\u7cfb\u7edf\u6765\u5b66\u4e60\uff0c\u56e0\u4e3a\u4e92\u8054\u7f51\u516c\u53f8\u5927\u591a\u4f7f\u7528 linxu server\u3002 \u8bf7\u5230 golang \u5b98\u7f51\u4e0b\u8f7d\u5e76\u4e14\u5b89\u88c5\u4f60\u7684\u5bf9\u5e94\u7cfb\u7edf\u73af\u5883\u7684\u5b89\u88c5\u5305(go\u662f\u8de8\u5e73\u53f0\u7684MacOS/Windows/Linux) https://golang.org/ https://github.com/golang/go \u5f53\u7136\u5982\u679c\u4f60\u662f\u4f7f\u7528 linux/macos \u8fd8\u53ef\u4ee5\u7528\u5bf9\u5e94\u5305\u7ba1\u7406\u5668\u6765\u5b89\u88c5\u3002\u6bd4\u5982\u7b14\u8005\u4f7f\u7528 macos \u7684 brew install \u5c31\u53ef\u4ee5\u5b89\u88c5\u4e86\u3002 \u5b89\u88c5\u5b8c\u6210\u4e4b\u540e\u8f93\u5165 go version \u8f93\u51fa\u4e86 go \u7248\u672c\u5c31\u5b89\u88c5\u5b8c\u6210\uff0c\u5efa\u8bae\u5b89\u88c5\u6700\u65b0\u7684\u7248\u672c\u5c31\u597d\uff0c\u5bf9\u4e8e\u76ee\u524d\u5b66\u4e60 go \u6765\u8bf4\u7248\u672c\u5f71\u54cd\u4e0d\u5927\u3002","title":"\u4e0b\u8f7d\u548c\u5b89\u88c5 Golang"},{"location":"basics/00_hello_go/hello_go/#_1","text":"go \u9700\u8981\u914d\u7f6e\u73af\u5883\u53d8\u91cf\u6307\u5b9a\u5176\u5b89\u88c5\u8def\u5f84(GOROOT)\u548c(GOPATH)\uff0c\u7b14\u8005\u5728\u7c7b unix \u7cfb\u7edf\u4e0b\u4e00\u822c\u53ea\u9700\u8981\u914d\u7f6e\u4e00\u4e0b GOPATH \u6307\u5b9a\u4f60\u7684\u9879\u76ee\u8def\u5f84\u3002 \u6bd4\u5982\u52a0\u5165\u5982\u4e0b\u914d\u7f6e\u5230\u4f60\u7684 .bashrc \u6216\u8005 .zshrc \u91cc\u8fb9\u3002 \u8fd9\u91cc\u6bd4\u5982\u6211\u5728\u6211\u7684\u7528\u6237\u6839\u76ee\u5f55\u5efa\u7acb\u4e00\u4e2a\u540d\u5b57\u4e3a go \u7684\u6587\u4ef6\u5939\u5b58\u653e\u6211\u7684 go \u4ee3\u7801\u3002 1 2 export GOPATH = $HOME /go # don't forget to change your path correctly! export PATH = $PATH : $GOPATH /bin \u4e4b\u540e\u91cd\u542f\u7ec8\u7aef\u6216\u8005 source \u4e00\u4e0b\u4f60\u6539\u7684 rc \u6587\u4ef6\u5c31\u53ef\u4ee5\u4e86\u3002 \u5230\u8fd9\u91cc\u5982\u679c\u5b89\u88c5\u5b8c\u6210\u5e76\u4e14\u914d\u7f6e\u597d\u4e86\u73af\u5883\u53d8\u91cf\u5c31\u53ef\u4ee5\u5f00\u59cb\u7f16\u5199\u4ee3\u7801\u4e86\u3002","title":"\u914d\u7f6e\u73af\u5883\u53d8\u91cf"},{"location":"basics/00_hello_go/hello_go/#_2","text":"\u7b14\u8005\u89c6\u9891\u4e2d\u5c06\u4f7f\u7528 neovim(vim-go\u63d2\u4ef6)/tmux \u7b49\u5de5\u5177\u6765\u8fdb\u884c\u5f00\u53d1\u6f14\u793a\uff0c\u4e3b\u8981\u662f\u56e0\u4e3a\u7b14\u8005\u6bd4\u8f83\u719f\u6089\uff0c\u800c\u4e0d\u4e00\u5b9a\u662f\u6700\u597d\u7528\u7684\u3002 \u7b14\u8005\u5efa\u8bae\u4f60\u6311\u9009\u4e00\u4e2a\u81ea\u5df1\u719f\u6089\u7684\u5f00\u53d1\u5de5\u5177\u6765\u7f16\u5199 Golang \u4ee3\u7801\u3002\u76ee\u524d\u793e\u533a\u4e2d\u6bd4\u8f83\u6d41\u884c\u7684\u6709\uff1a Goland: \u6d41\u884c\u7684 Golang IDE, Jetbrains \u5168\u5bb6\u6876\u7cfb\u5217\u4ea7\u54c1 Vscode: \u5de8\u786c\u51fa\u54c1\u7684\u4ee3\u7801\u7f16\u8f91\u5668\uff0c\u76ee\u524d\u793e\u533a\u4e2d\u5e7f\u6cdb\u4f7f\u7528 Neovim/vim: \u5f88\u591a linux/mac \u7528\u6237\u7684\u9009\u62e9\uff0c\u7ed3\u5408 vim-go \u7b49\u63d2\u4ef6\u5f00\u53d1\u3002\u914d\u5408 coc.nvim \u8865\u5168 Emacs/Sublime/Atom \u7b49\u8de8\u5e73\u53f0\u7f16\u8f91\u5668\uff0c\u7ed3\u5408\u5bf9\u5e94\u7684 go \u8bed\u8a00\u63d2\u4ef6","title":"\u5f00\u53d1\u5de5\u5177"},{"location":"basics/00_hello_go/hello_go/#_3","text":"\u4e00\u4e2a\u597d\u7684\u7f16\u7801\u4e60\u60ef\u662f\u6253\u5f00\u4f60\u7684\u5f00\u53d1\u5de5\u5177\u7684 gofmt(\u683c\u5f0f\u5316\u4ee3\u7801) \u548c goimports(\u81ea\u52a8 import)\uff0c\u8fd9\u6837\u5199 go \u4ee3\u7801\u4f1a\u65b9\u4fbf\u5f88\u591a\uff0c\u6bd4\u5982\u4fdd\u5b58\u4ee3\u7801\u7684\u65f6\u5019\u7f16\u8f91\u5668\u81ea\u52a8\u5e2e\u52a9\u4f60\u683c\u5f0f\u5316\u4ee3\u7801\u5e76\u4e14\u5f15\u5165\u4f9d\u8d56\u7684\u5305\uff0c\u5927\u5927\u51cf\u8f7b\u4e86\u7f16\u5199\u4ee3\u7801\u7684\u5fc3\u667a\u8d1f\u62c5\u3002 \u6700\u597d\u4e5f\u52a0\u4e0a\u9759\u6001\u68c0\u67e5\uff0c\u6bd4\u5982 golang \u6709 golangci-lint \u5de5\u5177\u53ef\u4ee5\u96c6\u6210\u5230\u4f60\u7684\u7f16\u8f91\u5668\u91cc\uff0c(\u7b14\u8005\u7528\u7684 vim neomake)\uff0c \u8fd9\u6837\u7f16\u5199\u4ee3\u7801\u5982\u679c\u6709\u4e00\u4e9b\u5c0f\u9519\u8bef\u5f00\u53d1\u5de5\u5177\u4f1a\u63d0\u793a\u4f60\u4fee\u6b63\uff0c\u51cf\u5c11\u4e00\u4e9b\u5728\u4f4e\u7ea7\u4ee3\u7801\u9519\u8bef\u4e0a\u6d6a\u8d39\u7684\u65f6\u95f4\u3002","title":"\u5584\u7528\u5de5\u5177"},{"location":"basics/00_hello_go/hello_go/#go","text":"\u9996\u5148\u8bb0\u5f97\u5b89\u88c5 when-changed \u6216\u8005\u7c7b\u4f3c\u5de5\u5177\uff0c\u8fd9\u6837\u5199\u5b8c\u4ee3\u7801\u76f4\u63a5\u4fdd\u5b58\u5c31\u53ef\u4ee5\u81ea\u52a8\u8fd0\u884c\u4f60\u7684 golang \u4ee3\u7801\u4e86\uff0c\u89e3\u653e\u53cc\u624b\u7684\u597d\u5de5\u5177\u3002 \u7b14\u8005\u4f1a\u4f7f\u7528 tmux \u6253\u5f00\u4e24\u4e2a\u7a97\u53e3\uff0c\u4e00\u4e2a\u7a97\u53e3\u7f16\u5199\u4ee3\u7801\uff0c\u4e00\u4e2a\u7528\u6765\u8fd0\u884c go \u5e76\u4e14\u4fdd\u5b58\u4ee3\u7801\u4e4b\u540e\u81ea\u52a8\u8fd0\u884c\u8f93\u51fa\u7ed3\u679c\u3002 \u5728\u4f60\u7684 GOPATH \u4e0b\u521b\u5efa\u4e00\u4e2a\u6587\u4ef6\u5939\u7528\u6765\u7f16\u5199\u6d4b\u8bd5\u4ee3\u7801\u3002 \u6bd4\u5982\u7b14\u8005\u7684\u662f GOPATH \u662f $HOME/go \uff0c\u7136\u540e\u8fdb\u5165\u5230 src \u91cc\u8fb9\uff0c \u968f\u4fbf\u521b\u5efa\u4e00\u4e2a\u6587\u4ef6\u5939\u6bd4\u5982\u53eb\u505a expamples\uff0c\u7136\u540e\u7f16\u5199\u4e00\u4e2a main.go \u5c31\u53ef\u4ee5\u4e86 \u597d\u4e86\uff0c\u8ba9\u6211\u4eec\u6765\u7f16\u5199\u548c\u8fd0\u884c\u7b2c\u4e00\u4e2a Go \u4ee3\u7801\u5427\uff0c\u6253\u5f00\u4f60\u7684\u5f00\u53d1\u5de5\u5177\u7136\u540e\u8f93\u5165\u4ee5\u4e0b\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 // hello_go.go package main import \"fmt\" func main () { fmt . Println ( \"Hello Golang!\" ) } \u9ebb\u96c0\u867d\u5c0f\u4e94\u810f\u4ff1\u5168\uff0c\u7b80\u5355\u770b\u4e0b\u8fd9\u6bb5\u4ee3\u7801\u90fd\u7528\u5230\u4e86\u54ea\u4e9b\u8bed\u6cd5\u7279\u6027\uff1a \u5305\u7684\u58f0\u660e (package main) \u6ce8\u91ca, go \u548c c++ \u4e00\u6837\u4f7f\u7528\u53cc\u659c\u7ebf\u548c /* \u6ce8\u91ca */ \u5206\u522b\u6765\u6ce8\u91ca\u5355\u884c\u548c\u591a\u884c\u4ee3\u7801 \u6bcf\u4e2a go \u7a0b\u5e8f\u90fd\u4ee5 main \u51fd\u6570\u4f5c\u4e3a\u5165\u53e3\u3002\u5b9a\u4e49\u51fd\u6570\u4f7f\u7528 func \u5f00\u5934 \u554a\u54c8\uff0c\u6ce8\u610f\u5728 go \u4ee3\u7801\u91cc\uff0c\u5fc5\u987b\u628a\u65b9\u62ec\u53f7\u653e\u5728\u51fd\u6570\u53f3\u8fb9\uff0c\u800c\u4e14\u4f7f\u7528 tab \u6765\u8fdb\u884c\u4ee3\u7801\u7f29\u8fdb(gofmt\u683c\u5f0f\u5316)\u3002\u5426\u5219\u7f16\u8bd1\u62a5\u9519\uff0c\u7b14\u8005\u8fd9\u91cc\u5efa\u8bae\u5927\u5bb6\u7528 gofmt \u5de5\u5177\u81ea\u52a8\u683c\u5f0f\u5316\u4ee3\u7801\u3002go \u5de5\u7a0b\u4e0a\u9650\u5236\u6bd4\u8f83\u4e25\u683c\uff0c\u76f4\u63a5\u5b9a\u6b7b\u4e86\u4e00\u4e9b\u8bed\u6cd5\u4e89\u8bba\uff08\u6bd4\u5982\u53f3\u65b9\u62ec\u53f7\u5f00\u53e3\u653e\u54ea\u91cc\uff1f\u7528 tab \u8fd8\u662f\u7a7a\u683c\u7b49\uff09 \u6bcf\u4e00\u884c\u4ee3\u7801\u4e0d\u7528\u6700\u540e\u52a0\u4e0a\u5206\u53f7\uff08\u5b9e\u9645\u4e0a\u7f16\u8bd1\u5668\u4f1a\u7ed9\u4f60\u505a\u8fd9\u79cd\u4e8b\uff09 \u8c03\u7528\u4e86\u5185\u7f6e\u5305 fmt \u7684\u51fd\u6570 Println \u6765\u6253\u5370\u8f93\u51fa(\u4ee5\u540e\u6211\u4eec\u4f1a\u770b\u5230\u5305\u91cc\u53ea\u6709\u5927\u5199\u5f00\u5934\u7684\u51fd\u6570\u624d\u80fd\u88ab\u5176\u4ed6\u5305\u5bfc\u5165\u4f7f\u7528) \u4f60\u53ef\u4ee5 git clone \u8fd9\u4e2a\u9879\u76ee\u5230\u4f60\u7684 GOPATH/src \u4e0b\uff0c\u7136\u540e\u8fdb\u5165 expamples \u91cc\u7684\u6587\u4ef6\u5939\uff0c\u627e\u5230 go \u6587\u4ef6\u5c31\u53ef\u4ee5\u4f7f\u7528 go run \u8fd0\u884c\u793a\u4f8b\u4ee3\u7801\u3002 \u89c6\u9891\u91cc\u6211\u4f1a\u6f14\u793a\u7f16\u5199\u4e00\u4e2a\u7b80\u5355\u7684 go \u4ee3\u7801\u5e76\u4e14\u8fd0\u884c\u5b83\u3002","title":"\u4f60\u7684\u7b2c\u4e00\u4e2a Go \u7a0b\u5e8f"},{"location":"basics/00_hello_go/hello_go/#_4","text":"\u8bf7\u5b89\u88c5 golang \u5f00\u53d1\u73af\u5883\u548c\u5f00\u53d1\u5de5\u5177\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u4e00\u4e2a\u81ea\u5df1\u64c5\u957f\u7684\u5f00\u53d1\u5de5\u5177\u7f16\u5199 go \u4ee3\u7801\u3002\u6709\u4e9b go \u5de5\u5177\u9700\u8981\u7f51\u7edc\u4ee3\u7406(\u672c\u4e66\u5f15\u7528\u7684\u4e00\u4e9b\u7f51\u7ad9\u94fe\u63a5\u53ef\u80fd\u4e5f\u9700\u8981\u4ee3\u7406\u8bbf\u95ee) \u8bf7\u7f16\u5199\u4f60\u7684\u7b2c\u4e00\u4e2a golang \u4ee3\u7801\u7ec3\u4e60\u8f93\u51fa hello Go\uff01 \u641c\u7d22\u5982\u4f55\u7528\u4f60\u7684\u5f00\u53d1\u5de5\u5177\u501f\u52a9 gofmt \u6765\u683c\u5f0f\u5316\u4f60\u7684\u4ee3\u7801\uff0c\u8fd9\u6837\u5199\u4ee3\u7801\u7684\u65f6\u5019\u4f1a\u51cf\u5c11\u5fc3\u667a\u8d1f\u62c5\uff0c\u628a\u7cbe\u529b\u96c6\u4e2d\u5728\u4ee3\u7801\u903b\u8f91\u672c\u8eab \u9664\u4e86 gofmt\uff0c\u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528 goimports\uff0c\u8fd9\u4e2a\u5de5\u5177\u4e0d\u4ec5\u53ef\u4ee5\u81ea\u52a8\u683c\u5f0f\u5316\uff0c\u8fd8\u53ef\u4ee5\u81ea\u52a8\u5e2e\u4f60\u5bfc\u5165import \u7684\u5305\uff0c\u975e\u5e38\u65b9\u4fbf\uff0c\u5f3a\u70c8\u5efa\u8bae\u4f60\u914d\u7f6e\u5230\u4f60\u7684\u5f00\u53d1\u5de5\u5177\u91cc\uff0c\u4fdd\u5b58\u7684\u65f6\u5019\u81ea\u52a8\u6267\u884c \u4e0b\u4e00\u7ae0\u6211\u4eec\u6765\u770b\u4e00\u4e0b go \u8bed\u8a00\u7684\u6570\u636e\u7c7b\u578b\u3002","title":"\u7ec3\u4e60"},{"location":"basics/01_go_basic_types/basic_types/","text":"\u5b66\u4e60 go \u7684\u57fa\u7840\u7c7b\u578b \u00b6 Quote \u201cIn Go, the code does exactly what it says on the page.\u201d \u2013 Andrew Gerrand Go \u53d8\u91cf\u6807\u8bc6\u7b26 \u00b6 \u7ed9\u4e00\u4e2a go \u53d8\u91cf\u547d\u540d(\u6807\u8bc6\u7b26)\u7684\u65f6\u5019\uff0c\u901a\u5e38\u4f7f\u7528\u5927\u9a86\u9a7c(BigCamel)\u548c\u5c0f\u9a86\u9a7c(smallCamel)\u547d\u540d\u6cd5\uff0c\u53ea\u8981\u4fdd\u8bc1\u4e0d\u548c\u5185\u7f6e\u768425\u4e2a\u5173\u952e\u8bcd\u51b2\u7a81\u5c31\u884c\u3002 \u5f53\u7136 go \u4e5f\u5185\u7f6e\u4e86\u4e00\u4e9b\u81ea\u5df1\u7684\u6807\u8bc6\u7b26\uff0c\u89c1\u4e0b\u56fe\uff0c\u6211\u5efa\u8bae\u4f60\u6700\u597d\u4e0d\u8981\u4f7f\u7528\u8fd9\u4e9b\u540c\u540d\u7684\u9884\u5b9a\u4e49\u6807\u8bc6\u7b26\u6765\u547d\u540d\u53d8\u91cf\u3002 \u53ea\u8981\u662f\u975e\u7a7a\u7684\u5b57\u6bcd\u6216\u8005\u6570\u5b57\uff08\u7b2c\u4e00\u4e2a\u5fc5\u987b\u662f\u5b57\u6bcd\uff09\uff0c\u5e76\u4e14\u4e0d\u548c\u5173\u952e\u8bcd\u51b2\u7a81\u5c31\u662f\u5408\u6cd5\u7684\u6807\u8bc6\u7b26\u3002\u6ce8\u610f\u6807\u8bc6\u7b26\u533a\u5206\u5927\u5c0f\u5199\uff0c\u5e76\u4e14\u5728 go \u91cc\u8fb9\u53ea\u6709\u5927\u5199\u5f00\u5934\u7684\u624d\u80fd\u5bfc\u51fa\u88ab\u5176\u4ed6\u5305\u4f7f\u7528\uff08\u540e\u6587\u6211\u4eec\u518d\u8ba8\u8bba\uff09\u3002 \u9759\u6001/\u52a8\u6001\u7c7b\u578b\uff0c\u5f31\u7c7b\u578b/\u5f3a\u7c7b\u578b \u00b6 \u9759\u6001\uff0c\u52a8\u6001\u7c7b\u578b\u6307\u7684\u662f\u7c7b\u578b\u662f\u5728\u7f16\u8bd1\u671f\u8fd8\u662f\u8fd0\u884c\u671f\u95f4\u786e\u5b9a\uff0c\u800c\u5f31\u7c7b\u578b\u548c\u5f3a\u7c7b\u578b\u6307\u7684\u662f\u6709\u6ca1\u6709\u9690\u5f0f\u7c7b\u578b\u8f6c\u6362\u3002 \u6bd4\u5982 Python \u5c31\u662f\u52a8\u6001\u5f3a\u7c7b\u578b\u8bed\u8a00(\u5f88\u591a\u4eba\u8bef\u4ee5\u4e3a\u5f31\u7c7b\u578b)\uff0c\u800c php/js \u662f\u52a8\u6001\u5f31\u7c7b\u578b\u8bed\u8a00\u3002 go \u662f\u9759\u6001\u5f3a\u7c7b\u578b\u8bed\u8a00\uff0c\u6211\u4eec\u5728\u7f16\u5199\u4ee3\u7801\u7684\u65f6\u5019\u9700\u8981\u5148\u58f0\u660e\u53d8\u91cf\u7684\u7c7b\u578b\uff08\u6216\u8005\u7f16\u8bd1\u5668\u63a8\u5bfc\uff09\uff0c \u5728\u4e0d\u540c\u7c7b\u578b\u4e4b\u95f4\u8f6c\u6362\u7684\u65f6\u5019\u9700\u8981\u6211\u4eec\u5f3a\u5236\u4f7f\u7528\u7c7b\u578b\u8f6c\u6362\u7b26\u3002 go \u5982\u4f55\u58f0\u660e\u4e00\u4e2a\u53d8\u91cf \u00b6 go \u4e2d\u58f0\u660e\u4e00\u4e2a\u53d8\u91cf\u5f88\u7b80\u5355\uff0c\u4f7f\u7528 var \u5173\u952e\u5b57\u5c31\u53ef\u4ee5\u4e86\uff0c\u58f0\u660e\u4e4b\u540e\u9ed8\u8ba4\u4f7f\u7528\u5176\u7c7b\u578b\u7684\u96f6\u503c\u521d\u59cb\u5316\u3002 \u6bd4\u5982int \u7c7b\u578b\u9ed8\u8ba4\u662f0\uff0c\u5b57\u7b26\u4e32\u5c31\u662f\u7a7a\u4e32\u3002 \u5f53\u7136\u4e3a\u4e86\u7b80\u5316 go \u8fd8\u63d0\u4f9b\u4e86\u4e00\u79cd\u4f7f\u7528 := \u76f4\u63a5\u58f0\u660e\u5e76\u4e14\u521d\u59cb\u5316\u7684\u65b9\u5f0f\u3002\u8bf7\u7f16\u5199\u5982\u4e0b\u4ee3\u7801\u89c2\u5bdf\u8f93\u51fa(\u6211\u5efa\u8bae\u4f60\u7eaf\u624b\u6572\u7ec3\u7ec3\u624b\u901f\uff0c\u4e0d\u8981\u76f4\u63a5\u590d\u5236)\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 package main import \"fmt\" func main () { var i int64 // \u58f0\u660e\u4e00\u4e2a int64 \u53d8\u91cf\u3002\u6ce8\u610f\u7c7b\u578b\u653e\u5728\u540e\u8fb9\uff0c\u4e60\u60ef\u5c31\u597d\u4e86 var b string // \u58f0\u660e\u4e00\u4e2a\u5b57\u7b26\u4e32 fmt . Println ( \"i is \" , i ) // 0 fmt . Println ( \"b is \" , b ) // \"\" // \u540c\u65f6\u58f0\u660e\u5e76\u4e14\u8d4b\u503c var floatNum float64 = 1.0 var price1 , price2 float64 = 8.8 , 9.6 fmt . Println ( floatNum , price1 , price2 ) // \u8fd8\u6709\u4e00\u79cd\u7b80\u5316\u65b9\u5f0f\uff0c\u58f0\u660e\u5e76\u4e14\u8d4b\u503c\uff0c\u7f16\u8bd1\u5668\u8d1f\u8d23\u63a8\u65ad\u7c7b\u578b ii := 1 s := \"Hello Go!\" fmt . Println ( \"ii is \" , ii ) // 1 fmt . Println ( \"s is \" , s ) // Hello Go!\" } Go \u7684\u57fa\u7840\u7c7b\u578b \u00b6 \u65e0\u8bba\u662f\u5b66\u4e60\u8fc7\u7a0b\u5f0f\u3001\u9762\u5411\u5bf9\u8c61\u8fd8\u662f\u5e76\u53d1\u7f16\u7a0b\uff0c\u6211\u4eec\u90fd\u9700\u8981\u9996\u5148\u5b66\u4e60\u4e00\u95e8\u8bed\u8a00\u7684\u57fa\u7840\u7c7b\u578b\uff0c\u5bf9\u4e8e\u5927\u90e8\u5206\u4e1a\u52a1\u5e38\u7528\u7f16\u7a0b\u8bed\u8a00\u6765\u8bf4\u5c31\u662f\u6570\u503c\u7c7b\u578b\u548c\u5b57\u7b26\u4e32\u7c7b\u578b\u3002 bool \u7c7b\u578b \u00b6 bool \u5c31\u662f\u771f\u6216\u8005\u5047\uff0c\u4e00\u4e9b\u7f16\u7a0b\u8bed\u8a00\u4f7f\u7528 0 \u548c\u975e 0 \u8868\u793a\u3002\u4f46\u662f go \u91cc\u6bd4\u5982 if \u8bed\u53e5\u540e\u8fb9\u53ea\u80fd\u662f bool \u503c\u6216\u8005\u8fd4\u56de bool \u503c\u7684\u8868\u8fbe\u5f0f\uff0c\u800c\u4e0d\u50cf c \u4e00\u6837\u53ef\u4ee5\u4f7f\u7528 int \u503c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // \u8ba9\u6211\u4eec\u7f16\u5199\u4e00\u4e9b\u5c0f\u7684 demo \u4ee3\u7801\u6765\u6d4b\u8bd5\u4e00\u4e0b func boolDemo () { var b1 bool b2 := false b3 := true if b1 { fmt . Println ( \"b1 is true\" ) } if b2 { fmt . Println ( \"b2 is true\" ) } if b3 { fmt . Println ( \"b3 is true\" ) } } \u6570\u503c\u7c7b\u578b(\u6574\u578b\u548c\u6d6e\u70b9\u7c7b\u578b) \u00b6 \u6574\u6570\u7c7b\u578b \u00b6 \u6574\u6570\u7c7b\u578b\u53ef\u4ee5\u8bf4\u662f\u6211\u4eec\u6700\u5e38\u7528\u7684\u4e00\u79cd\u7c7b\u578b\uff0c\u5982\u679c\u4f60\u7528 python \u7684\u8bdd\u975e\u5e38\u7701\u5fc3(Python3 int \u5c31\u662f\u5927\u6570\u7c7b\uff0c\u5185\u5b58\u591f\u7528\u65e0\u9700\u62c5\u5fc3\u6ea2\u51fa)\uff0c\u4f46\u662f go \u91cc\u8fb9\u5374\u6709\u975e\u5e38\u591a\u7684 int \u7c7b\u578b\u3002 \u5bf9\u4e8e\u4e00\u95e8\u8ffd\u6c42\u6027\u80fd\u7684\u8bed\u8a00\u6765\u8bf4\uff0c\u6709\u4e9b\u5730\u65b9\u53ef\u4ee5\u7701\u5185\u5b58\u5c31\u7701\u4e00\u70b9\u3002\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u5c31\u662f\u6bcf\u79cd\u7c7b\u578b\u53d6\u503c\u8303\u56f4\uff0c\u786e\u4fdd\u4e0d\u8981\u8d85\u8303\u56f4\u4e86\u3002\u4e1a\u52a1\u4e2d\u7ecf\u5e38\u4f7f\u7528\u4e5f\u5c31\u662f int64/int32 \u4e86\u3002 \u5f53\u7136\u4f5c\u4e3a\u6574\u6570\uff0c\u4e00\u822c\u5e38\u7528\u7684\u90a3\u5c31\u662f\u52a0\u51cf\u4e58\u9664\u4e4b\u7c7b\u7684\u6570\u5b66\u8fd0\u7b97\u4e86\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // \u540c\u6837\u6211\u4eec\u7f16\u5199\u7b80\u5355\u7684\u6d4b\u8bd5\u4ee3\u7801\u6765\u719f\u6089\u5b83\u4eec\uff0c\u786e\u4fdd\u4f60\u4e0d\u8981\u76f4\u63a5\u590d\u5236\u7c98\u8d34\u3002\u6574\u672c\u7535\u5b50\u4e66\u548c\u4ee3\u7801\u90fd\u662f\u7b14\u8005\u4e00\u4e2a\u5b57\u4e00\u4e2a\u5b57\u6572\u51fa\u6765\u7684 func intDemo () { var i64 int64 i64 = 10 fmt . Println ( i64 + 10 ) i32 := int32 ( 42 ) fmt . Println ( i32 + 10 ) fmt . Println ( math . MaxInt64 , // \u9700\u8981\u5bfc\u5165 math \u5305\uff0c\u89c1\u672c\u7ae0\u793a\u4f8b\u4ee3\u7801 ) a , b := 10 , 0 fmt . Println ( a / b ) // Boom! \u4f1a\u53d1\u751f\u4ec0\u4e48\u3002\u9519\u8bef\u5904\u7406\u6211\u4eec\u540e\u6587\u4ecb\u7ecd } func main () { intDemo () // \u867d\u7136\u8fd8\u6ca1\u8bb2\u5230 \u51fd\u6570\uff0c\u4e0d\u8fc7\u76f8\u4fe1\u4f60\u4e5f\u77e5\u9053\u5982\u4f55\u8c03\u7528\u4e86 } \u6d6e\u70b9\u6570\u7c7b\u578b \u00b6 \u63a5\u4e0b\u6765\u662f\u6d6e\u70b9\u6570\uff0c\u5f88\u591a\u573a\u666f\u6211\u4eec\u8ba1\u7b97\u7684\u65f6\u5019\u90fd\u9700\u8981\u6709\u5c0f\u6570\u70b9\uff0cgo \u91cc\u6709\u4e24\u79cd\u7c7b\u578b\u7684\u6d6e\u70b9\u6570\u3002 math \u5305\u91cc\u5f88\u591a\u51fd\u6570\u4ee5 float64 \u4f5c\u4e3a\u53c2\u6570\uff0c\u4f60\u53ef\u4ee5\u63d0\u524d\u770b\u4e00\u4e0b go \u6587\u6863\u770b\u770b\u63d0\u4f9b\u4e86\u54ea\u4e9b\u51fd\u6570\u3002 \u6d6e\u70b9\u6570\u540c\u6837\u4e5f\u662f\u5e38\u89c1\u7684\u52a0\u51cf\u4e58\u9664\uff0c\u8fd9\u91cc\u8bf7\u5927\u5bb6\u81ea\u5df1\u7f16\u5199\u4e00\u4e9b\u4ee3\u7801\u6765\u7ec3\u4e60\uff0c\u7b14\u8005\u4e0d\u518d\u8d58\u8ff0\u3002 \u6570\u503c\u8f6c\u6362\u5c0f\u63d0\u793a \u00b6 \u6ce8\u610f\u4e0d\u540c\u6570\u503c\u7c7b\u578b\u4e4b\u95f4\u8f6c\u6362(\u5927\u8f6c\u5c0f)\u53ef\u80fd\u6709\u622a\u65ad\uff0c\u6bd4\u5982\u4e00\u4e2a int64 \u8f6c\u6210 int32 \u7c7b\u578b\u7684\u6570\u5b57 \u53ef\u4ee5\u4f7f\u7528 int(float) \u8f6c\u6362\u4e00\u4e2a \u6d6e\u70b9\u6570\u5230\u6574\u6570\uff0c\u5c0f\u6570\u90e8\u5206\u4f1a\u4e22\u5f03\u3002\u4f46\u662f\u5982\u679c\u6d6e\u70b9\u6570\u7684\u503c\u8d85\u8fc7\u4e86\u6574\u6570\u7c7b\u578b\u8303\u56f4\uff0c\u7ed3\u679c\u662f\u4e0d\u53ef\u9884\u671f\u7684 \u6ce8\u610f\u8ba1\u7b97\u673a\u4f7f\u7528\u4e8c\u8fdb\u5236\u4e0d\u80fd\u7cbe\u786e\u8868\u793a float \u6570\u5b57\uff0c\u5f53\u6bd4\u8f83\u4e24\u4e2a\u6d6e\u70b9\u6570\u65f6\u4f60\u8981\u683c\u5916\u5c0f\u5fc3\u4e0d\u80fd\u7528\u7b49\u53f7\u76f4\u63a5\u6bd4\u8f83\u3002(\u901a\u5e38\u4f5c\u5dee\u7edd\u5bf9\u503c\u5c0f\u4e8e\u4e00\u4e2a\u5f88\u5c0f\u7684\u9608\u503c) \u4e1a\u52a1\u4e2d\u7ecf\u5e38\u4f7f\u7528 float64\uff0c\u56e0\u4e3a math \u51fd\u6570\u5f88\u591a\u63a5\u53d7 float64 \u4f5c\u4e3a\u53c2\u6570 \u4f60\u53ef\u4ee5\u901a\u8fc7 math.MaxInt32 \u7c7b\u4f3c\u7684\u5b9a\u4e49\u67e5\u770b\u4e00\u4e2a\u7c7b\u578b\u7684\u6700\u5927\u503c \u590d\u6570\u7c7b\u578b \u00b6 \u590d\u6570\u5728\u5e38\u89c1\u4e1a\u52a1\u4ee3\u7801\u4e2d\u4f7f\u7528\u6bd4\u8f83\u5c11\uff0c\u8fd9\u91cc\u5c31\u7565\u8fc7\u4e86\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528 complex() \u6765\u521b\u5efa\u590d\u6570\u3002 \u5ef6\u4f38(\u5927\u6574\u6570\u8fd0\u7b97) \u00b6 \u67d0\u4e9b\u573a\u666f\u4e0b\uff0c \u5982\u679c64\u4f4d\u4f9d\u7136\u6ee1\u8db3\u4e0d\u4e86\u4f60\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u5927\u6574\u6570 big.Int \u548c \u6709\u7406\u6570 big.Rat \u7c7b\u578b\u3002 \u5b57\u7b26\u4e32 \u00b6 \u4e1a\u52a1\u4e2d\u53e6\u4e00\u4e2a\u6700\u5e38\u7528\u7684\u5c31\u662f\u5b57\u7b26\u4e32(string)\u4e86\uff0cweb \u5f00\u53d1\u51e0\u4e4e\u5929\u5929\u5c31\u662f\u548c\u5b57\u7b26\u4e32\u6253\u4ea4\u9053\u3002Go\u7684\u5b57\u7b26\u4e32\u662f\u4f7f\u7528 UTF-8 \u7f16\u7801\u7684\u5b57\u7b26\u5e8f\u5217\uff0c\u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u4f7f\u7528\u4efb\u610f\u56fd\u5bb6\u7684\u8bed\u8a00\u3002 Go \u4e2d\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u53cc\u5f15\u53f7(\")\u548c\u53cd\u5f15\u53f7(`)\u6765\u521b\u5efa\u5b57\u7b26\u4e32\uff0c\u533a\u522b\u53cd\u5f15\u53f7\u4f1a\u5ffd\u7565\u8f6c\u4e49\u7b26\uff0c\u5e76\u4e14\u53ef\u4ee5\u521b\u5efa\u591a\u884c\u5b57\u7b26\u4e32\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 func stringDemo () { // \u5982\u679c\u5b57\u7b26\u4e32\u672c\u8eab\u4e5f\u6709\u53cc\u5f15\u53f7\uff0c\u5c31\u9700\u8981\u628a\u91cc\u8fb9\u7684\u53cc\u5f15\u53f7\u4f7f\u7528 \\ \u8f6c\u4e49 s1 := \"\\\"Hello Go\\\"\" // \u4f7f\u7528\u53cd\u659c\u7ebf\u5c31\u53ef\u4ee5\u76f4\u63a5\u5305\u542b\u53cc\u5f15\u53f7\u4e86 s2 := `\"Hello Go\"` fmt . Println ( s1 ) // \u6253\u5370\u51fa \"Hello Go\" fmt . Println ( s2 ) // \u6253\u5370\u51fa \"Hello Go\" s3 := ` \u4f60\u597d ` s4 := \"Golang !\" fmt . Println ( s3 + s4 ) } \u5b57\u7b26\u4e32\u652f\u6301\u5982\u4e0b\u64cd\u4f5c\uff1a \u5b57\u7b26\u4e32\u548c\u6570\u503c\u7c7b\u578b\u7684\u8f6c\u6362 \u00b6 \u5728 Python \u91cc\u8fdb\u884c\u8fd9\u79cd\u8f6c\u6362\u662f\u4e00\u4ef6\u5f88\u5bb9\u6613\u7684\u4e8b\u60c5\uff0c\u4f46\u662f go \u91cc\u8fb9\u53ef\u4e0d\u65b9\u4fbf\u3002\u6211\u5217\u51fa\u6765\u4ee5\u4e0b\u4ee3\u7801\u4f60\u5c31\u77e5\u9053\u5566\uff1a \u6ce8\u610f\u8fd9\u91cc\u7684 Atoi \u662f Ascii to Integer \u7684\u7f29\u5199\uff0c\u89c6\u9891\u91cc\u6709\u4e2a\u53e3\u8bef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 func testConvert () { // \u6d4b\u8bd5 int \u548c string(decimal) \u4e92\u76f8\u8f6c\u6362\u7684\u51fd\u6570 // https://yourbasic.org/golang/convert-int-to-string/ // int -> string sint := strconv . Itoa ( 97 ) fmt . Println ( sint , sint == \"97\" ) // byte -> string bytea := byte ( 1 ) bint := strconv . Itoa ( int ( bytea )) fmt . Println ( bint ) // int64 -> string sint64 := strconv . FormatInt ( int64 ( 97 ), 10 ) fmt . Println ( sint64 , sint64 == \"97\" ) // int64 -> string (hex) \uff0c\u5341\u516d\u8fdb\u5236 sint64hex := strconv . FormatInt ( int64 ( 97 ), 16 ) fmt . Println ( sint64hex , sint64hex == \"61\" ) // string -> int _int , _ := strconv . Atoi ( \"97\" ) fmt . Println ( _int , _int == int ( 97 )) // string -> int64 _int64 , _ := strconv . ParseInt ( \"97\" , 10 , 64 ) fmt . Println ( _int64 , _int64 == int64 ( 97 )) // https://stackoverflow.com/questions/30299649/parse-string-to-specific-type-of-int-int8-int16-int32-int64 // string -> int32\uff0c\u6ce8\u610f parseInt \u59cb\u7ec8\u8fd4\u56de\u7684\u662f int64\uff0c\u6240\u4ee5\u8fd8\u662f\u9700\u8981 int32(n) \u5f3a\u8f6c\u4e00\u4e0b _int32 , _ := strconv . ParseInt ( \"97\" , 10 , 32 ) fmt . Println ( _int32 , int32 ( _int32 ) == int32 ( 97 )) // int32 -> string, https://stackoverflow.com/questions/39442167/convert-int32-to-string-in-golang i := 42 strconv . FormatInt ( int64 ( i ), 10 ) // fast strconv . Itoa ( int ( i )) // fast fmt . Sprint ( i ) // slow // int -> int64 \uff0c\u4e0d\u4f1a\u4e22\u5931\u7cbe\u5ea6 var n int = 97 fmt . Println ( int64 ( n ) == int64 ( 97 )) // string -> float32/float64 https://yourbasic.org/golang/convert-string-to-float/ f := \"3.14159265\" if s , err := strconv . ParseFloat ( f , 32 ); err == nil { fmt . Println ( s ) // 3.1415927410125732 } if s , err := strconv . ParseFloat ( f , 64 ); err == nil { fmt . Println ( s ) // 3.14159265 } } \u5e38\u91cf\u548c\u53d8\u91cf \u00b6 \u5e38\u91cf\u987e\u540d\u601d\u4e49\u4f60\u6ca1\u6cd5\u6539\u53d8\u5b83\uff0c\u5728\u4e00\u4e9b\u5168\u5c40\u53d8\u91cf\u4e2d\u4f7f\u7528 const \u4f1a\u66f4\u52a0\u5b89\u5168\u3002\u5e38\u91cf\u8868\u8fbe\u5f0f\u662f\u5728\u7f16\u8bd1\u671f\u8ba1\u7b97\u3002 \u5bf9\u4e8e\u4e00\u4e9b\u88ab\u6574\u4e2a\u6a21\u5757\u6216\u8005\u5176\u4ed6\u6a21\u5757\u4f7f\u7528\u7684\u53d8\u91cf\u6765\u8bf4\uff0c\u6700\u597d\u5b9a\u4e49\u6210 const \u9632\u6b62\u88ab\u610f\u5916\u4fee\u6539\u3002 \u6bd4\u5982\u6211\u4eec\u4f1a\u7ecf\u5e38\u5728\u4e00\u4e9b\u6587\u4ef6\u5f00\u5934\u770b\u5230\u7c7b\u4f3c const \u5b9a\u4e49\uff1a 1 2 3 4 5 6 7 8 9 const ( Sunday = 0 Monday = 1 Tuesday = 2 Wednesday = 3 Thursday = 4 Friday = 5 Saturday = 6 ) \u679a\u4e3e \u00b6 \u5bf9\u4e8e\u4e0a\u8ff0\u8fd9\u79cd\u9012\u589e\u573a\u666f\uff0cgo \u8fd8\u63d0\u4f9b\u4e86\u4e00\u79cd\u66f4\u52a0\u7b80\u6d01\u7684\u65b9\u5f0f\u6765\u5b9a\u4e49\uff0c\u4f7f\u7528 iota \u8868\u8fbe\u5f0f\uff0c\u5b83\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u5b8c\u6210\u81ea\u589e\u64cd\u4f5c(\u53ea\u6709\u8fd9\u79cd\u5e38\u89c1\u624d\u63a8\u8350\u53bb\u4f7f\u7528 iota) 1 2 3 4 5 6 7 8 9 const ( Sunday = iota Monday Tuesday Wednesday Thursday Friday Saturday ) \u4f60\u53ef\u4ee5\u7f16\u5199\u4ee3\u7801\u6253\u5370\u4e00\u4e0b\u770b\u770b\u5269\u4e0b\u7684\u503c\u662f\u591a\u5c11\uff1f \u5c0f\u95ee\u9898\uff1a \u00b6 \u4e3a\u4ec0\u4e48\u6709 int \u8fd8\u9700\u8981 int32 \u548c int64\uff0c\u4e1a\u52a1\u4ee3\u7801\u91cc\u5982\u4f55\u9009\u62e9\u5462\uff1f \u8bf7\u4f60\u5c1d\u8bd5\u6253\u5370\u6bcf\u79cd int \u7c7b\u578b\u7684\u6570\u503c\u8303\u56f4\uff1f \u53c2\u8003\uff1a \u00b6 \u90e8\u5206\u56fe\u7247\u6765\u81ea\u300aGo \u8bed\u8a00\u7a0b\u5e8f\u8bbe\u8ba1\u300b Ultimate Visual Guide to Go Enums and iota","title":"Go \u57fa\u7840\u7c7b\u578b"},{"location":"basics/01_go_basic_types/basic_types/#go","text":"Quote \u201cIn Go, the code does exactly what it says on the page.\u201d \u2013 Andrew Gerrand","title":"\u5b66\u4e60 go \u7684\u57fa\u7840\u7c7b\u578b"},{"location":"basics/01_go_basic_types/basic_types/#go_1","text":"\u7ed9\u4e00\u4e2a go \u53d8\u91cf\u547d\u540d(\u6807\u8bc6\u7b26)\u7684\u65f6\u5019\uff0c\u901a\u5e38\u4f7f\u7528\u5927\u9a86\u9a7c(BigCamel)\u548c\u5c0f\u9a86\u9a7c(smallCamel)\u547d\u540d\u6cd5\uff0c\u53ea\u8981\u4fdd\u8bc1\u4e0d\u548c\u5185\u7f6e\u768425\u4e2a\u5173\u952e\u8bcd\u51b2\u7a81\u5c31\u884c\u3002 \u5f53\u7136 go \u4e5f\u5185\u7f6e\u4e86\u4e00\u4e9b\u81ea\u5df1\u7684\u6807\u8bc6\u7b26\uff0c\u89c1\u4e0b\u56fe\uff0c\u6211\u5efa\u8bae\u4f60\u6700\u597d\u4e0d\u8981\u4f7f\u7528\u8fd9\u4e9b\u540c\u540d\u7684\u9884\u5b9a\u4e49\u6807\u8bc6\u7b26\u6765\u547d\u540d\u53d8\u91cf\u3002 \u53ea\u8981\u662f\u975e\u7a7a\u7684\u5b57\u6bcd\u6216\u8005\u6570\u5b57\uff08\u7b2c\u4e00\u4e2a\u5fc5\u987b\u662f\u5b57\u6bcd\uff09\uff0c\u5e76\u4e14\u4e0d\u548c\u5173\u952e\u8bcd\u51b2\u7a81\u5c31\u662f\u5408\u6cd5\u7684\u6807\u8bc6\u7b26\u3002\u6ce8\u610f\u6807\u8bc6\u7b26\u533a\u5206\u5927\u5c0f\u5199\uff0c\u5e76\u4e14\u5728 go \u91cc\u8fb9\u53ea\u6709\u5927\u5199\u5f00\u5934\u7684\u624d\u80fd\u5bfc\u51fa\u88ab\u5176\u4ed6\u5305\u4f7f\u7528\uff08\u540e\u6587\u6211\u4eec\u518d\u8ba8\u8bba\uff09\u3002","title":"Go \u53d8\u91cf\u6807\u8bc6\u7b26"},{"location":"basics/01_go_basic_types/basic_types/#_1","text":"\u9759\u6001\uff0c\u52a8\u6001\u7c7b\u578b\u6307\u7684\u662f\u7c7b\u578b\u662f\u5728\u7f16\u8bd1\u671f\u8fd8\u662f\u8fd0\u884c\u671f\u95f4\u786e\u5b9a\uff0c\u800c\u5f31\u7c7b\u578b\u548c\u5f3a\u7c7b\u578b\u6307\u7684\u662f\u6709\u6ca1\u6709\u9690\u5f0f\u7c7b\u578b\u8f6c\u6362\u3002 \u6bd4\u5982 Python \u5c31\u662f\u52a8\u6001\u5f3a\u7c7b\u578b\u8bed\u8a00(\u5f88\u591a\u4eba\u8bef\u4ee5\u4e3a\u5f31\u7c7b\u578b)\uff0c\u800c php/js \u662f\u52a8\u6001\u5f31\u7c7b\u578b\u8bed\u8a00\u3002 go \u662f\u9759\u6001\u5f3a\u7c7b\u578b\u8bed\u8a00\uff0c\u6211\u4eec\u5728\u7f16\u5199\u4ee3\u7801\u7684\u65f6\u5019\u9700\u8981\u5148\u58f0\u660e\u53d8\u91cf\u7684\u7c7b\u578b\uff08\u6216\u8005\u7f16\u8bd1\u5668\u63a8\u5bfc\uff09\uff0c \u5728\u4e0d\u540c\u7c7b\u578b\u4e4b\u95f4\u8f6c\u6362\u7684\u65f6\u5019\u9700\u8981\u6211\u4eec\u5f3a\u5236\u4f7f\u7528\u7c7b\u578b\u8f6c\u6362\u7b26\u3002","title":"\u9759\u6001/\u52a8\u6001\u7c7b\u578b\uff0c\u5f31\u7c7b\u578b/\u5f3a\u7c7b\u578b"},{"location":"basics/01_go_basic_types/basic_types/#go_2","text":"go \u4e2d\u58f0\u660e\u4e00\u4e2a\u53d8\u91cf\u5f88\u7b80\u5355\uff0c\u4f7f\u7528 var \u5173\u952e\u5b57\u5c31\u53ef\u4ee5\u4e86\uff0c\u58f0\u660e\u4e4b\u540e\u9ed8\u8ba4\u4f7f\u7528\u5176\u7c7b\u578b\u7684\u96f6\u503c\u521d\u59cb\u5316\u3002 \u6bd4\u5982int \u7c7b\u578b\u9ed8\u8ba4\u662f0\uff0c\u5b57\u7b26\u4e32\u5c31\u662f\u7a7a\u4e32\u3002 \u5f53\u7136\u4e3a\u4e86\u7b80\u5316 go \u8fd8\u63d0\u4f9b\u4e86\u4e00\u79cd\u4f7f\u7528 := \u76f4\u63a5\u58f0\u660e\u5e76\u4e14\u521d\u59cb\u5316\u7684\u65b9\u5f0f\u3002\u8bf7\u7f16\u5199\u5982\u4e0b\u4ee3\u7801\u89c2\u5bdf\u8f93\u51fa(\u6211\u5efa\u8bae\u4f60\u7eaf\u624b\u6572\u7ec3\u7ec3\u624b\u901f\uff0c\u4e0d\u8981\u76f4\u63a5\u590d\u5236)\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 package main import \"fmt\" func main () { var i int64 // \u58f0\u660e\u4e00\u4e2a int64 \u53d8\u91cf\u3002\u6ce8\u610f\u7c7b\u578b\u653e\u5728\u540e\u8fb9\uff0c\u4e60\u60ef\u5c31\u597d\u4e86 var b string // \u58f0\u660e\u4e00\u4e2a\u5b57\u7b26\u4e32 fmt . Println ( \"i is \" , i ) // 0 fmt . Println ( \"b is \" , b ) // \"\" // \u540c\u65f6\u58f0\u660e\u5e76\u4e14\u8d4b\u503c var floatNum float64 = 1.0 var price1 , price2 float64 = 8.8 , 9.6 fmt . Println ( floatNum , price1 , price2 ) // \u8fd8\u6709\u4e00\u79cd\u7b80\u5316\u65b9\u5f0f\uff0c\u58f0\u660e\u5e76\u4e14\u8d4b\u503c\uff0c\u7f16\u8bd1\u5668\u8d1f\u8d23\u63a8\u65ad\u7c7b\u578b ii := 1 s := \"Hello Go!\" fmt . Println ( \"ii is \" , ii ) // 1 fmt . Println ( \"s is \" , s ) // Hello Go!\" }","title":"go \u5982\u4f55\u58f0\u660e\u4e00\u4e2a\u53d8\u91cf"},{"location":"basics/01_go_basic_types/basic_types/#go_3","text":"\u65e0\u8bba\u662f\u5b66\u4e60\u8fc7\u7a0b\u5f0f\u3001\u9762\u5411\u5bf9\u8c61\u8fd8\u662f\u5e76\u53d1\u7f16\u7a0b\uff0c\u6211\u4eec\u90fd\u9700\u8981\u9996\u5148\u5b66\u4e60\u4e00\u95e8\u8bed\u8a00\u7684\u57fa\u7840\u7c7b\u578b\uff0c\u5bf9\u4e8e\u5927\u90e8\u5206\u4e1a\u52a1\u5e38\u7528\u7f16\u7a0b\u8bed\u8a00\u6765\u8bf4\u5c31\u662f\u6570\u503c\u7c7b\u578b\u548c\u5b57\u7b26\u4e32\u7c7b\u578b\u3002","title":"Go \u7684\u57fa\u7840\u7c7b\u578b"},{"location":"basics/01_go_basic_types/basic_types/#bool","text":"bool \u5c31\u662f\u771f\u6216\u8005\u5047\uff0c\u4e00\u4e9b\u7f16\u7a0b\u8bed\u8a00\u4f7f\u7528 0 \u548c\u975e 0 \u8868\u793a\u3002\u4f46\u662f go \u91cc\u6bd4\u5982 if \u8bed\u53e5\u540e\u8fb9\u53ea\u80fd\u662f bool \u503c\u6216\u8005\u8fd4\u56de bool \u503c\u7684\u8868\u8fbe\u5f0f\uff0c\u800c\u4e0d\u50cf c \u4e00\u6837\u53ef\u4ee5\u4f7f\u7528 int \u503c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // \u8ba9\u6211\u4eec\u7f16\u5199\u4e00\u4e9b\u5c0f\u7684 demo \u4ee3\u7801\u6765\u6d4b\u8bd5\u4e00\u4e0b func boolDemo () { var b1 bool b2 := false b3 := true if b1 { fmt . Println ( \"b1 is true\" ) } if b2 { fmt . Println ( \"b2 is true\" ) } if b3 { fmt . Println ( \"b3 is true\" ) } }","title":"bool \u7c7b\u578b"},{"location":"basics/01_go_basic_types/basic_types/#_2","text":"","title":"\u6570\u503c\u7c7b\u578b(\u6574\u578b\u548c\u6d6e\u70b9\u7c7b\u578b)"},{"location":"basics/01_go_basic_types/basic_types/#_3","text":"\u6574\u6570\u7c7b\u578b\u53ef\u4ee5\u8bf4\u662f\u6211\u4eec\u6700\u5e38\u7528\u7684\u4e00\u79cd\u7c7b\u578b\uff0c\u5982\u679c\u4f60\u7528 python \u7684\u8bdd\u975e\u5e38\u7701\u5fc3(Python3 int \u5c31\u662f\u5927\u6570\u7c7b\uff0c\u5185\u5b58\u591f\u7528\u65e0\u9700\u62c5\u5fc3\u6ea2\u51fa)\uff0c\u4f46\u662f go \u91cc\u8fb9\u5374\u6709\u975e\u5e38\u591a\u7684 int \u7c7b\u578b\u3002 \u5bf9\u4e8e\u4e00\u95e8\u8ffd\u6c42\u6027\u80fd\u7684\u8bed\u8a00\u6765\u8bf4\uff0c\u6709\u4e9b\u5730\u65b9\u53ef\u4ee5\u7701\u5185\u5b58\u5c31\u7701\u4e00\u70b9\u3002\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u5c31\u662f\u6bcf\u79cd\u7c7b\u578b\u53d6\u503c\u8303\u56f4\uff0c\u786e\u4fdd\u4e0d\u8981\u8d85\u8303\u56f4\u4e86\u3002\u4e1a\u52a1\u4e2d\u7ecf\u5e38\u4f7f\u7528\u4e5f\u5c31\u662f int64/int32 \u4e86\u3002 \u5f53\u7136\u4f5c\u4e3a\u6574\u6570\uff0c\u4e00\u822c\u5e38\u7528\u7684\u90a3\u5c31\u662f\u52a0\u51cf\u4e58\u9664\u4e4b\u7c7b\u7684\u6570\u5b66\u8fd0\u7b97\u4e86\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // \u540c\u6837\u6211\u4eec\u7f16\u5199\u7b80\u5355\u7684\u6d4b\u8bd5\u4ee3\u7801\u6765\u719f\u6089\u5b83\u4eec\uff0c\u786e\u4fdd\u4f60\u4e0d\u8981\u76f4\u63a5\u590d\u5236\u7c98\u8d34\u3002\u6574\u672c\u7535\u5b50\u4e66\u548c\u4ee3\u7801\u90fd\u662f\u7b14\u8005\u4e00\u4e2a\u5b57\u4e00\u4e2a\u5b57\u6572\u51fa\u6765\u7684 func intDemo () { var i64 int64 i64 = 10 fmt . Println ( i64 + 10 ) i32 := int32 ( 42 ) fmt . Println ( i32 + 10 ) fmt . Println ( math . MaxInt64 , // \u9700\u8981\u5bfc\u5165 math \u5305\uff0c\u89c1\u672c\u7ae0\u793a\u4f8b\u4ee3\u7801 ) a , b := 10 , 0 fmt . Println ( a / b ) // Boom! \u4f1a\u53d1\u751f\u4ec0\u4e48\u3002\u9519\u8bef\u5904\u7406\u6211\u4eec\u540e\u6587\u4ecb\u7ecd } func main () { intDemo () // \u867d\u7136\u8fd8\u6ca1\u8bb2\u5230 \u51fd\u6570\uff0c\u4e0d\u8fc7\u76f8\u4fe1\u4f60\u4e5f\u77e5\u9053\u5982\u4f55\u8c03\u7528\u4e86 }","title":"\u6574\u6570\u7c7b\u578b"},{"location":"basics/01_go_basic_types/basic_types/#_4","text":"\u63a5\u4e0b\u6765\u662f\u6d6e\u70b9\u6570\uff0c\u5f88\u591a\u573a\u666f\u6211\u4eec\u8ba1\u7b97\u7684\u65f6\u5019\u90fd\u9700\u8981\u6709\u5c0f\u6570\u70b9\uff0cgo \u91cc\u6709\u4e24\u79cd\u7c7b\u578b\u7684\u6d6e\u70b9\u6570\u3002 math \u5305\u91cc\u5f88\u591a\u51fd\u6570\u4ee5 float64 \u4f5c\u4e3a\u53c2\u6570\uff0c\u4f60\u53ef\u4ee5\u63d0\u524d\u770b\u4e00\u4e0b go \u6587\u6863\u770b\u770b\u63d0\u4f9b\u4e86\u54ea\u4e9b\u51fd\u6570\u3002 \u6d6e\u70b9\u6570\u540c\u6837\u4e5f\u662f\u5e38\u89c1\u7684\u52a0\u51cf\u4e58\u9664\uff0c\u8fd9\u91cc\u8bf7\u5927\u5bb6\u81ea\u5df1\u7f16\u5199\u4e00\u4e9b\u4ee3\u7801\u6765\u7ec3\u4e60\uff0c\u7b14\u8005\u4e0d\u518d\u8d58\u8ff0\u3002","title":"\u6d6e\u70b9\u6570\u7c7b\u578b"},{"location":"basics/01_go_basic_types/basic_types/#_5","text":"\u6ce8\u610f\u4e0d\u540c\u6570\u503c\u7c7b\u578b\u4e4b\u95f4\u8f6c\u6362(\u5927\u8f6c\u5c0f)\u53ef\u80fd\u6709\u622a\u65ad\uff0c\u6bd4\u5982\u4e00\u4e2a int64 \u8f6c\u6210 int32 \u7c7b\u578b\u7684\u6570\u5b57 \u53ef\u4ee5\u4f7f\u7528 int(float) \u8f6c\u6362\u4e00\u4e2a \u6d6e\u70b9\u6570\u5230\u6574\u6570\uff0c\u5c0f\u6570\u90e8\u5206\u4f1a\u4e22\u5f03\u3002\u4f46\u662f\u5982\u679c\u6d6e\u70b9\u6570\u7684\u503c\u8d85\u8fc7\u4e86\u6574\u6570\u7c7b\u578b\u8303\u56f4\uff0c\u7ed3\u679c\u662f\u4e0d\u53ef\u9884\u671f\u7684 \u6ce8\u610f\u8ba1\u7b97\u673a\u4f7f\u7528\u4e8c\u8fdb\u5236\u4e0d\u80fd\u7cbe\u786e\u8868\u793a float \u6570\u5b57\uff0c\u5f53\u6bd4\u8f83\u4e24\u4e2a\u6d6e\u70b9\u6570\u65f6\u4f60\u8981\u683c\u5916\u5c0f\u5fc3\u4e0d\u80fd\u7528\u7b49\u53f7\u76f4\u63a5\u6bd4\u8f83\u3002(\u901a\u5e38\u4f5c\u5dee\u7edd\u5bf9\u503c\u5c0f\u4e8e\u4e00\u4e2a\u5f88\u5c0f\u7684\u9608\u503c) \u4e1a\u52a1\u4e2d\u7ecf\u5e38\u4f7f\u7528 float64\uff0c\u56e0\u4e3a math \u51fd\u6570\u5f88\u591a\u63a5\u53d7 float64 \u4f5c\u4e3a\u53c2\u6570 \u4f60\u53ef\u4ee5\u901a\u8fc7 math.MaxInt32 \u7c7b\u4f3c\u7684\u5b9a\u4e49\u67e5\u770b\u4e00\u4e2a\u7c7b\u578b\u7684\u6700\u5927\u503c","title":"\u6570\u503c\u8f6c\u6362\u5c0f\u63d0\u793a"},{"location":"basics/01_go_basic_types/basic_types/#_6","text":"\u590d\u6570\u5728\u5e38\u89c1\u4e1a\u52a1\u4ee3\u7801\u4e2d\u4f7f\u7528\u6bd4\u8f83\u5c11\uff0c\u8fd9\u91cc\u5c31\u7565\u8fc7\u4e86\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528 complex() \u6765\u521b\u5efa\u590d\u6570\u3002","title":"\u590d\u6570\u7c7b\u578b"},{"location":"basics/01_go_basic_types/basic_types/#_7","text":"\u67d0\u4e9b\u573a\u666f\u4e0b\uff0c \u5982\u679c64\u4f4d\u4f9d\u7136\u6ee1\u8db3\u4e0d\u4e86\u4f60\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u5927\u6574\u6570 big.Int \u548c \u6709\u7406\u6570 big.Rat \u7c7b\u578b\u3002","title":"\u5ef6\u4f38(\u5927\u6574\u6570\u8fd0\u7b97)"},{"location":"basics/01_go_basic_types/basic_types/#_8","text":"\u4e1a\u52a1\u4e2d\u53e6\u4e00\u4e2a\u6700\u5e38\u7528\u7684\u5c31\u662f\u5b57\u7b26\u4e32(string)\u4e86\uff0cweb \u5f00\u53d1\u51e0\u4e4e\u5929\u5929\u5c31\u662f\u548c\u5b57\u7b26\u4e32\u6253\u4ea4\u9053\u3002Go\u7684\u5b57\u7b26\u4e32\u662f\u4f7f\u7528 UTF-8 \u7f16\u7801\u7684\u5b57\u7b26\u5e8f\u5217\uff0c\u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u4f7f\u7528\u4efb\u610f\u56fd\u5bb6\u7684\u8bed\u8a00\u3002 Go \u4e2d\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u53cc\u5f15\u53f7(\")\u548c\u53cd\u5f15\u53f7(`)\u6765\u521b\u5efa\u5b57\u7b26\u4e32\uff0c\u533a\u522b\u53cd\u5f15\u53f7\u4f1a\u5ffd\u7565\u8f6c\u4e49\u7b26\uff0c\u5e76\u4e14\u53ef\u4ee5\u521b\u5efa\u591a\u884c\u5b57\u7b26\u4e32\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 func stringDemo () { // \u5982\u679c\u5b57\u7b26\u4e32\u672c\u8eab\u4e5f\u6709\u53cc\u5f15\u53f7\uff0c\u5c31\u9700\u8981\u628a\u91cc\u8fb9\u7684\u53cc\u5f15\u53f7\u4f7f\u7528 \\ \u8f6c\u4e49 s1 := \"\\\"Hello Go\\\"\" // \u4f7f\u7528\u53cd\u659c\u7ebf\u5c31\u53ef\u4ee5\u76f4\u63a5\u5305\u542b\u53cc\u5f15\u53f7\u4e86 s2 := `\"Hello Go\"` fmt . Println ( s1 ) // \u6253\u5370\u51fa \"Hello Go\" fmt . Println ( s2 ) // \u6253\u5370\u51fa \"Hello Go\" s3 := ` \u4f60\u597d ` s4 := \"Golang !\" fmt . Println ( s3 + s4 ) } \u5b57\u7b26\u4e32\u652f\u6301\u5982\u4e0b\u64cd\u4f5c\uff1a","title":"\u5b57\u7b26\u4e32"},{"location":"basics/01_go_basic_types/basic_types/#_9","text":"\u5728 Python \u91cc\u8fdb\u884c\u8fd9\u79cd\u8f6c\u6362\u662f\u4e00\u4ef6\u5f88\u5bb9\u6613\u7684\u4e8b\u60c5\uff0c\u4f46\u662f go \u91cc\u8fb9\u53ef\u4e0d\u65b9\u4fbf\u3002\u6211\u5217\u51fa\u6765\u4ee5\u4e0b\u4ee3\u7801\u4f60\u5c31\u77e5\u9053\u5566\uff1a \u6ce8\u610f\u8fd9\u91cc\u7684 Atoi \u662f Ascii to Integer \u7684\u7f29\u5199\uff0c\u89c6\u9891\u91cc\u6709\u4e2a\u53e3\u8bef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 func testConvert () { // \u6d4b\u8bd5 int \u548c string(decimal) \u4e92\u76f8\u8f6c\u6362\u7684\u51fd\u6570 // https://yourbasic.org/golang/convert-int-to-string/ // int -> string sint := strconv . Itoa ( 97 ) fmt . Println ( sint , sint == \"97\" ) // byte -> string bytea := byte ( 1 ) bint := strconv . Itoa ( int ( bytea )) fmt . Println ( bint ) // int64 -> string sint64 := strconv . FormatInt ( int64 ( 97 ), 10 ) fmt . Println ( sint64 , sint64 == \"97\" ) // int64 -> string (hex) \uff0c\u5341\u516d\u8fdb\u5236 sint64hex := strconv . FormatInt ( int64 ( 97 ), 16 ) fmt . Println ( sint64hex , sint64hex == \"61\" ) // string -> int _int , _ := strconv . Atoi ( \"97\" ) fmt . Println ( _int , _int == int ( 97 )) // string -> int64 _int64 , _ := strconv . ParseInt ( \"97\" , 10 , 64 ) fmt . Println ( _int64 , _int64 == int64 ( 97 )) // https://stackoverflow.com/questions/30299649/parse-string-to-specific-type-of-int-int8-int16-int32-int64 // string -> int32\uff0c\u6ce8\u610f parseInt \u59cb\u7ec8\u8fd4\u56de\u7684\u662f int64\uff0c\u6240\u4ee5\u8fd8\u662f\u9700\u8981 int32(n) \u5f3a\u8f6c\u4e00\u4e0b _int32 , _ := strconv . ParseInt ( \"97\" , 10 , 32 ) fmt . Println ( _int32 , int32 ( _int32 ) == int32 ( 97 )) // int32 -> string, https://stackoverflow.com/questions/39442167/convert-int32-to-string-in-golang i := 42 strconv . FormatInt ( int64 ( i ), 10 ) // fast strconv . Itoa ( int ( i )) // fast fmt . Sprint ( i ) // slow // int -> int64 \uff0c\u4e0d\u4f1a\u4e22\u5931\u7cbe\u5ea6 var n int = 97 fmt . Println ( int64 ( n ) == int64 ( 97 )) // string -> float32/float64 https://yourbasic.org/golang/convert-string-to-float/ f := \"3.14159265\" if s , err := strconv . ParseFloat ( f , 32 ); err == nil { fmt . Println ( s ) // 3.1415927410125732 } if s , err := strconv . ParseFloat ( f , 64 ); err == nil { fmt . Println ( s ) // 3.14159265 } }","title":"\u5b57\u7b26\u4e32\u548c\u6570\u503c\u7c7b\u578b\u7684\u8f6c\u6362"},{"location":"basics/01_go_basic_types/basic_types/#_10","text":"\u5e38\u91cf\u987e\u540d\u601d\u4e49\u4f60\u6ca1\u6cd5\u6539\u53d8\u5b83\uff0c\u5728\u4e00\u4e9b\u5168\u5c40\u53d8\u91cf\u4e2d\u4f7f\u7528 const \u4f1a\u66f4\u52a0\u5b89\u5168\u3002\u5e38\u91cf\u8868\u8fbe\u5f0f\u662f\u5728\u7f16\u8bd1\u671f\u8ba1\u7b97\u3002 \u5bf9\u4e8e\u4e00\u4e9b\u88ab\u6574\u4e2a\u6a21\u5757\u6216\u8005\u5176\u4ed6\u6a21\u5757\u4f7f\u7528\u7684\u53d8\u91cf\u6765\u8bf4\uff0c\u6700\u597d\u5b9a\u4e49\u6210 const \u9632\u6b62\u88ab\u610f\u5916\u4fee\u6539\u3002 \u6bd4\u5982\u6211\u4eec\u4f1a\u7ecf\u5e38\u5728\u4e00\u4e9b\u6587\u4ef6\u5f00\u5934\u770b\u5230\u7c7b\u4f3c const \u5b9a\u4e49\uff1a 1 2 3 4 5 6 7 8 9 const ( Sunday = 0 Monday = 1 Tuesday = 2 Wednesday = 3 Thursday = 4 Friday = 5 Saturday = 6 )","title":"\u5e38\u91cf\u548c\u53d8\u91cf"},{"location":"basics/01_go_basic_types/basic_types/#_11","text":"\u5bf9\u4e8e\u4e0a\u8ff0\u8fd9\u79cd\u9012\u589e\u573a\u666f\uff0cgo \u8fd8\u63d0\u4f9b\u4e86\u4e00\u79cd\u66f4\u52a0\u7b80\u6d01\u7684\u65b9\u5f0f\u6765\u5b9a\u4e49\uff0c\u4f7f\u7528 iota \u8868\u8fbe\u5f0f\uff0c\u5b83\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u5b8c\u6210\u81ea\u589e\u64cd\u4f5c(\u53ea\u6709\u8fd9\u79cd\u5e38\u89c1\u624d\u63a8\u8350\u53bb\u4f7f\u7528 iota) 1 2 3 4 5 6 7 8 9 const ( Sunday = iota Monday Tuesday Wednesday Thursday Friday Saturday ) \u4f60\u53ef\u4ee5\u7f16\u5199\u4ee3\u7801\u6253\u5370\u4e00\u4e0b\u770b\u770b\u5269\u4e0b\u7684\u503c\u662f\u591a\u5c11\uff1f","title":"\u679a\u4e3e"},{"location":"basics/01_go_basic_types/basic_types/#_12","text":"\u4e3a\u4ec0\u4e48\u6709 int \u8fd8\u9700\u8981 int32 \u548c int64\uff0c\u4e1a\u52a1\u4ee3\u7801\u91cc\u5982\u4f55\u9009\u62e9\u5462\uff1f \u8bf7\u4f60\u5c1d\u8bd5\u6253\u5370\u6bcf\u79cd int \u7c7b\u578b\u7684\u6570\u503c\u8303\u56f4\uff1f","title":"\u5c0f\u95ee\u9898\uff1a"},{"location":"basics/01_go_basic_types/basic_types/#_13","text":"\u90e8\u5206\u56fe\u7247\u6765\u81ea\u300aGo \u8bed\u8a00\u7a0b\u5e8f\u8bbe\u8ba1\u300b Ultimate Visual Guide to Go Enums and iota","title":"\u53c2\u8003\uff1a"},{"location":"basics/02_go_array_and_slice/array_and_slice/","text":"\u5b66\u4e60\u548c\u4f7f\u7528 Go \u6570\u7ec4\u548c\u5207\u7247 \u00b6 Quote [Go] really fells like \u201cthe C for the 21st century\u201d \u2013 Petr Ho\u0161ek Go \u6570\u7ec4(array)\u548c\u5207\u7247(slice) \u00b6 \u6570\u7ec4\u662f\u6211\u4eec\u6700\u5e38\u7528\u7684\u7ebf\u6027\u7ed3\u6784\uff0c\u6bd4\u5982\u5728 python \u4e2d\u6211\u4eec\u6700\u5e38\u4f7f\u7528\u7684\u662f list\u3002\u5728 Go \u4e2d\u63d0\u4f9b\u4e86\u4e24\u79cd\u5e38\u89c1\u7684\u7ebf\u6027\u7ed3\u6784\uff1a\u6570\u7ec4(array)\u548c\u5207\u7247(slice)\u3002\u6570\u7ec4\u5c31\u662f\u56fa\u5b9a\u957f\u5ea6\u7684\u67d0\u79cd\u7c7b\u578b\u7684\u5e8f\u5217\uff0c\u800c\u5207\u7247\u66f4\u52a0\u7075\u6d3b\uff0c\u5b83\u7684\u957f\u5ea6\u662f\u53ef\u4ee5\u53d8\u5316\u7684\uff0c \u6240\u4ee5\u5728\u4e1a\u52a1\u4e2d\u6211\u4eec\u6700\u7ecf\u5e38\u4f7f\u7528\u7684\u5176\u5b9e\u8fd8\u662f\u5207\u7247\u3002 \u6570\u7ec4 \u00b6 \u6570\u7ec4\u662f\u4e00\u4e2a\u5305\u542b\u76f8\u540c\u7c7b\u578b\u7684\u56fa\u5b9a\u957f\u5ea6\u7684\u5e8f\u5217\uff0c\u4e0d\u50cf\u52a8\u6001\u8bed\u8a00\u90a3\u6837\u53ef\u4ee5\u5728 list \u4e2d\u5b58\u50a8\u4e0d\u540c\u7c7b\u578b\u7684\u503c\uff0cgo \u8bed\u8a00\u4e2d\u6570\u7ec4\u4e2d\u7684\u7c7b\u578b\u9700\u8981\u4e00\u81f4\u3002 \u6211\u4eec\u6765\u770b\u4e00\u4e0b\u5982\u4f55\u521b\u5efa\u4e00\u4e2a\u6570\u7ec4\uff0c\u6709\u8fd9\u4e48\u51e0\u79cd\u5f62\u5f0f\uff0c\u6ce8\u610f\u957f\u5ea6\u4e5f\u662f\u6570\u7ec4\u7684\u4e00\u90e8\u5206\uff08\u4e0d\u540c\u957f\u5ea6\u7684\u6570\u7ec4\u4e0d\u662f\u4e00\u79cd\u7c7b\u578b\uff09: 1 2 3 4 \u58f0\u660e: [ length ] Type \u521d\u59cb\u5316\uff1a [ N ] Type { value1, value2,..., valueN } \u7701\u7565\u957f\u5ea6\uff1a [ ... ] Type { value1, value2,..., valueN } \u4e8c\u7ef4\u6570\u7ec4: [ N ][ M ] Type \u6211\u4eec\u6765\u51e0\u4e2a\u5c0f\u4f8b\u5b50\uff0c\u4e0d\u8981\u5149\u770b\u4ee3\u7801\uff0c\u6253\u5f00\u4f60\u7684\u5f00\u53d1\u5de5\u5177\u6765\u7f16\u8f91\u4ee5\u4e0b\u4ee3\u7801\u5427\uff0c\u53c8\u662f\u4e00\u4e2a\u7ec3\u4e60\u624b\u611f\u7684\u597d\u673a\u4f1a: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 package main import \"fmt\" func testArray () { // \u58f0\u660e\u4e00\u4e2a int64\u6570\u7ec4\uff0c\u58f0\u660e\u4e4b\u540e\u6bcf\u4e2a\u5143\u7d20\u662f\u8be5\u7c7b\u578b\u9ed8\u8ba4\u7684\u300e\u96f6\u503c\u300f var arrayIn64 [ 3 ] int64 arrayIn64 [ 0 ], arrayIn64 [ 1 ] = 1 , 2 fmt . Println ( arrayIn64 ) // \u58f0\u660e\u5e76\u4e14\u521d\u59cb\u5316 arrayString := [ 3 ] string { \"zhang\" , \"wang\" , \"li\" } fmt . Println ( arrayString ) // \u4e5f\u53ef\u4ee5\u7701\u7565\u957f\u5ea6\uff0c\u8ba9 go \u81ea\u52a8\u8ba1\u7b97\u3002\u8fd9\u4e2a\u65f6\u5019\u4f60\u9700\u8981\u662f\u4f7f\u7528\u7701\u7565\u53f7 ... // \u521b\u5efa\u4e00\u4e2a\u957f\u5ea6\u4e3a 3 \u7684 float64 \u6570\u7ec4 arrayFloat := [ ... ] float64 { 1.5 , 8.8 , 6.6 } fmt . Println ( arrayFloat ) // \u4e8c\u7ef4\u6570\u7ec4 matrix := [ 2 ][ 2 ] int64 { { 0 , 1 }, { 2 , 3 }, } fmt . Println ( matrix ) } func main () { testArray () } \u4e00\u822c\u5bf9\u4e8e\u6570\u7ec4\u7684\u64cd\u4f5c\u4e5f\u5c31\u662f\u83b7\u53d6\u957f\u5ea6(len\u51fd\u6570\uff0c0\u5230n-1)\uff0c\u83b7\u53d6\u6307\u5b9a\u4e0b\u6807\u7684\u5143\u7d20([index])\uff0c\u7ed9\u6570\u7ec4\u7b2c i \u4e2a\u5143\u7d20\u8d4b\u503c\u7b49\u3002 1 2 3 4 5 6 7 func testArrayOperation () { names := [ 4 ] string { \"zhang\" , \"wang\" , \"li\" , \"zhao\" } fmt . Printf ( \"names has %d elements\\n\" , len ( names )) fmt . Println ( names [ 1 ]) // NOTE: \u6ce8\u610f\u5982\u679c\u4e0b\u6807\u8d85\u8fc7\u8303\u56f4\u4f1a panic names [ 3 ] = \"lao zhao\" fmt . Println ( names [ 3 ]) } \u6570\u7ec4\u7684\u793a\u4f8b\u5c31\u5230\u8fd9\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u770b\u4e0b\u5207\u7247(slice)\uff0c\u5176\u5b9e\u5728\u4e1a\u52a1\u5f00\u53d1\u4e2d\u5207\u7247\u8981\u8fdc\u6bd4\u6570\u7ec4\u66f4\u52a0\u5e38\u7528\u4e5f\u66f4\u52a0\u7075\u6d3b\uff0c\u751a\u81f3\u53ef\u80fd\u4f60\u90fd\u4e0d\u4f1a\u7528\u5230\u6570\u7ec4\uff0c \u800c\u662f\u4e00\u76f4\u4f7f\u7528\u5207\u7247\u6765\u4ee3\u66ff\u3002 \u5207\u7247(slice) \u00b6 \u5207\u7247\u6bd4\u6570\u7ec4\u66f4\u52a0\u7075\u6d3b\uff0c\u957f\u5ea6\u662f\u53ef\u4ee5\u53d8\u5316\u7684\u3002\u4f60\u53ef\u80fd\u4f1a\u597d\u5947\u5b83\u548c\u6570\u7ec4\u7684\u533a\u522b\u4ee5\u53ca\u5e95\u5c42\u5b9e\u73b0\u3002\u5b9e\u9645\u4e0a\u5b83\u548c python \u7684 list \u6bd4\u8f83\u7c7b\u4f3c\uff0c\u53ef\u4ee5\u81ea\u52a8\u6269\u5bb9\u3002\u4f60\u53ef\u4ee5\u7b80\u5355\u5730\u7406\u89e3\u4e3a\u5207\u7247\u662f\u4e00\u4e2a\u6307\u5411\u6570\u7ec4\u7684\u6307\u9488\uff0c\u8fd9\u4e2a\u6570\u7ec4\u6709\u5b83\u7684\u603b\u5bb9\u91cf(capacity)\uff0c\u548c\u76ee\u524d\u4f7f\u7528\u4f7f\u7528\u7684\u957f\u5ea6(length)\u3002 \u521b\u5efa\u4e00\u4e2a\u5207\u7247\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6784\u9020\u65b9\u5f0f\u6216\u8005\u5185\u7f6e\u7684 make \u51fd\u6570\u3002 1 2 3 4 5 6 7 8 // \u521b\u5efa\u4e00\u4e2a\u7c7b\u578b\u4e3a Type, \u957f\u5ea6\u4e3a length, \u5bb9\u91cf\u4e3a capacity \u7684 slice\u3002\u4e00\u822c\u6211\u4eec\u4e0d\u592a\u5173\u5fc3\u5bb9\u91cf\u800c\u662f\u5173\u5fc3\u957f\u5ea6 make([]Type, length, c capacity) // \u521b\u5efa\u4e00\u4e2a\u7c7b\u578b\u4e3a Type, \u957f\u5ea6\u4e3a length \u7684 slice\uff0c\u4e00\u822c\u6211\u4eec\u4e0d\u592a\u5173\u5fc3\u5bb9\u91cf\uff0c\u800c\u662f\u8ba9 go \u5e2e\u6211\u4eec\u81ea\u52a8\u5904\u7406\u6269\u5bb9\u95ee\u9898 make([]Type, length) // \u6700\u5e38\u7528\u7684\u4e00\u79cd\u65b9\u5f0f, \u5982\u679c\u5b9e\u73b0\u77e5\u9053 slice \u7684\u957f\u5ea6\uff0c\u53ef\u4ee5\u907f\u514d slice \u6269\u5bb9\u64cd\u4f5c\uff0c\u6027\u80fd\u66f4\u597d // \u521b\u5efa\u4e00\u4e2a Type \u7c7b\u578b slice []Type{} // \u548c make([]Type, 0) \u7b49\u4ef7 // \u521b\u5efa\u5e76\u4e14\u521d\u59cb\u5316\u4e00\u4e2a slice\u3002\u6ce8\u610f\u548c\u6570\u7ec4\u7684\u533a\u522b\u662f [] \u91cc\u8fb9\u6ca1\u6709\u7701\u7565\u53f7 ... []Type{value1, value2, ... , valueN} \u4ee5\u4e0b\u662f slice \u7684\u5e38\u89c1\u64cd\u4f5c\uff0c\u5f88\u591a\u548c\u6570\u7ec4\u6bd4\u8f83\u7c7b\u4f3c\uff1a \u540c\u6837\u7f16\u5199\u4e00\u4e9b\u793a\u4f8b\u4ee3\u7801\u6765\u5feb\u901f\u5b66\u4e60\u5b83\uff0c\u8fd9\u91cc\u5c06\u4f7f\u7528\u7b14\u8005\u4e1a\u52a1\u4e2d\u6700\u5e38\u7528\u7684\u4e00\u4e9b\u65b9\u5f0f: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 func testSlice () { // \u521b\u5efa\u5e76\u4e14\u521d\u59cb\u5316\u4e00\u4e2a slice names := [] string { \"zhang\" , \"wang\" , \"li\" , \"zhao\" } // \u6253\u5370 names, \u957f\u5ea6\u548c\u5bb9\u91cf fmt . Println ( names , len ( names ), cap ( names )) names2 := names [ 0 : 3 ] // \u83b7\u53d6\u5b50\u5207\u7247 0,1,2 \u4e09\u4e2a\u5143\u7d20\uff0c\u6ce8\u610f\u5de6\u95ed\u53f3\u5f00\u533a\u95f4 fmt . Println ( names2 ) // \u5c1d\u8bd5\u4fee\u6539\u4e00\u4e0b names2 \uff0c\u6ce8\u610f names \u4e5f\u4f1a\u8ddf\u7740\u6539\u53d8\u4e48\uff1f names [ 0 ] = \"lao zhang\" fmt . Println ( names , names2 ) // \u4f60\u4f1a\u53d1\u73b0names\u4e5f\u53d8\u4e86\uff0c\u8fd9\u91cc\u8d77\u59cb\u5b83\u4eec\u5171\u7528\u4e86\u5e95\u5c42\u7ed3\u6784\uff0c\u6ce8\u610f\u8fd9\u4e2a\u95ee\u9898 // \u904d\u5386\u4e00\u4e2a slice \u6211\u4eec\u4f7f\u7528 for/range \u8bed\u6cd5 for idx , name := range names { // \u5982\u679c\u6ca1\u6709\u7528\u5230\u4e0b\u6807 idx\uff0c\u53ef\u4ee5\u5199\u6210\u4e0b\u5212\u7ebf _ \u4f5c\u4e3a\u5360\u4f4d\u7b26\uff0c\u4f46\u662f\u4e0d\u80fd\u7701\u7565 fmt . Println ( idx , name ) } // \u4fee\u6539\u5207\u7247\u4e3b\u8981\u901a\u8fc7\u8d4b\u503c\u548c append \u64cd\u4f5c\u3002\u4f7f\u7528 append \u4fee\u6539\u5207\u7247 vals := make ([] int , 0 ) for i := 0 ; i < 3 ; i ++ { vals = append ( vals , i ) } fmt . Println ( vals ) vals2 := [] int { 3 , 4 , 5 } newVals := append ( vals , vals2 ... ) // \u53ef\u4ee5\u4f7f\u7528\u7701\u7565\u53f7\u7684\u65b9\u5f0f\u300e\u89e3\u5305\u300f\u4e00\u4e2a slice \u6765\u8fde\u63a5\u4e24\u4e2a slice fmt . Println ( newVals ) } Tip \u5982\u679c\u5728\u521b\u5efa\u4e00\u4e2a slice \u4e4b\u524d\u9884\u5148\u77e5\u9053\u4e86\u5b83\u7684\u957f\u5ea6\uff0cmake \u51fd\u6570\u6700\u597d\u4f20\u9012\u957f\u5ea6\u8fdb\u53bb\uff0c\u9632\u6b62 append \u64cd\u4f5c\u53ef\u80fd\u5bfc\u81f4\u91cd\u65b0\u5206\u914d\u5185\u5b58\u964d\u4f4e\u6548\u7387\u3002 \u6bd4\u5982\u4e0b\u8fb9\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u4f7f\u7528\u7b2c\u4e8c\u79cd\u65b9\u5f0f\u6548\u7387\u66f4\u9ad8\u4e00\u4e9b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 package main import \"fmt\" func main () { manyInts := make ([] int , 1000000 ) // bad way a := make ([] int , 0 ) for _ , val := range manyInts { a = append ( a , val + val ) // \u6269\u5bb9 a \u4f1a\u5bfc\u81f4\u91cd\u65b0\u5206\u914d\u5185\u5b58 } fmt . Println ( a ) // good way b := make ([] int , len ( manyInts )) for i , val := range manyInts { b [ i ] = val + val // \u6ce8\u610f\u8fd9\u91cc\u662f\u8d4b\u503c\u4e86\uff0c\u4e0d\u662f append } fmt . Println ( b ) } \u5982\u4f55\u7ed9\u4e00\u4e2a\u5207\u7247\u6392\u5e8f\uff1f \u00b6 \u5207\u7247\u64cd\u4f5c\u548c python list \u6bd4\u8f83\u7c7b\u4f3c\uff0c\u4f46\u662f\u4e5f\u8981\u6ce8\u610f\u4e00\u4e9b\u533a\u522b\u3002\u6bd4\u5982\u5b50\u5207\u7247\u548c\u539f\u5207\u7247\u5171\u4eab\u5e95\u5c42\u7ed3\u6784\uff0c\u5982\u679c\u9700\u8981\u6df1\u62f7\u8d1d\u4f60\u5f97\u81ea\u5df1\u53bb\u590d\u5236\u4e00\u4e2a\u65b0\u7684\u3002 \u53e6\u5916 go \u53ea\u652f\u6301\u6b63\u6570\u7684\u7d22\u5f15\uff0c\u4f60\u9700\u8981\u4fdd\u8bc1 slice \u7d22\u5f15\u503c\u5fc5\u987b\u8981\u5728 0 \u5230 length-1\uff0c\u5426\u5219\u4f1a\u51fa\u73b0 panic \u5bfc\u81f4\u7a0b\u5e8f\u9000\u51fa\u3002 \u8fd9\u91cc\u4ecb\u7ecd\u4e00\u4e0b\u5982\u4f55\u6765\u6392\u5e8f\u548c\u641c\u7d22\u4e00\u4e2a slice\uff0c\u9664\u4e86\u81ea\u5df1\u5199\u6392\u5e8f\u7b97\u6cd5\u4e4b\u5916\uff0c\u6807\u51c6\u5e93\u63d0\u4f9b\u4e86 sort \u5305\u6765\u5e2e\u52a9\u6211\u4eec\u5904\u7406\u6392\u5e8f\u95ee\u9898\u3002 \u5e38\u7528\u7684\u6709\u51e0\u4e2a\u51fd\u6570\uff0cgo \u6807\u51c6\u5e93\u6587\u6863\u5df2\u7ecf\u6709\u975e\u5e38\u597d\u7684\u793a\u4f8b\uff08\u597d\u597d\u5b66\u82f1\u8bed\u554a\uff09\uff1a 1 2 3 sort . Ints ( a [] int ) // Ints sorts a slice of ints in increasing order. sort . Float64s ( a [] float64 ) // Float64s sorts a slice of float64s in increasing order (not-a-number values are treated as less than other values). sort . Search ( n int , f func ( int ) bool ) int // Search uses binary search to find and return the smallest index i in [0, n) at which f(i) is true \u5c0f\u7ec3\u4e60 \u00b6 \u8bf7\u7ed9\u4e00\u4e2a slice \u53cd\u5411\u6392\u5e8f\uff1f\u4e0d\u77e5\u9053\u7684\u8bdd\u8bf7\u641c\u7d22 go \u7684 sort \u6587\u6863 \u4ec0\u4e48\u60c5\u51b5\u4e0b\u6211\u4eec\u8981\u53bb\u5173\u5fc3 slice \u7684\u5bb9\u91cf\u5462\uff1fappend \u4e4b\u540e\u5b83\u7684\u5bb9\u91cf\u5982\u4f55\u53d8\u5316\u5462\uff1f sort \u5305\u91cc\u7684\u7a33\u5b9a\u6392\u5e8f\u548c\u975e\u7a33\u5b9a\u6392\u5e8f\u6709\u4ec0\u4e48\u533a\u522b\uff1f \u53c2\u8003 \u00b6 Slice Tricks","title":"Go \u6570\u7ec4\u548c\u5207\u7247"},{"location":"basics/02_go_array_and_slice/array_and_slice/#go","text":"Quote [Go] really fells like \u201cthe C for the 21st century\u201d \u2013 Petr Ho\u0161ek","title":"\u5b66\u4e60\u548c\u4f7f\u7528 Go \u6570\u7ec4\u548c\u5207\u7247"},{"location":"basics/02_go_array_and_slice/array_and_slice/#go-arrayslice","text":"\u6570\u7ec4\u662f\u6211\u4eec\u6700\u5e38\u7528\u7684\u7ebf\u6027\u7ed3\u6784\uff0c\u6bd4\u5982\u5728 python \u4e2d\u6211\u4eec\u6700\u5e38\u4f7f\u7528\u7684\u662f list\u3002\u5728 Go \u4e2d\u63d0\u4f9b\u4e86\u4e24\u79cd\u5e38\u89c1\u7684\u7ebf\u6027\u7ed3\u6784\uff1a\u6570\u7ec4(array)\u548c\u5207\u7247(slice)\u3002\u6570\u7ec4\u5c31\u662f\u56fa\u5b9a\u957f\u5ea6\u7684\u67d0\u79cd\u7c7b\u578b\u7684\u5e8f\u5217\uff0c\u800c\u5207\u7247\u66f4\u52a0\u7075\u6d3b\uff0c\u5b83\u7684\u957f\u5ea6\u662f\u53ef\u4ee5\u53d8\u5316\u7684\uff0c \u6240\u4ee5\u5728\u4e1a\u52a1\u4e2d\u6211\u4eec\u6700\u7ecf\u5e38\u4f7f\u7528\u7684\u5176\u5b9e\u8fd8\u662f\u5207\u7247\u3002","title":"Go \u6570\u7ec4(array)\u548c\u5207\u7247(slice)"},{"location":"basics/02_go_array_and_slice/array_and_slice/#_1","text":"\u6570\u7ec4\u662f\u4e00\u4e2a\u5305\u542b\u76f8\u540c\u7c7b\u578b\u7684\u56fa\u5b9a\u957f\u5ea6\u7684\u5e8f\u5217\uff0c\u4e0d\u50cf\u52a8\u6001\u8bed\u8a00\u90a3\u6837\u53ef\u4ee5\u5728 list \u4e2d\u5b58\u50a8\u4e0d\u540c\u7c7b\u578b\u7684\u503c\uff0cgo \u8bed\u8a00\u4e2d\u6570\u7ec4\u4e2d\u7684\u7c7b\u578b\u9700\u8981\u4e00\u81f4\u3002 \u6211\u4eec\u6765\u770b\u4e00\u4e0b\u5982\u4f55\u521b\u5efa\u4e00\u4e2a\u6570\u7ec4\uff0c\u6709\u8fd9\u4e48\u51e0\u79cd\u5f62\u5f0f\uff0c\u6ce8\u610f\u957f\u5ea6\u4e5f\u662f\u6570\u7ec4\u7684\u4e00\u90e8\u5206\uff08\u4e0d\u540c\u957f\u5ea6\u7684\u6570\u7ec4\u4e0d\u662f\u4e00\u79cd\u7c7b\u578b\uff09: 1 2 3 4 \u58f0\u660e: [ length ] Type \u521d\u59cb\u5316\uff1a [ N ] Type { value1, value2,..., valueN } \u7701\u7565\u957f\u5ea6\uff1a [ ... ] Type { value1, value2,..., valueN } \u4e8c\u7ef4\u6570\u7ec4: [ N ][ M ] Type \u6211\u4eec\u6765\u51e0\u4e2a\u5c0f\u4f8b\u5b50\uff0c\u4e0d\u8981\u5149\u770b\u4ee3\u7801\uff0c\u6253\u5f00\u4f60\u7684\u5f00\u53d1\u5de5\u5177\u6765\u7f16\u8f91\u4ee5\u4e0b\u4ee3\u7801\u5427\uff0c\u53c8\u662f\u4e00\u4e2a\u7ec3\u4e60\u624b\u611f\u7684\u597d\u673a\u4f1a: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 package main import \"fmt\" func testArray () { // \u58f0\u660e\u4e00\u4e2a int64\u6570\u7ec4\uff0c\u58f0\u660e\u4e4b\u540e\u6bcf\u4e2a\u5143\u7d20\u662f\u8be5\u7c7b\u578b\u9ed8\u8ba4\u7684\u300e\u96f6\u503c\u300f var arrayIn64 [ 3 ] int64 arrayIn64 [ 0 ], arrayIn64 [ 1 ] = 1 , 2 fmt . Println ( arrayIn64 ) // \u58f0\u660e\u5e76\u4e14\u521d\u59cb\u5316 arrayString := [ 3 ] string { \"zhang\" , \"wang\" , \"li\" } fmt . Println ( arrayString ) // \u4e5f\u53ef\u4ee5\u7701\u7565\u957f\u5ea6\uff0c\u8ba9 go \u81ea\u52a8\u8ba1\u7b97\u3002\u8fd9\u4e2a\u65f6\u5019\u4f60\u9700\u8981\u662f\u4f7f\u7528\u7701\u7565\u53f7 ... // \u521b\u5efa\u4e00\u4e2a\u957f\u5ea6\u4e3a 3 \u7684 float64 \u6570\u7ec4 arrayFloat := [ ... ] float64 { 1.5 , 8.8 , 6.6 } fmt . Println ( arrayFloat ) // \u4e8c\u7ef4\u6570\u7ec4 matrix := [ 2 ][ 2 ] int64 { { 0 , 1 }, { 2 , 3 }, } fmt . Println ( matrix ) } func main () { testArray () } \u4e00\u822c\u5bf9\u4e8e\u6570\u7ec4\u7684\u64cd\u4f5c\u4e5f\u5c31\u662f\u83b7\u53d6\u957f\u5ea6(len\u51fd\u6570\uff0c0\u5230n-1)\uff0c\u83b7\u53d6\u6307\u5b9a\u4e0b\u6807\u7684\u5143\u7d20([index])\uff0c\u7ed9\u6570\u7ec4\u7b2c i \u4e2a\u5143\u7d20\u8d4b\u503c\u7b49\u3002 1 2 3 4 5 6 7 func testArrayOperation () { names := [ 4 ] string { \"zhang\" , \"wang\" , \"li\" , \"zhao\" } fmt . Printf ( \"names has %d elements\\n\" , len ( names )) fmt . Println ( names [ 1 ]) // NOTE: \u6ce8\u610f\u5982\u679c\u4e0b\u6807\u8d85\u8fc7\u8303\u56f4\u4f1a panic names [ 3 ] = \"lao zhao\" fmt . Println ( names [ 3 ]) } \u6570\u7ec4\u7684\u793a\u4f8b\u5c31\u5230\u8fd9\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u770b\u4e0b\u5207\u7247(slice)\uff0c\u5176\u5b9e\u5728\u4e1a\u52a1\u5f00\u53d1\u4e2d\u5207\u7247\u8981\u8fdc\u6bd4\u6570\u7ec4\u66f4\u52a0\u5e38\u7528\u4e5f\u66f4\u52a0\u7075\u6d3b\uff0c\u751a\u81f3\u53ef\u80fd\u4f60\u90fd\u4e0d\u4f1a\u7528\u5230\u6570\u7ec4\uff0c \u800c\u662f\u4e00\u76f4\u4f7f\u7528\u5207\u7247\u6765\u4ee3\u66ff\u3002","title":"\u6570\u7ec4"},{"location":"basics/02_go_array_and_slice/array_and_slice/#slice","text":"\u5207\u7247\u6bd4\u6570\u7ec4\u66f4\u52a0\u7075\u6d3b\uff0c\u957f\u5ea6\u662f\u53ef\u4ee5\u53d8\u5316\u7684\u3002\u4f60\u53ef\u80fd\u4f1a\u597d\u5947\u5b83\u548c\u6570\u7ec4\u7684\u533a\u522b\u4ee5\u53ca\u5e95\u5c42\u5b9e\u73b0\u3002\u5b9e\u9645\u4e0a\u5b83\u548c python \u7684 list \u6bd4\u8f83\u7c7b\u4f3c\uff0c\u53ef\u4ee5\u81ea\u52a8\u6269\u5bb9\u3002\u4f60\u53ef\u4ee5\u7b80\u5355\u5730\u7406\u89e3\u4e3a\u5207\u7247\u662f\u4e00\u4e2a\u6307\u5411\u6570\u7ec4\u7684\u6307\u9488\uff0c\u8fd9\u4e2a\u6570\u7ec4\u6709\u5b83\u7684\u603b\u5bb9\u91cf(capacity)\uff0c\u548c\u76ee\u524d\u4f7f\u7528\u4f7f\u7528\u7684\u957f\u5ea6(length)\u3002 \u521b\u5efa\u4e00\u4e2a\u5207\u7247\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6784\u9020\u65b9\u5f0f\u6216\u8005\u5185\u7f6e\u7684 make \u51fd\u6570\u3002 1 2 3 4 5 6 7 8 // \u521b\u5efa\u4e00\u4e2a\u7c7b\u578b\u4e3a Type, \u957f\u5ea6\u4e3a length, \u5bb9\u91cf\u4e3a capacity \u7684 slice\u3002\u4e00\u822c\u6211\u4eec\u4e0d\u592a\u5173\u5fc3\u5bb9\u91cf\u800c\u662f\u5173\u5fc3\u957f\u5ea6 make([]Type, length, c capacity) // \u521b\u5efa\u4e00\u4e2a\u7c7b\u578b\u4e3a Type, \u957f\u5ea6\u4e3a length \u7684 slice\uff0c\u4e00\u822c\u6211\u4eec\u4e0d\u592a\u5173\u5fc3\u5bb9\u91cf\uff0c\u800c\u662f\u8ba9 go \u5e2e\u6211\u4eec\u81ea\u52a8\u5904\u7406\u6269\u5bb9\u95ee\u9898 make([]Type, length) // \u6700\u5e38\u7528\u7684\u4e00\u79cd\u65b9\u5f0f, \u5982\u679c\u5b9e\u73b0\u77e5\u9053 slice \u7684\u957f\u5ea6\uff0c\u53ef\u4ee5\u907f\u514d slice \u6269\u5bb9\u64cd\u4f5c\uff0c\u6027\u80fd\u66f4\u597d // \u521b\u5efa\u4e00\u4e2a Type \u7c7b\u578b slice []Type{} // \u548c make([]Type, 0) \u7b49\u4ef7 // \u521b\u5efa\u5e76\u4e14\u521d\u59cb\u5316\u4e00\u4e2a slice\u3002\u6ce8\u610f\u548c\u6570\u7ec4\u7684\u533a\u522b\u662f [] \u91cc\u8fb9\u6ca1\u6709\u7701\u7565\u53f7 ... []Type{value1, value2, ... , valueN} \u4ee5\u4e0b\u662f slice \u7684\u5e38\u89c1\u64cd\u4f5c\uff0c\u5f88\u591a\u548c\u6570\u7ec4\u6bd4\u8f83\u7c7b\u4f3c\uff1a \u540c\u6837\u7f16\u5199\u4e00\u4e9b\u793a\u4f8b\u4ee3\u7801\u6765\u5feb\u901f\u5b66\u4e60\u5b83\uff0c\u8fd9\u91cc\u5c06\u4f7f\u7528\u7b14\u8005\u4e1a\u52a1\u4e2d\u6700\u5e38\u7528\u7684\u4e00\u4e9b\u65b9\u5f0f: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 func testSlice () { // \u521b\u5efa\u5e76\u4e14\u521d\u59cb\u5316\u4e00\u4e2a slice names := [] string { \"zhang\" , \"wang\" , \"li\" , \"zhao\" } // \u6253\u5370 names, \u957f\u5ea6\u548c\u5bb9\u91cf fmt . Println ( names , len ( names ), cap ( names )) names2 := names [ 0 : 3 ] // \u83b7\u53d6\u5b50\u5207\u7247 0,1,2 \u4e09\u4e2a\u5143\u7d20\uff0c\u6ce8\u610f\u5de6\u95ed\u53f3\u5f00\u533a\u95f4 fmt . Println ( names2 ) // \u5c1d\u8bd5\u4fee\u6539\u4e00\u4e0b names2 \uff0c\u6ce8\u610f names \u4e5f\u4f1a\u8ddf\u7740\u6539\u53d8\u4e48\uff1f names [ 0 ] = \"lao zhang\" fmt . Println ( names , names2 ) // \u4f60\u4f1a\u53d1\u73b0names\u4e5f\u53d8\u4e86\uff0c\u8fd9\u91cc\u8d77\u59cb\u5b83\u4eec\u5171\u7528\u4e86\u5e95\u5c42\u7ed3\u6784\uff0c\u6ce8\u610f\u8fd9\u4e2a\u95ee\u9898 // \u904d\u5386\u4e00\u4e2a slice \u6211\u4eec\u4f7f\u7528 for/range \u8bed\u6cd5 for idx , name := range names { // \u5982\u679c\u6ca1\u6709\u7528\u5230\u4e0b\u6807 idx\uff0c\u53ef\u4ee5\u5199\u6210\u4e0b\u5212\u7ebf _ \u4f5c\u4e3a\u5360\u4f4d\u7b26\uff0c\u4f46\u662f\u4e0d\u80fd\u7701\u7565 fmt . Println ( idx , name ) } // \u4fee\u6539\u5207\u7247\u4e3b\u8981\u901a\u8fc7\u8d4b\u503c\u548c append \u64cd\u4f5c\u3002\u4f7f\u7528 append \u4fee\u6539\u5207\u7247 vals := make ([] int , 0 ) for i := 0 ; i < 3 ; i ++ { vals = append ( vals , i ) } fmt . Println ( vals ) vals2 := [] int { 3 , 4 , 5 } newVals := append ( vals , vals2 ... ) // \u53ef\u4ee5\u4f7f\u7528\u7701\u7565\u53f7\u7684\u65b9\u5f0f\u300e\u89e3\u5305\u300f\u4e00\u4e2a slice \u6765\u8fde\u63a5\u4e24\u4e2a slice fmt . Println ( newVals ) } Tip \u5982\u679c\u5728\u521b\u5efa\u4e00\u4e2a slice \u4e4b\u524d\u9884\u5148\u77e5\u9053\u4e86\u5b83\u7684\u957f\u5ea6\uff0cmake \u51fd\u6570\u6700\u597d\u4f20\u9012\u957f\u5ea6\u8fdb\u53bb\uff0c\u9632\u6b62 append \u64cd\u4f5c\u53ef\u80fd\u5bfc\u81f4\u91cd\u65b0\u5206\u914d\u5185\u5b58\u964d\u4f4e\u6548\u7387\u3002 \u6bd4\u5982\u4e0b\u8fb9\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u4f7f\u7528\u7b2c\u4e8c\u79cd\u65b9\u5f0f\u6548\u7387\u66f4\u9ad8\u4e00\u4e9b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 package main import \"fmt\" func main () { manyInts := make ([] int , 1000000 ) // bad way a := make ([] int , 0 ) for _ , val := range manyInts { a = append ( a , val + val ) // \u6269\u5bb9 a \u4f1a\u5bfc\u81f4\u91cd\u65b0\u5206\u914d\u5185\u5b58 } fmt . Println ( a ) // good way b := make ([] int , len ( manyInts )) for i , val := range manyInts { b [ i ] = val + val // \u6ce8\u610f\u8fd9\u91cc\u662f\u8d4b\u503c\u4e86\uff0c\u4e0d\u662f append } fmt . Println ( b ) }","title":"\u5207\u7247(slice)"},{"location":"basics/02_go_array_and_slice/array_and_slice/#_2","text":"\u5207\u7247\u64cd\u4f5c\u548c python list \u6bd4\u8f83\u7c7b\u4f3c\uff0c\u4f46\u662f\u4e5f\u8981\u6ce8\u610f\u4e00\u4e9b\u533a\u522b\u3002\u6bd4\u5982\u5b50\u5207\u7247\u548c\u539f\u5207\u7247\u5171\u4eab\u5e95\u5c42\u7ed3\u6784\uff0c\u5982\u679c\u9700\u8981\u6df1\u62f7\u8d1d\u4f60\u5f97\u81ea\u5df1\u53bb\u590d\u5236\u4e00\u4e2a\u65b0\u7684\u3002 \u53e6\u5916 go \u53ea\u652f\u6301\u6b63\u6570\u7684\u7d22\u5f15\uff0c\u4f60\u9700\u8981\u4fdd\u8bc1 slice \u7d22\u5f15\u503c\u5fc5\u987b\u8981\u5728 0 \u5230 length-1\uff0c\u5426\u5219\u4f1a\u51fa\u73b0 panic \u5bfc\u81f4\u7a0b\u5e8f\u9000\u51fa\u3002 \u8fd9\u91cc\u4ecb\u7ecd\u4e00\u4e0b\u5982\u4f55\u6765\u6392\u5e8f\u548c\u641c\u7d22\u4e00\u4e2a slice\uff0c\u9664\u4e86\u81ea\u5df1\u5199\u6392\u5e8f\u7b97\u6cd5\u4e4b\u5916\uff0c\u6807\u51c6\u5e93\u63d0\u4f9b\u4e86 sort \u5305\u6765\u5e2e\u52a9\u6211\u4eec\u5904\u7406\u6392\u5e8f\u95ee\u9898\u3002 \u5e38\u7528\u7684\u6709\u51e0\u4e2a\u51fd\u6570\uff0cgo \u6807\u51c6\u5e93\u6587\u6863\u5df2\u7ecf\u6709\u975e\u5e38\u597d\u7684\u793a\u4f8b\uff08\u597d\u597d\u5b66\u82f1\u8bed\u554a\uff09\uff1a 1 2 3 sort . Ints ( a [] int ) // Ints sorts a slice of ints in increasing order. sort . Float64s ( a [] float64 ) // Float64s sorts a slice of float64s in increasing order (not-a-number values are treated as less than other values). sort . Search ( n int , f func ( int ) bool ) int // Search uses binary search to find and return the smallest index i in [0, n) at which f(i) is true","title":"\u5982\u4f55\u7ed9\u4e00\u4e2a\u5207\u7247\u6392\u5e8f\uff1f"},{"location":"basics/02_go_array_and_slice/array_and_slice/#_3","text":"\u8bf7\u7ed9\u4e00\u4e2a slice \u53cd\u5411\u6392\u5e8f\uff1f\u4e0d\u77e5\u9053\u7684\u8bdd\u8bf7\u641c\u7d22 go \u7684 sort \u6587\u6863 \u4ec0\u4e48\u60c5\u51b5\u4e0b\u6211\u4eec\u8981\u53bb\u5173\u5fc3 slice \u7684\u5bb9\u91cf\u5462\uff1fappend \u4e4b\u540e\u5b83\u7684\u5bb9\u91cf\u5982\u4f55\u53d8\u5316\u5462\uff1f sort \u5305\u91cc\u7684\u7a33\u5b9a\u6392\u5e8f\u548c\u975e\u7a33\u5b9a\u6392\u5e8f\u6709\u4ec0\u4e48\u533a\u522b\uff1f","title":"\u5c0f\u7ec3\u4e60"},{"location":"basics/02_go_array_and_slice/array_and_slice/#_4","text":"Slice Tricks","title":"\u53c2\u8003"},{"location":"basics/03_map/map/","text":"\u5b66\u4e60 go \u7684\u6620\u5c04 map \u00b6 Quote \"Go is like a better C, from the guys that didn\u2019t bring you C++.\" \u2013 Ikai Lan \u6620\u5c04(map) \u00b6 \u672c\u7ae0\u4ecb\u7ecd\u6620\u5c04\uff0c\u5728\u5f88\u591a\u7f16\u7a0b\u8bed\u8a00\u4e2d\u90fd\u6709\u7c7b\u4f3c\u7684\u7528\u6765\u4fdd\u5b58\u952e\u503c\u5bf9(key-value)\u7684\u6570\u636e\u7ed3\u6784\uff0c\u6bd4\u5982 python \u4e2d\u7684 dict, c++ \u4e2d\u7684 map\u3002\u4e00\u822c\u5e95\u5c42\u4f7f\u7528\u54c8\u5e0c \u8868\u6216\u8005\u7ea2\u9ed1\u6811\u6765\u5b9e\u73b0 map\uff0c\u67e5\u8be2\u6548\u7387\u662f\u975e\u5e38\u9ad8\u7684\u3002\u5982\u679c\u4f60\u719f\u6089\u5176\u4ed6\u8bed\u8a00\u7684 map \u7ed3\u6784\uff0c\u4e0a\u624b go \u7684 map \u975e\u5e38\u5bb9\u6613\u3002 Go \u4e5f\u5185\u7f6e\u4e86 map \u6570\u636e\u7ed3\u6784\uff0c\u4f5c\u4e3a map \u7684 key\uff0c\u5fc5\u987b\u8981\u662f\u652f\u6301 == \u548c != \u64cd\u4f5c\u7b26\u7684\u7c7b\u578b\uff0c\u5e38\u7528\u7684\u57fa\u7840\u7c7b\u578b int, float64, string \u7b49\u90fd\u662f\u53ef\u4ee5\u4f5c\u4e3a map \u7684\u952e\u7684\uff0c\u4f46\u662f\u50cf\u5207\u7247\u6216\u8005\u4e0d\u80fd\u6bd4\u8f83\u7684\u7ed3\u6784\u4f53\u65e0\u6cd5\u4f5c\u4e3a\u952e\u3002\u800c\u6620\u5c04\u7684\u503c\u6ca1\u6709\u8981\u6c42\uff0c\u4efb\u4f55\u5185\u7f6e\u6216\u8005\u81ea\u5b9a\u4e49\u7684\u7c7b\u578b\u90fd\u53ef\u4ee5\u4f5c\u4e3a\u503c\uff0c\u8fd9\u6837\u4e00\u6765 \u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u590d\u6742\u7684\u5d4c\u5957 map \u7ed3\u6784\uff0c\u6bd4\u5982 map \u7684 value \u503c\u4f9d\u7136\u662f\u4e00\u4e2a map\u3002 \u5148\u6765\u770b\u4e0b\u5982\u4f55\u53bb\u521b\u5efa\u4e00\u4e2a\u6620\u5c04\uff0c\u540c\u6837\u4e5f\u6709\u51e0\u79cd\u5f62\u5f0f\uff0c\u6700\u5e38\u7528\u7684\u65b9\u5f0f\u5c31\u662f\u4f7f\u7528\u5185\u7f6e\u7684 make \u51fd\u6570\uff1a 1 2 3 4 5 6 7 8 // \u521b\u5efa\u4e00\u4e2a\u5bb9\u7eb3 capacity \u4e2a\u952e\u503c\u5bf9\u7684 map\uff0c\u952e\u7684\u7c7b\u578b\u662f KeyType\uff0c\u503c\u7684\u7c7b\u578b\u662f ValueType make ( map [ KeyType ] ValueType , capacity ) // \u521b\u5efa\u4e00\u4e2a\u7a7a\u7684 map make ( map [ KeyType ] ValueType ) // \u521b\u5efa\u4e00\u4e2a\u7a7a\u7684 map map [ KeyType ] ValueType {} // \u7b49\u4ef7\u4e8e make(map[KeyType]ValueType) // \u521b\u5efa\u5e76\u4e14\u521d\u59cb\u5316\u4e00\u4e2a map map [ KeyType ] ValueType { key1 : value1 , key2 : value2 , ... , keyN : valueN } \u518d\u6765\u770b\u4e00\u4e0b map \u7684\u64cd\u4f5c\uff0c\u548c python \u6bd4\u8f83\u7c7b\u4f3c\u3002 Warning \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u5c31\u662f\u4f7f\u7528 v := m[k] \u8fd9\u79cd\u65b9\u5f0f\u83b7\u53d6\u503c\uff0c\u5982\u679c\u76f8\u5e94\u7684 k \u4e0d\u5b58\u5728\uff0cmap \u4e0d\u4f1a\u50cf python \u4e00\u6837\u629b\u9519(KeyError)\uff0c\u800c\u662f\u76f4\u63a5\u7ed9 \u4f60\u8fd4\u56de\u4e00\u4e2a\u7c7b\u578b\u7684\u96f6\u503c(\u6570\u5b57\u662f0\uff0c\u5b57\u7b26\u4e32\u662f\u7a7a\u4e32)\uff0c\u8fd9\u4e2a\u53ef\u80fd\u4e0d\u662f\u4f60\u671f\u671b\u7684\uff0c\u6240\u4ee5\u4e00\u822c\u6211\u4eec\u7528 v, found := m[k] \u8fd9\u79cd\u8bed\u6cd5\uff0c\u5982\u679c\u4e0d\u5b58 \u5728 k \u7684\u8bdd\uff0cfound \u7684\u503c\u662f false\uff0c\u8fd9\u6837\u5c31\u77e5\u9053\u7a76\u7adf\u662f\u5426\u5b58\u5728\u8fd9\u4e2a k \u4e86\u3002 \u6211\u4eec\u540c\u6837\u7f16\u5199\u4e00\u4e9b\u5c0f\u7684\u6d4b\u8bd5\u4ee3\u7801\u6765\u719f\u6089 map \u7684\u4f7f\u7528: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 package main import \"fmt\" func testMap () { // \u521b\u5efa\u4e00\u4e2a\u7a7a\u7684map m := make ( map [ string ] int ) m [ \"hello\" ] = 1 m [ \"world\" ] = 2 m [ \"zhang\" ] = 3 fmt . Println ( m ) // \u8f93\u51fa\u4e00\u4e2a\u5b58\u5728\u7684 key \u548c\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684 key fmt . Println ( m [ \"hello\" ], m [ \"not_found\" ]) delete ( m , \"zhang\" ) // \u5220\u9664 zhang\u3002\u6ce8\u610f\u5220\u9664\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684key go \u4e5f\u4e0d\u4f1a\u629b\u51fa\u9519\u8bef fmt . Println ( m ) if v , ok := m [ \"hello\" ]; ok { fmt . Printf ( \"m[%s] is %d \\n\" , \"hello\" , v ) } // \u540c\u6837\u4f7f\u7528 for/range \u904d\u5386\uff0cNOTE\uff1a\u904d\u5386 map \u8fd4\u56de\u7684\u987a\u5e8f\u662f\u968f\u673a\u7684\uff0c\u4e0d\u8981\u4f9d\u8d56 map \u904d\u5386\u7684\u987a\u5e8f for k , v := range m { fmt . Printf ( \"m[%s]: %d\\n\" , k , v ) } // \u5982\u679c\u53ea\u9700\u8981 k \u6216\u8005 v \u4f60\u53ef\u4ee5\u4f7f\u7528 \u4e0b\u5212\u7ebf\u4f5c\u4e3a\u5360\u4f4d\u7b26\u5ffd\u7565\u503c for k , _ := range m { fmt . Printf ( \"k is %s\\n\" , k ) } } func main () { testMap () } \u5982\u4f55\u5b9e\u73b0 set\uff1f \u00b6 set \u7ecf\u5e38\u5728\u8bb2 map \u7684\u65f6\u5019\u63d0\u5230\uff0c\u5b83\u662f\u96c6\u5408\u7c7b\u578b\uff0c\u548c\u6570\u5b66\u4e0a\u7684\u96c6\u5408\u6982\u5ff5\u7c7b\u4f3c\uff0c\u4fdd\u5b58\u552f\u4e00\u7684\u503c\u7684\u5bb9\u5668\uff0c\u7ecf\u5e38\u7528\u6765\u5224\u65ad\u4e00\u4e2a\u5143\u7d20\u662f\u5426\u5df2\u7ecf\u5b58\u5728 \u3002go \u91cc\u4e0d\u50cf python \u76f4\u63a5\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5185\u7f6e set \u7c7b\u578b\uff0c\u4f46\u5176\u5b9e\u6839\u636e map \u6211\u4eec\u4e5f\u53ef\u4ee5\u7528\u6765\u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u7684 set \u7ed3\u6784\uff0c\u53ea\u9700\u8981\u521b\u5efa\u4e00\u4e2a map \uff0c\u7136\u540e\u8ba9 map \u7684\u503c\u662f bool \u7c7b\u578b\uff0c\u6807\u8bc6\u662f\u5426\u5b58\u5728\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 func testUseMapAsSet () { m := make ( map [ string ] bool ) m [ \"hello\" ] = true m [ \"world\" ] = true key := \"hello\" if _ , ok := m [ key ]; ok { fmt . Printf ( \"%s key exists\\n\" , key ) } } \u7ec3\u4e60 \u00b6 \u5c1d\u8bd5\u7f16\u5199\u4e00\u4e2a\u8bcd\u9891\u7edf\u8ba1\u7a0b\u5e8f\uff0c\u4f60\u9700\u8981\u67e5\u8be2\u4e0b\u5982\u4f55\u7528 go \u8bfb\u53d6\u6587\u4ef6\uff0c\u7136\u540e\u7edf\u8ba1\u6bcf\u4e2a\u5355\u8bcd\u51fa\u73b0\u7684\u6b21\u6570\uff1f \u7ed9\u4f60\u4e00\u4e2a\u6709\u91cd\u590d\u6570\u5b57\u7684 []int slice\uff0c\u8bf7\u4f60\u7528 map \u5b9e\u73b0\u4e00\u4e2a\u53bb\u91cd\u51fd\u6570 func unique(intVals []int) []int \u5185\u7f6e\u7684 map \u5e76\u4e0d\u662f\u5e76\u53d1\u5b89\u5168\u7684\uff0c\u600e\u4e48\u6837\u4fee\u6539\u624d\u662f\u5e76\u53d1\u5b89\u5168\u7684\u5462\uff1f","title":"Go \u6620\u5c04"},{"location":"basics/03_map/map/#go-map","text":"Quote \"Go is like a better C, from the guys that didn\u2019t bring you C++.\" \u2013 Ikai Lan","title":"\u5b66\u4e60 go \u7684\u6620\u5c04 map"},{"location":"basics/03_map/map/#map","text":"\u672c\u7ae0\u4ecb\u7ecd\u6620\u5c04\uff0c\u5728\u5f88\u591a\u7f16\u7a0b\u8bed\u8a00\u4e2d\u90fd\u6709\u7c7b\u4f3c\u7684\u7528\u6765\u4fdd\u5b58\u952e\u503c\u5bf9(key-value)\u7684\u6570\u636e\u7ed3\u6784\uff0c\u6bd4\u5982 python \u4e2d\u7684 dict, c++ \u4e2d\u7684 map\u3002\u4e00\u822c\u5e95\u5c42\u4f7f\u7528\u54c8\u5e0c \u8868\u6216\u8005\u7ea2\u9ed1\u6811\u6765\u5b9e\u73b0 map\uff0c\u67e5\u8be2\u6548\u7387\u662f\u975e\u5e38\u9ad8\u7684\u3002\u5982\u679c\u4f60\u719f\u6089\u5176\u4ed6\u8bed\u8a00\u7684 map \u7ed3\u6784\uff0c\u4e0a\u624b go \u7684 map \u975e\u5e38\u5bb9\u6613\u3002 Go \u4e5f\u5185\u7f6e\u4e86 map \u6570\u636e\u7ed3\u6784\uff0c\u4f5c\u4e3a map \u7684 key\uff0c\u5fc5\u987b\u8981\u662f\u652f\u6301 == \u548c != \u64cd\u4f5c\u7b26\u7684\u7c7b\u578b\uff0c\u5e38\u7528\u7684\u57fa\u7840\u7c7b\u578b int, float64, string \u7b49\u90fd\u662f\u53ef\u4ee5\u4f5c\u4e3a map \u7684\u952e\u7684\uff0c\u4f46\u662f\u50cf\u5207\u7247\u6216\u8005\u4e0d\u80fd\u6bd4\u8f83\u7684\u7ed3\u6784\u4f53\u65e0\u6cd5\u4f5c\u4e3a\u952e\u3002\u800c\u6620\u5c04\u7684\u503c\u6ca1\u6709\u8981\u6c42\uff0c\u4efb\u4f55\u5185\u7f6e\u6216\u8005\u81ea\u5b9a\u4e49\u7684\u7c7b\u578b\u90fd\u53ef\u4ee5\u4f5c\u4e3a\u503c\uff0c\u8fd9\u6837\u4e00\u6765 \u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u590d\u6742\u7684\u5d4c\u5957 map \u7ed3\u6784\uff0c\u6bd4\u5982 map \u7684 value \u503c\u4f9d\u7136\u662f\u4e00\u4e2a map\u3002 \u5148\u6765\u770b\u4e0b\u5982\u4f55\u53bb\u521b\u5efa\u4e00\u4e2a\u6620\u5c04\uff0c\u540c\u6837\u4e5f\u6709\u51e0\u79cd\u5f62\u5f0f\uff0c\u6700\u5e38\u7528\u7684\u65b9\u5f0f\u5c31\u662f\u4f7f\u7528\u5185\u7f6e\u7684 make \u51fd\u6570\uff1a 1 2 3 4 5 6 7 8 // \u521b\u5efa\u4e00\u4e2a\u5bb9\u7eb3 capacity \u4e2a\u952e\u503c\u5bf9\u7684 map\uff0c\u952e\u7684\u7c7b\u578b\u662f KeyType\uff0c\u503c\u7684\u7c7b\u578b\u662f ValueType make ( map [ KeyType ] ValueType , capacity ) // \u521b\u5efa\u4e00\u4e2a\u7a7a\u7684 map make ( map [ KeyType ] ValueType ) // \u521b\u5efa\u4e00\u4e2a\u7a7a\u7684 map map [ KeyType ] ValueType {} // \u7b49\u4ef7\u4e8e make(map[KeyType]ValueType) // \u521b\u5efa\u5e76\u4e14\u521d\u59cb\u5316\u4e00\u4e2a map map [ KeyType ] ValueType { key1 : value1 , key2 : value2 , ... , keyN : valueN } \u518d\u6765\u770b\u4e00\u4e0b map \u7684\u64cd\u4f5c\uff0c\u548c python \u6bd4\u8f83\u7c7b\u4f3c\u3002 Warning \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u5c31\u662f\u4f7f\u7528 v := m[k] \u8fd9\u79cd\u65b9\u5f0f\u83b7\u53d6\u503c\uff0c\u5982\u679c\u76f8\u5e94\u7684 k \u4e0d\u5b58\u5728\uff0cmap \u4e0d\u4f1a\u50cf python \u4e00\u6837\u629b\u9519(KeyError)\uff0c\u800c\u662f\u76f4\u63a5\u7ed9 \u4f60\u8fd4\u56de\u4e00\u4e2a\u7c7b\u578b\u7684\u96f6\u503c(\u6570\u5b57\u662f0\uff0c\u5b57\u7b26\u4e32\u662f\u7a7a\u4e32)\uff0c\u8fd9\u4e2a\u53ef\u80fd\u4e0d\u662f\u4f60\u671f\u671b\u7684\uff0c\u6240\u4ee5\u4e00\u822c\u6211\u4eec\u7528 v, found := m[k] \u8fd9\u79cd\u8bed\u6cd5\uff0c\u5982\u679c\u4e0d\u5b58 \u5728 k \u7684\u8bdd\uff0cfound \u7684\u503c\u662f false\uff0c\u8fd9\u6837\u5c31\u77e5\u9053\u7a76\u7adf\u662f\u5426\u5b58\u5728\u8fd9\u4e2a k \u4e86\u3002 \u6211\u4eec\u540c\u6837\u7f16\u5199\u4e00\u4e9b\u5c0f\u7684\u6d4b\u8bd5\u4ee3\u7801\u6765\u719f\u6089 map \u7684\u4f7f\u7528: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 package main import \"fmt\" func testMap () { // \u521b\u5efa\u4e00\u4e2a\u7a7a\u7684map m := make ( map [ string ] int ) m [ \"hello\" ] = 1 m [ \"world\" ] = 2 m [ \"zhang\" ] = 3 fmt . Println ( m ) // \u8f93\u51fa\u4e00\u4e2a\u5b58\u5728\u7684 key \u548c\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684 key fmt . Println ( m [ \"hello\" ], m [ \"not_found\" ]) delete ( m , \"zhang\" ) // \u5220\u9664 zhang\u3002\u6ce8\u610f\u5220\u9664\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684key go \u4e5f\u4e0d\u4f1a\u629b\u51fa\u9519\u8bef fmt . Println ( m ) if v , ok := m [ \"hello\" ]; ok { fmt . Printf ( \"m[%s] is %d \\n\" , \"hello\" , v ) } // \u540c\u6837\u4f7f\u7528 for/range \u904d\u5386\uff0cNOTE\uff1a\u904d\u5386 map \u8fd4\u56de\u7684\u987a\u5e8f\u662f\u968f\u673a\u7684\uff0c\u4e0d\u8981\u4f9d\u8d56 map \u904d\u5386\u7684\u987a\u5e8f for k , v := range m { fmt . Printf ( \"m[%s]: %d\\n\" , k , v ) } // \u5982\u679c\u53ea\u9700\u8981 k \u6216\u8005 v \u4f60\u53ef\u4ee5\u4f7f\u7528 \u4e0b\u5212\u7ebf\u4f5c\u4e3a\u5360\u4f4d\u7b26\u5ffd\u7565\u503c for k , _ := range m { fmt . Printf ( \"k is %s\\n\" , k ) } } func main () { testMap () }","title":"\u6620\u5c04(map)"},{"location":"basics/03_map/map/#set","text":"set \u7ecf\u5e38\u5728\u8bb2 map \u7684\u65f6\u5019\u63d0\u5230\uff0c\u5b83\u662f\u96c6\u5408\u7c7b\u578b\uff0c\u548c\u6570\u5b66\u4e0a\u7684\u96c6\u5408\u6982\u5ff5\u7c7b\u4f3c\uff0c\u4fdd\u5b58\u552f\u4e00\u7684\u503c\u7684\u5bb9\u5668\uff0c\u7ecf\u5e38\u7528\u6765\u5224\u65ad\u4e00\u4e2a\u5143\u7d20\u662f\u5426\u5df2\u7ecf\u5b58\u5728 \u3002go \u91cc\u4e0d\u50cf python \u76f4\u63a5\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5185\u7f6e set \u7c7b\u578b\uff0c\u4f46\u5176\u5b9e\u6839\u636e map \u6211\u4eec\u4e5f\u53ef\u4ee5\u7528\u6765\u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u7684 set \u7ed3\u6784\uff0c\u53ea\u9700\u8981\u521b\u5efa\u4e00\u4e2a map \uff0c\u7136\u540e\u8ba9 map \u7684\u503c\u662f bool \u7c7b\u578b\uff0c\u6807\u8bc6\u662f\u5426\u5b58\u5728\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 func testUseMapAsSet () { m := make ( map [ string ] bool ) m [ \"hello\" ] = true m [ \"world\" ] = true key := \"hello\" if _ , ok := m [ key ]; ok { fmt . Printf ( \"%s key exists\\n\" , key ) } }","title":"\u5982\u4f55\u5b9e\u73b0 set\uff1f"},{"location":"basics/03_map/map/#_1","text":"\u5c1d\u8bd5\u7f16\u5199\u4e00\u4e2a\u8bcd\u9891\u7edf\u8ba1\u7a0b\u5e8f\uff0c\u4f60\u9700\u8981\u67e5\u8be2\u4e0b\u5982\u4f55\u7528 go \u8bfb\u53d6\u6587\u4ef6\uff0c\u7136\u540e\u7edf\u8ba1\u6bcf\u4e2a\u5355\u8bcd\u51fa\u73b0\u7684\u6b21\u6570\uff1f \u7ed9\u4f60\u4e00\u4e2a\u6709\u91cd\u590d\u6570\u5b57\u7684 []int slice\uff0c\u8bf7\u4f60\u7528 map \u5b9e\u73b0\u4e00\u4e2a\u53bb\u91cd\u51fd\u6570 func unique(intVals []int) []int \u5185\u7f6e\u7684 map \u5e76\u4e0d\u662f\u5e76\u53d1\u5b89\u5168\u7684\uff0c\u600e\u4e48\u6837\u4fee\u6539\u624d\u662f\u5e76\u53d1\u5b89\u5168\u7684\u5462\uff1f","title":"\u7ec3\u4e60"},{"location":"basics/04_go_control_flow/go_procedural/","text":"\u5b66\u4e60 go \u7684\u8fc7\u7a0b\u5f0f\u7f16\u7a0b \u00b6 Quote \u201cGo doesn\u2019t implicitly anything.\u201d \u2013 Steven in golang-nuts \u8fc7\u7a0b\u5f0f\u7f16\u7a0b \u00b6 \u5f88\u591a\u73b0\u4ee3\u5316\u7f16\u7a0b\u8bed\u8a00\u57fa\u672c\u90fd\u652f\u6301\u591a\u79cd\u7f16\u7a0b\u8303\u5f0f\uff0c\u6bd4\u5982 \u8fc7\u7a0b\u5f0f \u3001\u51fd\u6570\u5f0f\u3001\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u7b49\u3002\u672c\u7ae0\u6211\u4eec\u6765\u4ecb\u7ecd go \u8bed\u8a00\u4e2d\u7684\u63a7\u5236\u6d41\u8bed\u53e5\uff0c\u719f\u6089\u5b83\u4eec\u4e3a\u6211\u4eec\u7f16\u5199\u51fd\u6570\u6253\u597d\u57fa\u7840\u3002 Go \u63a7\u5236\u6d41\u8bed\u53e5 \u00b6 \u5bf9\u4e8e\u5f88\u591a\u5e38\u89c1\u7684\u7f16\u7a0b\u8bed\u8a00\u6765\u8bf4\uff0c\u63a7\u5236\u6d41\u8bed\u53e5\u662f\u5b9e\u73b0\u8fc7\u7a0b\u5f0f\u7f16\u7a0b\u7684\u57fa\u7840\uff0c\u6700\u5e38\u89c1\u7684\u5c31\u662f\u5206\u4e4b\u548c\u5faa\u73af\uff0c\u6bd4\u5982\u5f88\u591a\u7f16\u7a0b\u8bed\u8a00\u4e2d\u90fd\u6709 if/else/elseif/switch/while/for \u7b49\u5173\u952e\u8bcd\u7528\u6765\u5b9e\u73b0\u5206\u4e4b\u548c\u5faa\u73af\u3002\u4e0d\u540c\u7684\u7f16\u7a0b\u8bed\u8a00\u4f7f\u7528\u5b83\u4eec\u57fa\u672c\u4e0a\u4e5f\u90fd\u662f\u5927\u540c\u5c0f\u5f02\uff0c\u672c\u7ae0\u6211\u4eec\u6765\u770b\u4e0b\u5728 go \u8bed\u8a00\u4e2d\u5982\u4f55\u5b9e\u73b0\u5b83\u4eec\u3002 \u5206\u4e4b \u00b6 go \u8bed\u8a00\u63d0\u4f9b\u4e86\u4e09\u79cd\u5206\u4e4b\u65b9\u5f0f\uff0cif/switch/select\uff0c\u5206\u522b\u6765\u770b\u4e0b\u5b83\u4eec\u7684\u4f7f\u7528\u65b9\u5f0f\u548c\u6ce8\u610f\u4e8b\u9879\u3002 if \u8bed\u53e5 \u00b6 if/else if/else \u4f7f\u7528\u8d77\u6765\u548c python \u7684\u975e\u5e38\u50cf\uff0c\u5b83\u7684\u683c\u5f0f\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 if optionalStatement1 ; booleanExpression1 { block1 } else if optionalStatement2 ; booleanExpression2 { block2 } else { block3 } \u6709\u51e0\u70b9\u9700\u8981\u6ce8\u610f\u7684\uff1a \u4e0d\u50cf c \u8bed\u8a00\uff0cif \u6761\u4ef6\u53ea\u80fd\u662f\u4e00\u4e2a bool \u503c\u6216\u8005\u8fd4\u56de bool \u503c\u5f97\u8868\u8fbe\u5f0f\uff0c\u800c\u4e0d\u80fd\u662f int (c/python \u53ef\u4ee5) if \u540e\u8fb9\u662f\u53ef\u4ee5\u5148\u8ddf\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u6bd4\u5982\u4e4b\u524d\u6211\u4eec\u89c1\u5230\u7684\u83b7\u53d6 map \u503c\u7684 if v,ok := m[key]; ok {} \u51e0\u4e2a\u5c0f\u793a\u4f8b\u5feb\u901f\u5165\u95e8\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 func testIf () { ok := true if ok { fmt . Println ( \"ok is true\" ) } day := \"Friday\" if day == \"Friday\" { fmt . Println ( \"\u660e\u5929\u4e0d\u4e0a\u73ed\u5440!\" ) } else if day == \"Sunday\" { fmt . Println ( \"\u5468\u672b\u597d\u5feb\" ) } else { fmt . Println ( \"\u5e72\u6d3b\u5566\" ) } m := make ( map [ string ] string ) m [ \"\u738b\u516b\" ] = \"\u7eff\u8c46\" if v , ok := m [ \"\u738b\u516b\" ]; ok { fmt . Println ( v ) } } switch/case \u00b6 go \u91cc\u6539\u5584\u4e86 c \u8bed\u8a00\u7684switch\uff0c\u6bd4\u5982\u6211\u4eec\u4e0d\u7528\u6bcf\u4e00\u4e2a case \u90fd\u8981\u52a0\u4e0a break\uff08\u5f88\u591a bug \u90fd\u662f\u56e0\u4e3a\u7c97\u5fc3\u7684\u7a0b\u5e8f\u5458\u5fd8\u8bb0\u52a0\u4e0a break \u5bfc\u81f4\u7684\uff0cgo \u4e2d\u4f60\u518d\u4e5f\u4e0d\u7528\u62c5\u5fc3\u5566\uff09\u3002go \u8bed\u8a00\u4e2d switch \u8bed\u6cd5\u5982\u4e0b\uff1a 1 2 3 4 5 6 switch optionalStatement ; optionalExpression { case expressionList1 : block1 \u2026 case expressionListN : blockN default : blockD } \u9700\u8981\u6ce8\u610f\u7684\u51e0\u70b9\u662f\uff1a case \u8bed\u53e5\u4e0d\u7528\u52a0\u4e0a break\uff0c\u4e0d\u50cf c \u4e0d\u4f1a\u53bb\u81ea\u52a8\u6267\u884c\u4e0b\u4e00\u4e2a case\uff0c\u9664\u975e\u4f60\u663e\u793a\u4f7f\u7528 fallthrough \u8bed\u53e5\u6307\u5b9a\uff08\u7528\u7684\u4e0d\u591a) default \u8bed\u53e5\u662f\u53ef\u9009\u7684\uff0c\u5982\u679c\u90fd\u6ca1\u6709\u5339\u914d\uff0c\u53ef\u4ee5\u7ed9\u4e00\u4e2a\u9ed8\u8ba4\u884c\u4e3a \u6765\u770b\u51e0\u4e2a\u5c0f\u7684\u793a\u4f8b\u5feb\u901f\u5165\u95e8\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 func testSwitch () { // \u5e38\u89c4\u7528\u6cd5 day := 0 switch day { case 0 , 6 : fmt . Println ( \"\u5468\u672b\" ) case 1 , 2 , 3 , 4 , 5 : fmt . Println ( \"\u5de5\u4f5c\u65e5\" ) default : fmt . Println ( \"\u4e0d\u5408\u6cd5\" ) } // case \u540e\u8fb9\u8fd8\u53ef\u4ee5\u662f\u8868\u8fbe\u5f0f a , b := 1 , 2 a , b = b , a switch { case a < b : fmt . Println ( \"a < b\" ) case a > b : fmt . Println ( \"a > b\" ) } } \u5faa\u73af \u00b6 \u518d\u6765\u770b\u4e0b\u5faa\u73af\uff0c\u548c\u5176\u4ed6\u8bed\u8a00\u4e0d\u540c\u7684\u662f\uff0cgo \u53ea\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5173\u952e\u8bcd for \u6765\u5b9e\u73b0\u5faa\u73af\uff08\u6ca1\u6709 while \u548c do while\uff09\uff0c\u662f\u4e0d\u662f\u975e\u5e38\u541d\u556c\u3002 \u4e0d\u8fc7\u4f60\u4f1a\u53d1\u73b0\u5176\u5b9e\u53ea\u8981\u4e00\u4e2a for \u5c31\u53ef\u4ee5\u6ee1\u8db3\u9700\u6c42\u4e86\uff0c\u5f53\u7136\u5b83\u63d0\u4f9b\u4e86\u51e0\u79cd\u4e0d\u540c\u7684\u4f7f\u7528\u65b9\u5f0f\uff0c\u6765\u7785\u7785\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // \u5e38\u89c4\u7528\u6cd5\uff0c\u548c\u5176\u4ed6\u8bed\u8a00\u7c7b\u4f3c for optionalPreStatement ; booleanExpress ; optionalPostStatement { block } // \u65e0\u9650\u5faa\u73af\uff0cblock \u4f1a\u88ab\u4e00\u76f4\u91cd\u590d\u6267\u884c for { block } // \u5b9e\u73b0while\u5faa\u73af\uff0cblock \u4e00\u76f4\u6267\u884c\u76f4\u5230 \u8868\u8fbe\u5f0f\u4e3afalse for booleanExpression { block } \u6b64\u5916 for/range \u8bed\u6cd5\u8fd8\u652f\u6301\u8ba9\u6211\u53bb\u8fed\u4ee3\u5b57\u7b26\u4e32\uff0c\u6570\u7ec4\uff0c\u5207\u7247\uff0cmap \u6216\u8005\u901a\u9053(channel)\uff0c\u4e4b\u524d\u5176\u5b9e\u5df2\u7ecf\u7528\u8fc7\u597d\u591a\u6b21\u4e86\uff0c\u8bf7\u770b\u51e0\u4e2a\u4f8b\u5b50\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 func testFor () { intSlice := [] int { 3 , 2 , 1 } for index , item := range intSlice { fmt . Println ( index , item ) } for index := range intSlice { // \u7701\u7565 item \u4e4b\u540e\u904d\u5386\u7684\u662f key\uff0c\u6ce8\u610f\u4e0d\u50cfpython \u76f4\u63a5\u904d\u5386\u503c fmt . Println ( index ) } m := map [ string ] string { \"k1\" : \"v1\" , \"k2\" : \"v2\" } for k , v := range m { fmt . Println ( k , v ) } for k := range m { fmt . Println ( k ) } } \u5982\u4f55\u8df3\u51fa\u5faa\u73af\u5462\uff1f\u548c\u5f88\u591a\u7f16\u7a0b\u8bed\u8a00\u4e00\u6837\uff0cgo \u4f7f\u7528 break \u548c continue \u5206\u522b\u8df3\u51fa\u6216\u8005\u8fdb\u5165\u4e0b\u4e00\u4e2a\u5faa\u73af\uff0c\u76f8\u4fe1\u4f60\u5df2\u7ecf\u975e\u5e38\u719f\u6089\u4e86\u3002 \u5176\u5b9e break \u548c continue \u8fd8\u652f\u6301\u540e\u8fb9\u8ddf\u4e00\u4e2a\u8df3\u8f6c\u6807\u7b7e\uff0c\u4f46\u662f\u4e00\u822c\u4ee3\u7801\u4e2d\u7528\u5f97\u6bd4\u8f83\u5c11\uff0c\u4f60\u53ea\u9700\u8981\u77e5\u9053\u8fd8\u6709\u8fd9\u4e2a\u529f\u80fd\uff0c \u4e07\u4e0d\u5f97\u5df2\u9700\u8981\u4f7f\u7528\u7684\u65f6\u5019\u518d google \u5c31\u597d\uff0c\u4f60\u5f88\u53ef\u80fd\u6c38\u8fdc\u90fd\u7528\u4e0d\u5230\u8fd9\u4e2a\u3002 goto \u00b6 go \u548c c \u4e00\u6837\u652f\u6301 goto \u8bed\u53e5\uff0c\u4f46\u662f\u6839\u636e\u7b14\u8005\u7684\u7ecf\u9a8c\uff0c\u4e1a\u52a1\u4ee3\u7801\u4e2d\u5176\u5b9e\u7528\u7684\u6bd4\u8f83\u5c11\uff0c\u5927\u90e8\u5206\u903b\u8f91\u6211\u4eec\u4e0d\u7528 goto \u5c31\u53ef\u4ee5\u5904\u7406\u3002 \u9664\u4e86\u6781\u5c11\u6570\u60c5\u51b5\u5916\uff0c\u4e0d\u592a\u63d0\u5021\u4f7f\u7528 goto\uff0c\u6765\u56de\u8df3\u4f1a\u5bfc\u81f4\u4ee3\u7801\u53ef\u8bfb\u6027\u964d\u4f4e\u3002 go \u652f\u6301\u6807\u7b7e\u8bed\u6cd5(label)\uff0c\u5b9e\u9645\u4e0a break/goto/continue \u540e\u8fb9\u90fd\u53ef\u4ee5\u8ddf\u4e0a label\uff0c\u6bd4\u5982\u4e00\u79cd\u4f7f\u7528\u573a\u666f\u662f\u5f53\u6df1\u5c42\u5d4c\u5957\u7684 for \u5faa\u73af\u60f3\u8981\u76f4\u63a5\u5feb\u901f\u9000\u51fa\u6240\u6709\u5faa\u73af\u4f53\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 break \u6807\u7b7e\u8bed\u6cd5\u6765\u5b9e\u73b0\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 package main import \"fmt\" func main () { var i , j int // loop \u6807\u7b7e\u3002\u6ce8\u610f break\u548ccontinue \u7684\u6807\u7b7e\u9700\u8981\u5728\u4ee3\u7801\u5757\u524d\u8fb9\uff0cgoto \u6ca1\u6709\u8fd9\u4e2a\u9650\u5236 loop : for i = 0 ; i < 10 ; i ++ { for j = 0 ; j < 3 ; j ++ { if i + j > 3 { // \u5982\u679c i + j > 3 \uff0c\u8df3\u51fa\u6240\u6709\u5faa\u73af break loop } fmt . Printf ( \"i[%d] j[%d] i+j[%d]\\n\" , i , j , i + j ) } } fmt . Println ( i + j ) } \u518d\u6765\u770b\u4e00\u4e2a\u4f7f\u7528 goto \u8df3\u8f6c\u7684\u4f8b\u5b50\uff0c\u5982\u679c\u6ee1\u8db3\u6761\u4ef6\uff0c\u76f4\u63a5\u8df3\u8f6c\u5230\u6807\u7b7e\u7684\u5730\u65b9\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 package main import \"fmt\" func main () { var i , j int for i = 0 ; i < 10 ; i ++ { for j = 0 ; j < 3 ; j ++ { if i + j > 3 { // \u5982\u679c i + j > 3 \uff0c\u8df3\u51fa\u6240\u6709\u5faa\u73af goto exit } } } exit : fmt . Println ( i + j ) } \u5c0f\u7ed3 \u00b6 go \u7684\u63a7\u5236\u6d41\u76f8\u6bd4\u5176\u4ed6\u8bed\u8a00\u6765\u8bf4\u66f4\u52a0\u7b80\u5355\uff0c\u6bd4\u5982\u8fde while \u90fd\u6ca1\u6709\u63d0\u4f9b\uff0c\u76f4\u63a5\u7528\u4e00\u4e2a for \u6765\u89e3\u51b3\u3002\u672c\u7ae0\u8fd8\u6ca1\u6709\u4ecb\u7ecd select\uff0c\u6211\u4eec\u5c06\u5728\u540e\u7eed\u4ecb\u7ecd\u5230 channel \u548c\u5e76\u53d1\u7f16\u7a0b\u7684\u65f6\u5019\u4ecb\u7ecd select \u7684\u4f7f\u7528\u3002 \u5b66\u4f1a\u4e86\u6d41\u7a0b\u63a7\u5236\u4e4b\u540e\uff0c\u4e0b\u4e00\u7ae0\u6211\u4eec\u6765\u770b\u4e0b\u51fd\u6570\uff0c\u51fd\u6570\u662f\u7f16\u5199\u5927\u578b\u9879\u76ee\u7684\u57fa\u7840\u3002","title":"Go \u63a7\u5236\u6d41\u8bed\u53e5"},{"location":"basics/04_go_control_flow/go_procedural/#go","text":"Quote \u201cGo doesn\u2019t implicitly anything.\u201d \u2013 Steven in golang-nuts","title":"\u5b66\u4e60 go \u7684\u8fc7\u7a0b\u5f0f\u7f16\u7a0b"},{"location":"basics/04_go_control_flow/go_procedural/#_1","text":"\u5f88\u591a\u73b0\u4ee3\u5316\u7f16\u7a0b\u8bed\u8a00\u57fa\u672c\u90fd\u652f\u6301\u591a\u79cd\u7f16\u7a0b\u8303\u5f0f\uff0c\u6bd4\u5982 \u8fc7\u7a0b\u5f0f \u3001\u51fd\u6570\u5f0f\u3001\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u7b49\u3002\u672c\u7ae0\u6211\u4eec\u6765\u4ecb\u7ecd go \u8bed\u8a00\u4e2d\u7684\u63a7\u5236\u6d41\u8bed\u53e5\uff0c\u719f\u6089\u5b83\u4eec\u4e3a\u6211\u4eec\u7f16\u5199\u51fd\u6570\u6253\u597d\u57fa\u7840\u3002","title":"\u8fc7\u7a0b\u5f0f\u7f16\u7a0b"},{"location":"basics/04_go_control_flow/go_procedural/#go_1","text":"\u5bf9\u4e8e\u5f88\u591a\u5e38\u89c1\u7684\u7f16\u7a0b\u8bed\u8a00\u6765\u8bf4\uff0c\u63a7\u5236\u6d41\u8bed\u53e5\u662f\u5b9e\u73b0\u8fc7\u7a0b\u5f0f\u7f16\u7a0b\u7684\u57fa\u7840\uff0c\u6700\u5e38\u89c1\u7684\u5c31\u662f\u5206\u4e4b\u548c\u5faa\u73af\uff0c\u6bd4\u5982\u5f88\u591a\u7f16\u7a0b\u8bed\u8a00\u4e2d\u90fd\u6709 if/else/elseif/switch/while/for \u7b49\u5173\u952e\u8bcd\u7528\u6765\u5b9e\u73b0\u5206\u4e4b\u548c\u5faa\u73af\u3002\u4e0d\u540c\u7684\u7f16\u7a0b\u8bed\u8a00\u4f7f\u7528\u5b83\u4eec\u57fa\u672c\u4e0a\u4e5f\u90fd\u662f\u5927\u540c\u5c0f\u5f02\uff0c\u672c\u7ae0\u6211\u4eec\u6765\u770b\u4e0b\u5728 go \u8bed\u8a00\u4e2d\u5982\u4f55\u5b9e\u73b0\u5b83\u4eec\u3002","title":"Go \u63a7\u5236\u6d41\u8bed\u53e5"},{"location":"basics/04_go_control_flow/go_procedural/#_2","text":"go \u8bed\u8a00\u63d0\u4f9b\u4e86\u4e09\u79cd\u5206\u4e4b\u65b9\u5f0f\uff0cif/switch/select\uff0c\u5206\u522b\u6765\u770b\u4e0b\u5b83\u4eec\u7684\u4f7f\u7528\u65b9\u5f0f\u548c\u6ce8\u610f\u4e8b\u9879\u3002","title":"\u5206\u4e4b"},{"location":"basics/04_go_control_flow/go_procedural/#if","text":"if/else if/else \u4f7f\u7528\u8d77\u6765\u548c python \u7684\u975e\u5e38\u50cf\uff0c\u5b83\u7684\u683c\u5f0f\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 if optionalStatement1 ; booleanExpression1 { block1 } else if optionalStatement2 ; booleanExpression2 { block2 } else { block3 } \u6709\u51e0\u70b9\u9700\u8981\u6ce8\u610f\u7684\uff1a \u4e0d\u50cf c \u8bed\u8a00\uff0cif \u6761\u4ef6\u53ea\u80fd\u662f\u4e00\u4e2a bool \u503c\u6216\u8005\u8fd4\u56de bool \u503c\u5f97\u8868\u8fbe\u5f0f\uff0c\u800c\u4e0d\u80fd\u662f int (c/python \u53ef\u4ee5) if \u540e\u8fb9\u662f\u53ef\u4ee5\u5148\u8ddf\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u6bd4\u5982\u4e4b\u524d\u6211\u4eec\u89c1\u5230\u7684\u83b7\u53d6 map \u503c\u7684 if v,ok := m[key]; ok {} \u51e0\u4e2a\u5c0f\u793a\u4f8b\u5feb\u901f\u5165\u95e8\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 func testIf () { ok := true if ok { fmt . Println ( \"ok is true\" ) } day := \"Friday\" if day == \"Friday\" { fmt . Println ( \"\u660e\u5929\u4e0d\u4e0a\u73ed\u5440!\" ) } else if day == \"Sunday\" { fmt . Println ( \"\u5468\u672b\u597d\u5feb\" ) } else { fmt . Println ( \"\u5e72\u6d3b\u5566\" ) } m := make ( map [ string ] string ) m [ \"\u738b\u516b\" ] = \"\u7eff\u8c46\" if v , ok := m [ \"\u738b\u516b\" ]; ok { fmt . Println ( v ) } }","title":"if \u8bed\u53e5"},{"location":"basics/04_go_control_flow/go_procedural/#switchcase","text":"go \u91cc\u6539\u5584\u4e86 c \u8bed\u8a00\u7684switch\uff0c\u6bd4\u5982\u6211\u4eec\u4e0d\u7528\u6bcf\u4e00\u4e2a case \u90fd\u8981\u52a0\u4e0a break\uff08\u5f88\u591a bug \u90fd\u662f\u56e0\u4e3a\u7c97\u5fc3\u7684\u7a0b\u5e8f\u5458\u5fd8\u8bb0\u52a0\u4e0a break \u5bfc\u81f4\u7684\uff0cgo \u4e2d\u4f60\u518d\u4e5f\u4e0d\u7528\u62c5\u5fc3\u5566\uff09\u3002go \u8bed\u8a00\u4e2d switch \u8bed\u6cd5\u5982\u4e0b\uff1a 1 2 3 4 5 6 switch optionalStatement ; optionalExpression { case expressionList1 : block1 \u2026 case expressionListN : blockN default : blockD } \u9700\u8981\u6ce8\u610f\u7684\u51e0\u70b9\u662f\uff1a case \u8bed\u53e5\u4e0d\u7528\u52a0\u4e0a break\uff0c\u4e0d\u50cf c \u4e0d\u4f1a\u53bb\u81ea\u52a8\u6267\u884c\u4e0b\u4e00\u4e2a case\uff0c\u9664\u975e\u4f60\u663e\u793a\u4f7f\u7528 fallthrough \u8bed\u53e5\u6307\u5b9a\uff08\u7528\u7684\u4e0d\u591a) default \u8bed\u53e5\u662f\u53ef\u9009\u7684\uff0c\u5982\u679c\u90fd\u6ca1\u6709\u5339\u914d\uff0c\u53ef\u4ee5\u7ed9\u4e00\u4e2a\u9ed8\u8ba4\u884c\u4e3a \u6765\u770b\u51e0\u4e2a\u5c0f\u7684\u793a\u4f8b\u5feb\u901f\u5165\u95e8\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 func testSwitch () { // \u5e38\u89c4\u7528\u6cd5 day := 0 switch day { case 0 , 6 : fmt . Println ( \"\u5468\u672b\" ) case 1 , 2 , 3 , 4 , 5 : fmt . Println ( \"\u5de5\u4f5c\u65e5\" ) default : fmt . Println ( \"\u4e0d\u5408\u6cd5\" ) } // case \u540e\u8fb9\u8fd8\u53ef\u4ee5\u662f\u8868\u8fbe\u5f0f a , b := 1 , 2 a , b = b , a switch { case a < b : fmt . Println ( \"a < b\" ) case a > b : fmt . Println ( \"a > b\" ) } }","title":"switch/case"},{"location":"basics/04_go_control_flow/go_procedural/#_3","text":"\u518d\u6765\u770b\u4e0b\u5faa\u73af\uff0c\u548c\u5176\u4ed6\u8bed\u8a00\u4e0d\u540c\u7684\u662f\uff0cgo \u53ea\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5173\u952e\u8bcd for \u6765\u5b9e\u73b0\u5faa\u73af\uff08\u6ca1\u6709 while \u548c do while\uff09\uff0c\u662f\u4e0d\u662f\u975e\u5e38\u541d\u556c\u3002 \u4e0d\u8fc7\u4f60\u4f1a\u53d1\u73b0\u5176\u5b9e\u53ea\u8981\u4e00\u4e2a for \u5c31\u53ef\u4ee5\u6ee1\u8db3\u9700\u6c42\u4e86\uff0c\u5f53\u7136\u5b83\u63d0\u4f9b\u4e86\u51e0\u79cd\u4e0d\u540c\u7684\u4f7f\u7528\u65b9\u5f0f\uff0c\u6765\u7785\u7785\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // \u5e38\u89c4\u7528\u6cd5\uff0c\u548c\u5176\u4ed6\u8bed\u8a00\u7c7b\u4f3c for optionalPreStatement ; booleanExpress ; optionalPostStatement { block } // \u65e0\u9650\u5faa\u73af\uff0cblock \u4f1a\u88ab\u4e00\u76f4\u91cd\u590d\u6267\u884c for { block } // \u5b9e\u73b0while\u5faa\u73af\uff0cblock \u4e00\u76f4\u6267\u884c\u76f4\u5230 \u8868\u8fbe\u5f0f\u4e3afalse for booleanExpression { block } \u6b64\u5916 for/range \u8bed\u6cd5\u8fd8\u652f\u6301\u8ba9\u6211\u53bb\u8fed\u4ee3\u5b57\u7b26\u4e32\uff0c\u6570\u7ec4\uff0c\u5207\u7247\uff0cmap \u6216\u8005\u901a\u9053(channel)\uff0c\u4e4b\u524d\u5176\u5b9e\u5df2\u7ecf\u7528\u8fc7\u597d\u591a\u6b21\u4e86\uff0c\u8bf7\u770b\u51e0\u4e2a\u4f8b\u5b50\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 func testFor () { intSlice := [] int { 3 , 2 , 1 } for index , item := range intSlice { fmt . Println ( index , item ) } for index := range intSlice { // \u7701\u7565 item \u4e4b\u540e\u904d\u5386\u7684\u662f key\uff0c\u6ce8\u610f\u4e0d\u50cfpython \u76f4\u63a5\u904d\u5386\u503c fmt . Println ( index ) } m := map [ string ] string { \"k1\" : \"v1\" , \"k2\" : \"v2\" } for k , v := range m { fmt . Println ( k , v ) } for k := range m { fmt . Println ( k ) } } \u5982\u4f55\u8df3\u51fa\u5faa\u73af\u5462\uff1f\u548c\u5f88\u591a\u7f16\u7a0b\u8bed\u8a00\u4e00\u6837\uff0cgo \u4f7f\u7528 break \u548c continue \u5206\u522b\u8df3\u51fa\u6216\u8005\u8fdb\u5165\u4e0b\u4e00\u4e2a\u5faa\u73af\uff0c\u76f8\u4fe1\u4f60\u5df2\u7ecf\u975e\u5e38\u719f\u6089\u4e86\u3002 \u5176\u5b9e break \u548c continue \u8fd8\u652f\u6301\u540e\u8fb9\u8ddf\u4e00\u4e2a\u8df3\u8f6c\u6807\u7b7e\uff0c\u4f46\u662f\u4e00\u822c\u4ee3\u7801\u4e2d\u7528\u5f97\u6bd4\u8f83\u5c11\uff0c\u4f60\u53ea\u9700\u8981\u77e5\u9053\u8fd8\u6709\u8fd9\u4e2a\u529f\u80fd\uff0c \u4e07\u4e0d\u5f97\u5df2\u9700\u8981\u4f7f\u7528\u7684\u65f6\u5019\u518d google \u5c31\u597d\uff0c\u4f60\u5f88\u53ef\u80fd\u6c38\u8fdc\u90fd\u7528\u4e0d\u5230\u8fd9\u4e2a\u3002","title":"\u5faa\u73af"},{"location":"basics/04_go_control_flow/go_procedural/#goto","text":"go \u548c c \u4e00\u6837\u652f\u6301 goto \u8bed\u53e5\uff0c\u4f46\u662f\u6839\u636e\u7b14\u8005\u7684\u7ecf\u9a8c\uff0c\u4e1a\u52a1\u4ee3\u7801\u4e2d\u5176\u5b9e\u7528\u7684\u6bd4\u8f83\u5c11\uff0c\u5927\u90e8\u5206\u903b\u8f91\u6211\u4eec\u4e0d\u7528 goto \u5c31\u53ef\u4ee5\u5904\u7406\u3002 \u9664\u4e86\u6781\u5c11\u6570\u60c5\u51b5\u5916\uff0c\u4e0d\u592a\u63d0\u5021\u4f7f\u7528 goto\uff0c\u6765\u56de\u8df3\u4f1a\u5bfc\u81f4\u4ee3\u7801\u53ef\u8bfb\u6027\u964d\u4f4e\u3002 go \u652f\u6301\u6807\u7b7e\u8bed\u6cd5(label)\uff0c\u5b9e\u9645\u4e0a break/goto/continue \u540e\u8fb9\u90fd\u53ef\u4ee5\u8ddf\u4e0a label\uff0c\u6bd4\u5982\u4e00\u79cd\u4f7f\u7528\u573a\u666f\u662f\u5f53\u6df1\u5c42\u5d4c\u5957\u7684 for \u5faa\u73af\u60f3\u8981\u76f4\u63a5\u5feb\u901f\u9000\u51fa\u6240\u6709\u5faa\u73af\u4f53\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 break \u6807\u7b7e\u8bed\u6cd5\u6765\u5b9e\u73b0\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 package main import \"fmt\" func main () { var i , j int // loop \u6807\u7b7e\u3002\u6ce8\u610f break\u548ccontinue \u7684\u6807\u7b7e\u9700\u8981\u5728\u4ee3\u7801\u5757\u524d\u8fb9\uff0cgoto \u6ca1\u6709\u8fd9\u4e2a\u9650\u5236 loop : for i = 0 ; i < 10 ; i ++ { for j = 0 ; j < 3 ; j ++ { if i + j > 3 { // \u5982\u679c i + j > 3 \uff0c\u8df3\u51fa\u6240\u6709\u5faa\u73af break loop } fmt . Printf ( \"i[%d] j[%d] i+j[%d]\\n\" , i , j , i + j ) } } fmt . Println ( i + j ) } \u518d\u6765\u770b\u4e00\u4e2a\u4f7f\u7528 goto \u8df3\u8f6c\u7684\u4f8b\u5b50\uff0c\u5982\u679c\u6ee1\u8db3\u6761\u4ef6\uff0c\u76f4\u63a5\u8df3\u8f6c\u5230\u6807\u7b7e\u7684\u5730\u65b9\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 package main import \"fmt\" func main () { var i , j int for i = 0 ; i < 10 ; i ++ { for j = 0 ; j < 3 ; j ++ { if i + j > 3 { // \u5982\u679c i + j > 3 \uff0c\u8df3\u51fa\u6240\u6709\u5faa\u73af goto exit } } } exit : fmt . Println ( i + j ) }","title":"goto"},{"location":"basics/04_go_control_flow/go_procedural/#_4","text":"go \u7684\u63a7\u5236\u6d41\u76f8\u6bd4\u5176\u4ed6\u8bed\u8a00\u6765\u8bf4\u66f4\u52a0\u7b80\u5355\uff0c\u6bd4\u5982\u8fde while \u90fd\u6ca1\u6709\u63d0\u4f9b\uff0c\u76f4\u63a5\u7528\u4e00\u4e2a for \u6765\u89e3\u51b3\u3002\u672c\u7ae0\u8fd8\u6ca1\u6709\u4ecb\u7ecd select\uff0c\u6211\u4eec\u5c06\u5728\u540e\u7eed\u4ecb\u7ecd\u5230 channel \u548c\u5e76\u53d1\u7f16\u7a0b\u7684\u65f6\u5019\u4ecb\u7ecd select \u7684\u4f7f\u7528\u3002 \u5b66\u4f1a\u4e86\u6d41\u7a0b\u63a7\u5236\u4e4b\u540e\uff0c\u4e0b\u4e00\u7ae0\u6211\u4eec\u6765\u770b\u4e0b\u51fd\u6570\uff0c\u51fd\u6570\u662f\u7f16\u5199\u5927\u578b\u9879\u76ee\u7684\u57fa\u7840\u3002","title":"\u5c0f\u7ed3"},{"location":"basics/05_func/func/","text":"\u521d\u63a2 go \u51fd\u6570 \u00b6 Quote \u201cGo is not meant to innovate programming theory. It\u2019s meant to innovate programming practice.\u201d \u2013 Samuel Tesla \u51fd\u6570\u4ecb\u7ecd \u00b6 \u51fd\u6570\u53ef\u4ee5\u8bf4\u662f\u5f00\u53d1\u5927\u578b\u8f6f\u4ef6\u7684\u57fa\u77f3\uff0c\u4e5f\u662f\u5c01\u88c5\u4ee3\u7801\u7684\u57fa\u672c\u5355\u4f4d\u3002\u5728\u4e00\u4e9b\u6bd4\u8f83\u8001\u7684\u4e0d\u652f\u6301 oop \u7684\u7f16\u7a0b\u8bed\u8a00\u4e2d\uff0c\u6b63\u662f\u4e00\u4e2a\u4e2a\u51fd\u6570\u6784\u5efa\u8d77\u6765\u5927\u578b\u8f6f\u4ef6\u3002 \u5176\u5b9e\u4e4b\u524d\u7684\u4ee3\u7801\u4e2d\u5df2\u7ecf\u7b80\u5355\u4f7f\u7528\u8fc7\u51fd\u6570\uff0c\u6bd4\u5982\u6211\u4eec\u9488\u5bf9\u6bcf\u4e00\u79cd\u8bed\u6cd5\u7279\u6027\u90fd\u5199\u4e86\u4e00\u4e2a\u53eb\u505a func testXXX \u7684\u51fd\u6570\u6765\u5728 main \u51fd\u6570\u91cc\u8c03\u7528\u770b\u6267\u884c\u7ed3\u679c\u3002 \u672c\u7ae0\u6765\u5206\u4eab\u4e00\u4e9b\u4e1a\u52a1\u5f00\u4e2d\u5e38\u7528\u7684 go \u51fd\u6570\u7684\u8bed\u6cd5\u7279\u6027\u5e2e\u52a9\u4f60\u5feb\u901f\u4e0a\u624b\uff0c\u5b66\u4f1a\u51fd\u6570\u4e4b\u540e\u5c31\u53ef\u4ee5\u5f00\u59cb\u5b9e\u73b0\u903b\u8f91\u5c01\u88c5\u4e86\u3002 \u5982\u4f55\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570 \u00b6 go \u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u6bd4\u8f83\u7b80\u5355\uff0c\u8bed\u6cd5\u5982\u4e0b\uff1a 1 2 3 4 // optionalParameters \u662f (param1 type1, param2 type2 ...) \u8fd9\u79cd\u5f62\u5f0f func functionName ( optionalParameters ) optionalReturnType { body } \u6765\u770b\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u51fd\u6570\uff0c\u8ba1\u7b97\u4e24\u4e2a\u6570\u5b57\u4e4b\u548c\uff1a 1 2 3 func sum0 ( a int , b int ) int { return a + b } \u662f\u4e0d\u662f\u5f88\u7b80\u5355\uff0c\u6709\u4e2a\u5c0f\u6280\u5de7\u5c31\u662f\u5982\u679c\u591a\u4e2a\u53c2\u6570\u7c7b\u578b\u4e00\u81f4\uff0c\u53ef\u4ee5\u53ea\u5199\u4e00\u4e2a\u7c7b\u578b\u58f0\u660e\uff0c\u6bd4\u5982\uff1a 1 2 3 func sum1 ( a , b int ) int { return a + b } \u6211\u4eec\u751a\u81f3\u8fd8\u53ef\u4ee5\u7ed9\u8fd4\u56de\u503c\u547d\u540d\uff0c\u8fd9\u4e2a\u65f6\u5019\u9700\u8981\u901a\u8fc7\u8d4b\u503c\u7684\u65b9\u5f0f\u6765\u66f4\u65b0\u7ed3\u679c\uff0c\u800c\u4e14 return \u53ef\u4ee5\u4e0d\u7528\u5e26\u8fd4\u56de\u503c 1 2 3 4 func sum2 ( a , b int ) ( res int ) { res = a + b return } go \u8fd8\u652f\u6301\u53ef\u53d8\u53c2\u6570\uff0c\u5728 python \u91cc\u6211\u4eec\u77e5\u9053\u4f7f\u7528\u7684\u662f *args \uff0c\u5728 go \u91cc\u8fb9\u4f7f\u7528\u4e09\u4e2a\u7701\u7565\u53f7\u6765\u5b9e\u73b0\uff0c \u6bd4\u5982\u60f3\u8981\u8ba1\u7b97 n \u4e2a int \u6570\u5b57\u4e4b\u548c\uff0c\u53ef\u4ee5\u8fd9\u4e48\u5199\uff1a(\u6ce8\u610f\u53ef\u53d8\u53c2\u6570\u5176\u5b9e\u88ab\u5305\u88c5\u6210\u4e86\u4e00\u4e2a slice) 1 2 3 4 5 6 7 8 9 func sum3 ( init int , vals ... int ) int { sum := init for _ , val := range vals { // vals is []int sum += val } return sum } // fmt.Println(sum3(0, 1, 2, 3)) // fmt.Println(sum3(0, []int{1,2,3}...)) // \u8fd8\u53ef\u4ee5\u89e3\u5305\u4e00\u4e2a slice \u6765\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\uff0c\u7ed9\u4e00\u4e2a slice \u52a0\u4e0a\u4e09\u4e2a\u7701\u7565\u53f7 \u518d\u8fdb\u4e00\u6b65\uff0c\u51fd\u6570\u8fd8\u53ef\u4ee5\u8fd4\u56de\u591a\u4e2a\u503c\uff0c\u8fd9\u4e2a\u76f8\u6bd4 c \u6765\u8bf4\u975e\u5e38\u65b9\u4fbf\uff0c\u6bd4\u5982\u9664\u4e86 sum \u4e4b\u5916\u6211\u4eec\u518d\u8fd4\u56de\u4e00\u4e2a\u53ef\u53d8\u53c2\u6570\u7684\u4e2a\u6570\uff1a (\u5176\u5b9e go \u6700\u540e\u4e00\u4e2a\u53c2\u6570\u7ecf\u5e38\u7528\u6765\u8fd4\u56de\u9519\u8bef\u7c7b\u578b\uff0c\u8fd9\u4e2a\u4e4b\u540e\u8ba8\u8bba\u9519\u8bef\u5904\u7406\u7684\u65f6\u5019\u518d\u6d89\u53ca) 1 2 3 4 5 6 7 8 func sum4 ( init int , vals ... int ) ( int , int ) { sum := init fmt . Println ( vals , len ( vals )) for _ , val := range vals { sum += val } return sum , len ( vals ) } \u8fd9\u5927\u6982\u5c31\u662f\u51fd\u6570\u5b9a\u4e49\u7684\u5e38\u89c1\u65b9\u5f0f\uff0c\u867d\u7136\u5b83\u4eec\u5f62\u5f0f\u4e0a\u5f88\u7b80\u5355\uff0c\u4f46\u5176\u5b9e\u5df2\u7ecf\u5305\u542b\u4e86\u5f88\u591a\u57fa\u672c\u7684\u8981\u7d20\uff0c\u5176\u4ed6\u590d\u6742\u7684\u51fd\u6570\u65e0\u975e\u662f\u66f4\u591a\u7684\u53c2\u6570\uff0c \u66f4\u52a0\u590d\u6742\u7684\u53c2\u6570\u6216\u8005\u8fd4\u56de\u503c\u7c7b\u578b\u800c\u5df2\u3002 \u6cdb\u578b \u00b6 \u5148\u5356\u4e2a\u5173\u5b50\uff0cgo \u76ee\u524d\u4e3a\u6b62\u8fd8\u6ca1\u6709\u76f4\u63a5\u63d0\u4f9b\u6cdb\u578b\u652f\u6301\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7a7a\u63a5\u53e3 interface{} \u6765\u5b9e\u73b0\uff0c\u4e4b\u540e\u8bb2\u5230\u63a5\u53e3\u7684\u65f6\u5019\u6211\u4eec\u518d\u6765\u770b\u5982\u4f55\u5b9e\u73b0\u3002 \u9ed8\u8ba4\u53c2\u6570 \u00b6 \u5f88\u9057\u61be\uff0cgo \u5f00\u53d1\u8005\u8001\u987d\u56fa\u4eec\u62d2\u7edd\u652f\u6301\u9ed8\u8ba4\u53c2\u6570\uff0c\u4e0d\u8fc7\u5012\u662f\u6709\u4e00\u4e9b\u6bd4\u8f83 trick \u7684\u65b9\u6cd5\u6765\u5b9e\u73b0\u3002 \u4e00\u79cd\u662f\u901a\u8fc7\u4f20\u9012\u96f6\u503c\u5e76\u4e14\u4ee3\u7801\u91cc\u5224\u65ad\u662f\u5426\u662f\u96f6\u503c\u6765\u5b9e\u73b0\uff0c\u53e6\u4e00\u79cd\u662f\u901a\u8fc7\u4f20\u9012\u4e00\u4e2a\u7ed3\u6784\u4f53\u6765\u5b9e\u73b0(\u7ed3\u6784\u4f53\u7ae0\u8282\u518d\u8bb2)\u3002 1 2 3 4 5 6 7 8 9 10 11 12 // https://stackoverflow.com/questions/19612449/default-value-in-gos-method // \u53ef\u4ee5\u901a\u8fc7\u4f20\u9012\u96f6\u503c\u6216\u8005 nil \u7684\u65b9\u5f0f\u6765\u5224\u65ad\u3002 // Both parameters are optional, use empty string for default value func Concat1 ( a string , b int ) string { if a == \"\" { a = \"default-a\" } if b == 0 { b = 5 } return fmt . Sprintf ( \"%s%d\" , a , b ) } \u51fd\u6570\u7684\u4f20\u53c2 \u00b6 \u6bcf\u5f53\u5b66\u4e60\u4e00\u95e8\u65b0\u8bed\u8a00\u7684\u65f6\u5019\uff0c\u6211\u90fd\u4f1a\u7559\u610f\u4e0b\u51fd\u6570\u7684\u4f20\u503c\u95ee\u9898\uff0c\u7a76\u7adf\u662f\u503c\u4f20\u9012(\u6df1\u62f7\u8d1d\u53c2\u6570\u7684\u503c)\u8fd8\u662f\u5f15\u7528\u4f20\u9012(\u4f20\u5165\u6307\u9488)\u3002 \u8fd9\u4e24\u79cd\u53c2\u6570\u4f20\u9012\u65b9\u5f0f\u6700\u5927\u7684\u533a\u522b\u5c31\u662f\u6211\u4eec\u662f\u5426\u53ef\u4ee5\u4fee\u6539\u4f20\u5165\u53c2\u6570\u7684\u503c\u3002 \u5148\u6765\u770b\u4e00\u4e2a\u5c0f\u4f8b\u5b50\uff0c\u5c1d\u8bd5\u4f20\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\u7136\u540e\u4fee\u6539\u5b83\uff0c\u770b\u770b\u662f\u5426\u8d77\u4f5c\u7528\uff1a 1 2 3 4 5 6 7 8 9 func changeStr ( s string ) { s = \"hehe\" fmt . Println ( s ) } func main () { name := \"lao wang\" changeStr ( name ) fmt . Println ( name ) // \u6253\u5370\u51fa\u6765\u8fd8\u662f \"lao wang\"\uff0c\u6ca1\u6709\u4fee\u6539\u6210\u529f\uff0c\u4f3c\u4e4e\u662f\u300e\u503c\u4f20\u9012\u300f } \u770b\u8d77\u6765\u4f3c\u4e4e\u662f\u503c\u4f20\u9012\uff0c\u5e76\u6ca1\u6709\u4fee\u6539\u4f20\u5165\u7684\u503c\u3002\u597d\uff0c\u5982\u679c\u4f60\u90a3\u4e48\u8ba4\u4e3a\uff0c\u90a3\u518d\u8bd5\u8bd5\u5982\u679c\u6211\u4eec\u4f20\u9012\u4e00\u4e2a map \u4f5c\u4e3a\u53c2\u6570\u5462\uff1f 1 2 3 4 5 6 7 8 9 func changeMap ( m map [ string ] string ) { m [ \"\u738b\u516b\" ] = \"\u7eff\u8c46\" } func main () { m := map [ string ] string { \"name\" : \"lao wang\" } changeMap ( m ) fmt . Println ( m ) // map[name:lao wang \u738b\u516b:\u7eff\u8c46], \u4f3c\u4e4e\u53c8\u53ef\u4ee5\u4fee\u6539\u4e86\uff0c\u51fd\u6570\u91cc\u7684\u4fee\u6539\u8d77\u4f5c\u7528\u4e86 } \u4f60\u4f1a\u53d1\u73b0\u6211\u4eec\u53ef\u4ee5\u4fee\u6539 map \u7684\u503c\u3002\u5176\u5b9e\u8bb0\u4f4f\u4ee5\u4e0b\u8fd9\u4e9b\u4f60\u5c31\u77e5\u9053\u4ec0\u4e48\u65f6\u5019\u53ef\u4ee5\u4fee\u6539\u4f20\u5165\u7684\u53c2\u6570\u4e86\uff1a \u5185\u7f6e\u7c7b\u578b\uff1a\u6570\u503c\u7c7b\u578b\u3001\u5b57\u7b26\u4e32\u3001\u5e03\u5c14\u7c7b\u578b\u3001\u6570\u7ec4\u3002\u4f20\u9012\u7684\u662f\u526f\u672c (\u6240\u4ee5\u4e00\u822c\u4e0d\u7528\u6570\u7ec4\u5566)\uff0c\u4f1a\u62f7\u8d1d\u539f\u59cb\u503c\uff0c\u65e0\u6cd5\u4fee\u6539 \u5f15\u7528\u7c7b\u578b: \u5207\u7247\u3001\u6620\u5c04\u3001\u901a\u9053\u3001\u63a5\u53e3\u548c\u51fd\u6570\u7c7b\u578b\u3002\u901a\u8fc7\u590d\u5236\u4f20\u9012\u5e94\u7528\u7c7b\u578b\u503c\u7684\u526f\u672c\uff0c\u672c\u8d28\u4e0a\u5c31\u662f\u5171\u4eab\u5e95\u5c42\u6570\u636e\u7ed3\u6784\u3002\u53ef\u4ee5\u4fee\u6539 \u8fd9\u91cc\u5176\u5b9e map/slice \u7b49\u4e5f\u662f\u4f20\u9012\u7684\u526f\u672c\uff0c\u4e3a\u5565\u5b83\u4eec\u5c31\u53ef\u4ee5\u4fee\u6539\u5462\uff1f\u6211\u4eec\u4ee5 slice \u4e3e\u4f8b\uff0c\u5b83\u7684\u5185\u90e8\u5b9e\u73b0\u5176\u5b9e\u662f\u8fd9\u6837\u7684\uff0c\u5e95\u5c42\u5b9e\u73b0\u5305\u542b\u4e00\u4e2a\u6307\u5411\u6570\u7ec4\u7684\u6307\u9488(ptr), \u4e00\u4e2a\u957f\u5ea6 len \u548c\u5bb9\u91cf cap \uff0c\u4f20\u53c2\u7684\u65f6\u5019\u5b9e\u9645\u4e0a\u662f slice \u8fd9\u4e2a\u7ed3\u6784\u4f53\u7684\u62f7\u8d1d(\u53ea\u6709\u4e09\u4e2a\u5143\u7d20\u800c\u4e0d\u662fcopy\u6240\u6709\u7684\u5e95\u5c42\u6570\u7ec4\u91cc\u7684\u503c)\uff0c\u6240\u4ee5\u590d\u5236\u5f88\u8f7b\u91cf\uff0c\u800c\u4e14\u901a\u8fc7\u5e95\u5c42\u7684\u6307\u9488\u4e5f\u53ef\u4ee5\u5b9e\u73b0\u4fee\u6539\u3002 1 2 3 4 5 6 // https://golang.org/src/runtime/slice.go type slice struct { array unsafe . Pointer len int cap int } \u6240\u4ee5\u6211\u4eec\u770b\u5230go \u91cc\u8fb9\u6240\u6709\u7684\u51fd\u6570\u53c2\u6570\u90fd\u662f\u503c\u62f7\u8d1d\uff0c\u53ea\u4e0d\u8fc7\u5bf9\u4e8e\u4e00\u4e9b\u590d\u5408\u7ed3\u6784\u56e0\u4e3a\u590d\u5236\u7684\u7ed3\u6784\u4f53\u91cc\u5305\u542b\u6307\u9488\uff0c\u6240\u4ee5\u53ef\u4ee5\u4fee\u6539\u5b83\u7684\u5e95\u5c42\u7ed3\u6784\u3002 \u4f20\u9012\u6307\u9488 \u00b6 \u5982\u679c\u4f60\u5b66\u8fc7c/c++\uff0c\u4f60\u53ef\u80fd\u4f1a\u9047\u5230\u5404\u79cd\u8d39\u89e3\u7684\u6307\u9488\u64cd\u4f5c\u3002go \u4e5f\u6709\u6307\u9488\uff0c\u4f46\u662f go \u91cc\u8fb9\u5927\u5927\u7b80\u5316\u548c\u9650\u5236\u4e86\u6307\u9488\u7684\u4f7f\u7528\uff0c\u6240\u4ee5\u53ea\u8981\u4f60\u77e5\u9053\u6307\u9488\u7684\u57fa\u672c\u6982\u5ff5\u5c31\u53ef\u4ee5\u5e94\u4ed8\u51e0\u4e4e\u6240\u6709\u573a\u666f\u4e86\u3002 \u540e\u6587\u8bb2\u7ed3\u6784\u4f53\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5728\u6765\u770b\u4e0b\u5982\u4f55\u4f20\u9012\u901a\u8fc7\u4f20\u9012\u7ed3\u6784\u4f53\u6307\u9488\u6765\u4fee\u6539\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u4f60\u4f1a\u53d1\u73b0\u5927\u90e8\u5206\u6307\u9488\u7684\u4f7f\u7528\u573a\u666f\u90fd\u662f\u9488\u5bf9\u590d\u6742\u7684\u7ed3\u6784\u4f53\u3002 1 2 3 4 5 6 7 8 9 func changeString ( s * string ) { // go \u540c\u6837\u4f7f\u7528 * \u58f0\u660e\u6307\u9488\u7c7b\u578b * s = \"new lao wang\" } func main () { s := \"lao wang\" changeString ( & s ) // go \u548c c \u4e00\u6837\u4f7f\u7528 & \u4f5c\u4e3a\u53d6\u5730\u5740\u64cd\u4f5c\u7b26 fmt . Println ( s ) } \u533f\u540d\u51fd\u6570 \u00b6 \u4e0a\u9762\u6211\u4eec\u770b\u5230\u4e86 go \u51fd\u6570\u7684\u5e38\u89c1\u5b9a\u4e49\u65b9\u5f0f\uff0cgo \u4e2d\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528\u533f\u540d\u51fd\u6570\uff0c\u7ecf\u5e38\u7528\u5728\u4e00\u4e9b\u4e34\u65f6\u7684\u5c0f\u51fd\u6570\u4e2d\uff0c\u6bd4\u5982\u4e0b\u8fb9\u8fd9\u4e2a\u4f8b\u5b50\uff0c \u5b9a\u4e49\u4e00\u4e2a\u533f\u540d\u51fd\u6570\u5e76\u4e14\u6253\u5370\u4f20\u8fdb\u53bb\u7684\u5b57\u7b26\u4e32\uff1a 1 2 3 4 5 func testAnonymousFunc () { func ( s string ) { fmt . Println ( s ) }( \"hehe\" ) } \u51fd\u6570\u7c7b\u578b \u00b6 go \u91cc\u8fb9\u51fd\u6570\u5176\u5b9e\u4e5f\u662f\u300e\u4e00\u7b49\u516c\u6c11\u300f\uff0c\u51fd\u6570\u672c\u8eab\u4e5f\u662f\u4e00\u79cd\u7c7b\u578b\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u7136\u540e\u8d4b\u503c\u7ed9\u4e00\u4e2a\u53d8\u91cf\uff0c\u6bd4\u5982: 1 2 3 4 func testFuncType () { myPrint := func ( s string ) { fmt . Println ( s ) } myPrint ( \"hello go\" ) } \u5982\u6b64\u4e00\u6765 go \u7684\u51fd\u6570\u5b9e\u9645\u4e0a\u4f1a\u975e\u5e38\u7075\u6d3b\uff0c\u6bd4\u5982\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e00\u4e2a map \u503c\u4e3a\u51fd\u6570\u7684\u6620\u5c04\uff1a 1 2 3 4 5 6 7 8 func testMapFunc () { funcMap := map [ string ] func ( int , int ) int { \"add\" : func ( a , b int ) int { return a + b }, \"sub\" : func ( a , b int ) int { return a - b }, } fmt . Println ( funcMap [ \"add\" ]( 3 , 2 )) fmt . Println ( funcMap [ \"sub\" ]( 3 , 2 )) } \u751a\u81f3\u8fd8\u53ef\u4ee5\u4f5c\u4e3a\u51fd\u6570\u7684\u53c2\u6570\u4f20\u9012\u8fdb\u53bb\uff0c\u6bd4\u5982\u8fd9\u4e2a\u4f8b\u5b50\uff1a 1 2 3 4 5 6 7 8 9 func Double ( n int ) int { return n * 2 } func Apply ( n int , f func ( int ) int ) int { return f ( n ) // f \u7684\u7c7b\u578b\u662f \"func(int) int\" } func funcAsParam () { fmt . Println ( Apply ( 10 , Double )) } \u53ef\u4ee5\u770b\u5230 go \u7684\u51fd\u6570\u4f7f\u7528\u8d77\u6765\u662f\u975e\u5e38\u7075\u6d3b\u7684\uff0c\u6709\u4e9b\u5199\u6cd5\u53ef\u80fd\u4f60\u5728\u52a8\u6001\u8bed\u8a00\u4e2d\u624d\u4f1a\u7ecf\u5e38\u770b\u5230\u3002 \u9ad8\u9636\u51fd\u6570 \u00b6 \u5176\u5b9e\u6240\u8c13\u9ad8\u9636\u51fd\u6570\u5c31\u662f\u5c06\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u5176\u4ed6\u51fd\u6570\u4f5c\u4e3a\u81ea\u5df1\u7684\u53c2\u6570\uff0c\u5e76\u5728\u51fd\u6570\u4f53\u91cc\u8c03\u7528\u5b83\u4eec\u3002\u4e0a\u8fb9\u7684\u4f8b\u5b50\u5df2\u7ecf\u6f14\u793a\u5230\u5566\uff0c \u8fd9\u91cc\u6211\u4eec\u518d\u6765\u5199\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b\uff0c\u5728\u5f88\u591a\u8bed\u8a00\u4e2d\u90fd\u53ef\u4ee5\u89c1\u5230\u7684\u8c13\u8bcd\u51fd\u6570\u3002 \u6211\u4eec\u7ecf\u5e38\u60f3\u4ece\u4e00\u4e2a\u6570\u7ec4\u91cc\u8fb9\u83b7\u53d6\u6211\u4eec\u9700\u8981\u7684\u4e00\u7ec4\u6570\u636e\uff0c\u5c31\u53ef\u4ee5\u8fd9\u4e48\u5199\uff0c\u4ece\u4e00\u4e2a\u5207\u7247\u4e2d\u83b7\u53d6\u6240\u6709\u5947\u6570(odd number): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 func FilterIntSlice ( intVals [] int , predicate func ( i int ) bool ) [] int { res := make ([] int , 0 ) for _ , val := range intVals { if predicate ( val ) { res = append ( res , val ) } } return res } func main () { ints := [] int { 1 , 2 , 3 , 4 , 5 } isOdd := func ( i int ) bool { return i % 2 != 0 } // \u662f\u5947\u6570 fmt . Println ( FilterIntSlice ( ints , isOdd )) // [1 3 5] } \u662f\u4e0d\u662f\u5f88\u7b80\u5355\uff0c\u540c\u6837\u6211\u4eec\u8fd8\u53ef\u4ee5\u83b7\u53d6\u6240\u6709\u7684\u5076\u6570\uff0c\u6216\u8005\u6ee1\u8db3\u67d0\u4e9b\u6761\u4ef6\u7684\u6570\u5b57\u3002\u7559\u7ed9\u8bfb\u8005\u4f5c\u4e3a\u5c0f\u7ec3\u4e60 \u95ed\u5305 \u00b6 \u5f88\u591a\u8bed\u8a00\u90fd\u6709\u95ed\u5305\u7684\u6982\u5ff5\uff0c \u6240\u8c13\u95ed\u5305\u5c31\u662f\u4e00\u4e2a\u51fd\u6570\u201c\u6355\u83b7\u201d\u4e86\u548c\u5b83\u5728\u540c\u4e00\u4f5c\u7528\u57df\u7684\u5176\u4ed6\u5e38\u91cf\u548c\u53d8\u91cf\u3002 \u5f53\u95ed\u5305\u88ab\u8c03\u7528\u7684\u65f6\u5019\uff0c\u4e0d\u7ba1\u5728\u7a0b\u5e8f\u4ec0\u4e48\u5730\u65b9\u8c03\u7528\uff0c\u95ed\u5305\u80fd\u591f\u4f7f\u7528\u8fd9\u4e9b\u5e38\u91cf\u6216\u8005\u53d8\u91cf\uff0c\u5e76\u4e14\u53ea\u8981\u95ed\u5305\u8fd8\u5728\u4f7f\u7528\u5b83\uff0c\u8fd9\u4e9b\u53d8\u91cf\u5c31\u4e0d\u4f1a\u9500\u6bc1\uff0c\u4e00\u76f4\u5b58\u5728\u3002 \u4e0a\u6587\u4e2d\u63d0\u5230\u7684\u533f\u540d\u51fd\u6570\u5176\u5b9e\u5c31\u662f\u95ed\u5305\u3002\u6765\u770b\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b\uff1a 1 2 3 4 5 6 7 8 // \u95ed\u5305\u793a\u4f8b func testClosure () { suffix := \".go\" addSuffix := func ( name string ) string { return name + suffix // \u8fd9\u91cc\u4f7f\u7528\u5230\u4e86 suffix \u8fd9\u4e2a\u53d8\u91cf\uff0c\u6240\u4ee5 addSuffix \u5c31\u662f\u4e00\u4e2a\u95ed\u5305 } fmt . Println ( addSuffix ( \"hello_world\" )) } \u4e4b\u540e\u518d\u8bb2\u5230 goroutine \u7684\u65f6\u5019\uff0c\u6211\u4eec\u4f1a\u770b\u5230\u4e00\u4e2a for \u5faa\u73af\u91cc\u4f7f\u7528\u95ed\u5305\u7684\u5751\u3002 \u9012\u5f52\u51fd\u6570 \u00b6 \u5982\u679c\u4f60\u5b66\u4e60\u8fc7\u5176\u4ed6\u8bed\u8a00\uff0c\u4e00\u5b9a\u77e5\u9053\u9012\u5f52\uff0c\u5c31\u662f\u81ea\u5df1\u8c03\u7528\u81ea\u5df1\u7684\u51fd\u6570\uff0cgo \u4e5f\u662f\u652f\u6301\u9012\u5f52\u51fd\u6570\u7684\u3002\u6bd4\u5982\u6211\u4eec\u7ecf\u5e38\u770b\u5230\u7684\u6590\u6ce2\u90a3\u5951\u6570\uff1a 1 2 3 4 5 6 func fib ( n int ) int { if n < 2 { return n } return fib ( n - 1 ) + fib ( n - 2 ) } Warning \u9012\u5f52\u9700\u8981\u6ce8\u610f\u7684\u4e00\u70b9\u5c31\u662f\u4e00\u5b9a\u8981\u6709\u4e00\u4e2a\u9012\u5f52\u51fa\u53e3\uff0c\u9632\u6b62\u65e0\u9650\u9012\u5f52\u5bfc\u81f4\u6808\u6ea2\u51fa(stackoverflow) \u53c2\u8003\uff1a \u00b6 Go Slices: usage and internals","title":"Go \u51fd\u6570"},{"location":"basics/05_func/func/#go","text":"Quote \u201cGo is not meant to innovate programming theory. It\u2019s meant to innovate programming practice.\u201d \u2013 Samuel Tesla","title":"\u521d\u63a2 go \u51fd\u6570"},{"location":"basics/05_func/func/#_1","text":"\u51fd\u6570\u53ef\u4ee5\u8bf4\u662f\u5f00\u53d1\u5927\u578b\u8f6f\u4ef6\u7684\u57fa\u77f3\uff0c\u4e5f\u662f\u5c01\u88c5\u4ee3\u7801\u7684\u57fa\u672c\u5355\u4f4d\u3002\u5728\u4e00\u4e9b\u6bd4\u8f83\u8001\u7684\u4e0d\u652f\u6301 oop \u7684\u7f16\u7a0b\u8bed\u8a00\u4e2d\uff0c\u6b63\u662f\u4e00\u4e2a\u4e2a\u51fd\u6570\u6784\u5efa\u8d77\u6765\u5927\u578b\u8f6f\u4ef6\u3002 \u5176\u5b9e\u4e4b\u524d\u7684\u4ee3\u7801\u4e2d\u5df2\u7ecf\u7b80\u5355\u4f7f\u7528\u8fc7\u51fd\u6570\uff0c\u6bd4\u5982\u6211\u4eec\u9488\u5bf9\u6bcf\u4e00\u79cd\u8bed\u6cd5\u7279\u6027\u90fd\u5199\u4e86\u4e00\u4e2a\u53eb\u505a func testXXX \u7684\u51fd\u6570\u6765\u5728 main \u51fd\u6570\u91cc\u8c03\u7528\u770b\u6267\u884c\u7ed3\u679c\u3002 \u672c\u7ae0\u6765\u5206\u4eab\u4e00\u4e9b\u4e1a\u52a1\u5f00\u4e2d\u5e38\u7528\u7684 go \u51fd\u6570\u7684\u8bed\u6cd5\u7279\u6027\u5e2e\u52a9\u4f60\u5feb\u901f\u4e0a\u624b\uff0c\u5b66\u4f1a\u51fd\u6570\u4e4b\u540e\u5c31\u53ef\u4ee5\u5f00\u59cb\u5b9e\u73b0\u903b\u8f91\u5c01\u88c5\u4e86\u3002","title":"\u51fd\u6570\u4ecb\u7ecd"},{"location":"basics/05_func/func/#_2","text":"go \u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u6bd4\u8f83\u7b80\u5355\uff0c\u8bed\u6cd5\u5982\u4e0b\uff1a 1 2 3 4 // optionalParameters \u662f (param1 type1, param2 type2 ...) \u8fd9\u79cd\u5f62\u5f0f func functionName ( optionalParameters ) optionalReturnType { body } \u6765\u770b\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u51fd\u6570\uff0c\u8ba1\u7b97\u4e24\u4e2a\u6570\u5b57\u4e4b\u548c\uff1a 1 2 3 func sum0 ( a int , b int ) int { return a + b } \u662f\u4e0d\u662f\u5f88\u7b80\u5355\uff0c\u6709\u4e2a\u5c0f\u6280\u5de7\u5c31\u662f\u5982\u679c\u591a\u4e2a\u53c2\u6570\u7c7b\u578b\u4e00\u81f4\uff0c\u53ef\u4ee5\u53ea\u5199\u4e00\u4e2a\u7c7b\u578b\u58f0\u660e\uff0c\u6bd4\u5982\uff1a 1 2 3 func sum1 ( a , b int ) int { return a + b } \u6211\u4eec\u751a\u81f3\u8fd8\u53ef\u4ee5\u7ed9\u8fd4\u56de\u503c\u547d\u540d\uff0c\u8fd9\u4e2a\u65f6\u5019\u9700\u8981\u901a\u8fc7\u8d4b\u503c\u7684\u65b9\u5f0f\u6765\u66f4\u65b0\u7ed3\u679c\uff0c\u800c\u4e14 return \u53ef\u4ee5\u4e0d\u7528\u5e26\u8fd4\u56de\u503c 1 2 3 4 func sum2 ( a , b int ) ( res int ) { res = a + b return } go \u8fd8\u652f\u6301\u53ef\u53d8\u53c2\u6570\uff0c\u5728 python \u91cc\u6211\u4eec\u77e5\u9053\u4f7f\u7528\u7684\u662f *args \uff0c\u5728 go \u91cc\u8fb9\u4f7f\u7528\u4e09\u4e2a\u7701\u7565\u53f7\u6765\u5b9e\u73b0\uff0c \u6bd4\u5982\u60f3\u8981\u8ba1\u7b97 n \u4e2a int \u6570\u5b57\u4e4b\u548c\uff0c\u53ef\u4ee5\u8fd9\u4e48\u5199\uff1a(\u6ce8\u610f\u53ef\u53d8\u53c2\u6570\u5176\u5b9e\u88ab\u5305\u88c5\u6210\u4e86\u4e00\u4e2a slice) 1 2 3 4 5 6 7 8 9 func sum3 ( init int , vals ... int ) int { sum := init for _ , val := range vals { // vals is []int sum += val } return sum } // fmt.Println(sum3(0, 1, 2, 3)) // fmt.Println(sum3(0, []int{1,2,3}...)) // \u8fd8\u53ef\u4ee5\u89e3\u5305\u4e00\u4e2a slice \u6765\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\uff0c\u7ed9\u4e00\u4e2a slice \u52a0\u4e0a\u4e09\u4e2a\u7701\u7565\u53f7 \u518d\u8fdb\u4e00\u6b65\uff0c\u51fd\u6570\u8fd8\u53ef\u4ee5\u8fd4\u56de\u591a\u4e2a\u503c\uff0c\u8fd9\u4e2a\u76f8\u6bd4 c \u6765\u8bf4\u975e\u5e38\u65b9\u4fbf\uff0c\u6bd4\u5982\u9664\u4e86 sum \u4e4b\u5916\u6211\u4eec\u518d\u8fd4\u56de\u4e00\u4e2a\u53ef\u53d8\u53c2\u6570\u7684\u4e2a\u6570\uff1a (\u5176\u5b9e go \u6700\u540e\u4e00\u4e2a\u53c2\u6570\u7ecf\u5e38\u7528\u6765\u8fd4\u56de\u9519\u8bef\u7c7b\u578b\uff0c\u8fd9\u4e2a\u4e4b\u540e\u8ba8\u8bba\u9519\u8bef\u5904\u7406\u7684\u65f6\u5019\u518d\u6d89\u53ca) 1 2 3 4 5 6 7 8 func sum4 ( init int , vals ... int ) ( int , int ) { sum := init fmt . Println ( vals , len ( vals )) for _ , val := range vals { sum += val } return sum , len ( vals ) } \u8fd9\u5927\u6982\u5c31\u662f\u51fd\u6570\u5b9a\u4e49\u7684\u5e38\u89c1\u65b9\u5f0f\uff0c\u867d\u7136\u5b83\u4eec\u5f62\u5f0f\u4e0a\u5f88\u7b80\u5355\uff0c\u4f46\u5176\u5b9e\u5df2\u7ecf\u5305\u542b\u4e86\u5f88\u591a\u57fa\u672c\u7684\u8981\u7d20\uff0c\u5176\u4ed6\u590d\u6742\u7684\u51fd\u6570\u65e0\u975e\u662f\u66f4\u591a\u7684\u53c2\u6570\uff0c \u66f4\u52a0\u590d\u6742\u7684\u53c2\u6570\u6216\u8005\u8fd4\u56de\u503c\u7c7b\u578b\u800c\u5df2\u3002","title":"\u5982\u4f55\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570"},{"location":"basics/05_func/func/#_3","text":"\u5148\u5356\u4e2a\u5173\u5b50\uff0cgo \u76ee\u524d\u4e3a\u6b62\u8fd8\u6ca1\u6709\u76f4\u63a5\u63d0\u4f9b\u6cdb\u578b\u652f\u6301\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7a7a\u63a5\u53e3 interface{} \u6765\u5b9e\u73b0\uff0c\u4e4b\u540e\u8bb2\u5230\u63a5\u53e3\u7684\u65f6\u5019\u6211\u4eec\u518d\u6765\u770b\u5982\u4f55\u5b9e\u73b0\u3002","title":"\u6cdb\u578b"},{"location":"basics/05_func/func/#_4","text":"\u5f88\u9057\u61be\uff0cgo \u5f00\u53d1\u8005\u8001\u987d\u56fa\u4eec\u62d2\u7edd\u652f\u6301\u9ed8\u8ba4\u53c2\u6570\uff0c\u4e0d\u8fc7\u5012\u662f\u6709\u4e00\u4e9b\u6bd4\u8f83 trick \u7684\u65b9\u6cd5\u6765\u5b9e\u73b0\u3002 \u4e00\u79cd\u662f\u901a\u8fc7\u4f20\u9012\u96f6\u503c\u5e76\u4e14\u4ee3\u7801\u91cc\u5224\u65ad\u662f\u5426\u662f\u96f6\u503c\u6765\u5b9e\u73b0\uff0c\u53e6\u4e00\u79cd\u662f\u901a\u8fc7\u4f20\u9012\u4e00\u4e2a\u7ed3\u6784\u4f53\u6765\u5b9e\u73b0(\u7ed3\u6784\u4f53\u7ae0\u8282\u518d\u8bb2)\u3002 1 2 3 4 5 6 7 8 9 10 11 12 // https://stackoverflow.com/questions/19612449/default-value-in-gos-method // \u53ef\u4ee5\u901a\u8fc7\u4f20\u9012\u96f6\u503c\u6216\u8005 nil \u7684\u65b9\u5f0f\u6765\u5224\u65ad\u3002 // Both parameters are optional, use empty string for default value func Concat1 ( a string , b int ) string { if a == \"\" { a = \"default-a\" } if b == 0 { b = 5 } return fmt . Sprintf ( \"%s%d\" , a , b ) }","title":"\u9ed8\u8ba4\u53c2\u6570"},{"location":"basics/05_func/func/#_5","text":"\u6bcf\u5f53\u5b66\u4e60\u4e00\u95e8\u65b0\u8bed\u8a00\u7684\u65f6\u5019\uff0c\u6211\u90fd\u4f1a\u7559\u610f\u4e0b\u51fd\u6570\u7684\u4f20\u503c\u95ee\u9898\uff0c\u7a76\u7adf\u662f\u503c\u4f20\u9012(\u6df1\u62f7\u8d1d\u53c2\u6570\u7684\u503c)\u8fd8\u662f\u5f15\u7528\u4f20\u9012(\u4f20\u5165\u6307\u9488)\u3002 \u8fd9\u4e24\u79cd\u53c2\u6570\u4f20\u9012\u65b9\u5f0f\u6700\u5927\u7684\u533a\u522b\u5c31\u662f\u6211\u4eec\u662f\u5426\u53ef\u4ee5\u4fee\u6539\u4f20\u5165\u53c2\u6570\u7684\u503c\u3002 \u5148\u6765\u770b\u4e00\u4e2a\u5c0f\u4f8b\u5b50\uff0c\u5c1d\u8bd5\u4f20\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\u7136\u540e\u4fee\u6539\u5b83\uff0c\u770b\u770b\u662f\u5426\u8d77\u4f5c\u7528\uff1a 1 2 3 4 5 6 7 8 9 func changeStr ( s string ) { s = \"hehe\" fmt . Println ( s ) } func main () { name := \"lao wang\" changeStr ( name ) fmt . Println ( name ) // \u6253\u5370\u51fa\u6765\u8fd8\u662f \"lao wang\"\uff0c\u6ca1\u6709\u4fee\u6539\u6210\u529f\uff0c\u4f3c\u4e4e\u662f\u300e\u503c\u4f20\u9012\u300f } \u770b\u8d77\u6765\u4f3c\u4e4e\u662f\u503c\u4f20\u9012\uff0c\u5e76\u6ca1\u6709\u4fee\u6539\u4f20\u5165\u7684\u503c\u3002\u597d\uff0c\u5982\u679c\u4f60\u90a3\u4e48\u8ba4\u4e3a\uff0c\u90a3\u518d\u8bd5\u8bd5\u5982\u679c\u6211\u4eec\u4f20\u9012\u4e00\u4e2a map \u4f5c\u4e3a\u53c2\u6570\u5462\uff1f 1 2 3 4 5 6 7 8 9 func changeMap ( m map [ string ] string ) { m [ \"\u738b\u516b\" ] = \"\u7eff\u8c46\" } func main () { m := map [ string ] string { \"name\" : \"lao wang\" } changeMap ( m ) fmt . Println ( m ) // map[name:lao wang \u738b\u516b:\u7eff\u8c46], \u4f3c\u4e4e\u53c8\u53ef\u4ee5\u4fee\u6539\u4e86\uff0c\u51fd\u6570\u91cc\u7684\u4fee\u6539\u8d77\u4f5c\u7528\u4e86 } \u4f60\u4f1a\u53d1\u73b0\u6211\u4eec\u53ef\u4ee5\u4fee\u6539 map \u7684\u503c\u3002\u5176\u5b9e\u8bb0\u4f4f\u4ee5\u4e0b\u8fd9\u4e9b\u4f60\u5c31\u77e5\u9053\u4ec0\u4e48\u65f6\u5019\u53ef\u4ee5\u4fee\u6539\u4f20\u5165\u7684\u53c2\u6570\u4e86\uff1a \u5185\u7f6e\u7c7b\u578b\uff1a\u6570\u503c\u7c7b\u578b\u3001\u5b57\u7b26\u4e32\u3001\u5e03\u5c14\u7c7b\u578b\u3001\u6570\u7ec4\u3002\u4f20\u9012\u7684\u662f\u526f\u672c (\u6240\u4ee5\u4e00\u822c\u4e0d\u7528\u6570\u7ec4\u5566)\uff0c\u4f1a\u62f7\u8d1d\u539f\u59cb\u503c\uff0c\u65e0\u6cd5\u4fee\u6539 \u5f15\u7528\u7c7b\u578b: \u5207\u7247\u3001\u6620\u5c04\u3001\u901a\u9053\u3001\u63a5\u53e3\u548c\u51fd\u6570\u7c7b\u578b\u3002\u901a\u8fc7\u590d\u5236\u4f20\u9012\u5e94\u7528\u7c7b\u578b\u503c\u7684\u526f\u672c\uff0c\u672c\u8d28\u4e0a\u5c31\u662f\u5171\u4eab\u5e95\u5c42\u6570\u636e\u7ed3\u6784\u3002\u53ef\u4ee5\u4fee\u6539 \u8fd9\u91cc\u5176\u5b9e map/slice \u7b49\u4e5f\u662f\u4f20\u9012\u7684\u526f\u672c\uff0c\u4e3a\u5565\u5b83\u4eec\u5c31\u53ef\u4ee5\u4fee\u6539\u5462\uff1f\u6211\u4eec\u4ee5 slice \u4e3e\u4f8b\uff0c\u5b83\u7684\u5185\u90e8\u5b9e\u73b0\u5176\u5b9e\u662f\u8fd9\u6837\u7684\uff0c\u5e95\u5c42\u5b9e\u73b0\u5305\u542b\u4e00\u4e2a\u6307\u5411\u6570\u7ec4\u7684\u6307\u9488(ptr), \u4e00\u4e2a\u957f\u5ea6 len \u548c\u5bb9\u91cf cap \uff0c\u4f20\u53c2\u7684\u65f6\u5019\u5b9e\u9645\u4e0a\u662f slice \u8fd9\u4e2a\u7ed3\u6784\u4f53\u7684\u62f7\u8d1d(\u53ea\u6709\u4e09\u4e2a\u5143\u7d20\u800c\u4e0d\u662fcopy\u6240\u6709\u7684\u5e95\u5c42\u6570\u7ec4\u91cc\u7684\u503c)\uff0c\u6240\u4ee5\u590d\u5236\u5f88\u8f7b\u91cf\uff0c\u800c\u4e14\u901a\u8fc7\u5e95\u5c42\u7684\u6307\u9488\u4e5f\u53ef\u4ee5\u5b9e\u73b0\u4fee\u6539\u3002 1 2 3 4 5 6 // https://golang.org/src/runtime/slice.go type slice struct { array unsafe . Pointer len int cap int } \u6240\u4ee5\u6211\u4eec\u770b\u5230go \u91cc\u8fb9\u6240\u6709\u7684\u51fd\u6570\u53c2\u6570\u90fd\u662f\u503c\u62f7\u8d1d\uff0c\u53ea\u4e0d\u8fc7\u5bf9\u4e8e\u4e00\u4e9b\u590d\u5408\u7ed3\u6784\u56e0\u4e3a\u590d\u5236\u7684\u7ed3\u6784\u4f53\u91cc\u5305\u542b\u6307\u9488\uff0c\u6240\u4ee5\u53ef\u4ee5\u4fee\u6539\u5b83\u7684\u5e95\u5c42\u7ed3\u6784\u3002","title":"\u51fd\u6570\u7684\u4f20\u53c2"},{"location":"basics/05_func/func/#_6","text":"\u5982\u679c\u4f60\u5b66\u8fc7c/c++\uff0c\u4f60\u53ef\u80fd\u4f1a\u9047\u5230\u5404\u79cd\u8d39\u89e3\u7684\u6307\u9488\u64cd\u4f5c\u3002go \u4e5f\u6709\u6307\u9488\uff0c\u4f46\u662f go \u91cc\u8fb9\u5927\u5927\u7b80\u5316\u548c\u9650\u5236\u4e86\u6307\u9488\u7684\u4f7f\u7528\uff0c\u6240\u4ee5\u53ea\u8981\u4f60\u77e5\u9053\u6307\u9488\u7684\u57fa\u672c\u6982\u5ff5\u5c31\u53ef\u4ee5\u5e94\u4ed8\u51e0\u4e4e\u6240\u6709\u573a\u666f\u4e86\u3002 \u540e\u6587\u8bb2\u7ed3\u6784\u4f53\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5728\u6765\u770b\u4e0b\u5982\u4f55\u4f20\u9012\u901a\u8fc7\u4f20\u9012\u7ed3\u6784\u4f53\u6307\u9488\u6765\u4fee\u6539\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u4f60\u4f1a\u53d1\u73b0\u5927\u90e8\u5206\u6307\u9488\u7684\u4f7f\u7528\u573a\u666f\u90fd\u662f\u9488\u5bf9\u590d\u6742\u7684\u7ed3\u6784\u4f53\u3002 1 2 3 4 5 6 7 8 9 func changeString ( s * string ) { // go \u540c\u6837\u4f7f\u7528 * \u58f0\u660e\u6307\u9488\u7c7b\u578b * s = \"new lao wang\" } func main () { s := \"lao wang\" changeString ( & s ) // go \u548c c \u4e00\u6837\u4f7f\u7528 & \u4f5c\u4e3a\u53d6\u5730\u5740\u64cd\u4f5c\u7b26 fmt . Println ( s ) }","title":"\u4f20\u9012\u6307\u9488"},{"location":"basics/05_func/func/#_7","text":"\u4e0a\u9762\u6211\u4eec\u770b\u5230\u4e86 go \u51fd\u6570\u7684\u5e38\u89c1\u5b9a\u4e49\u65b9\u5f0f\uff0cgo \u4e2d\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528\u533f\u540d\u51fd\u6570\uff0c\u7ecf\u5e38\u7528\u5728\u4e00\u4e9b\u4e34\u65f6\u7684\u5c0f\u51fd\u6570\u4e2d\uff0c\u6bd4\u5982\u4e0b\u8fb9\u8fd9\u4e2a\u4f8b\u5b50\uff0c \u5b9a\u4e49\u4e00\u4e2a\u533f\u540d\u51fd\u6570\u5e76\u4e14\u6253\u5370\u4f20\u8fdb\u53bb\u7684\u5b57\u7b26\u4e32\uff1a 1 2 3 4 5 func testAnonymousFunc () { func ( s string ) { fmt . Println ( s ) }( \"hehe\" ) }","title":"\u533f\u540d\u51fd\u6570"},{"location":"basics/05_func/func/#_8","text":"go \u91cc\u8fb9\u51fd\u6570\u5176\u5b9e\u4e5f\u662f\u300e\u4e00\u7b49\u516c\u6c11\u300f\uff0c\u51fd\u6570\u672c\u8eab\u4e5f\u662f\u4e00\u79cd\u7c7b\u578b\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u7136\u540e\u8d4b\u503c\u7ed9\u4e00\u4e2a\u53d8\u91cf\uff0c\u6bd4\u5982: 1 2 3 4 func testFuncType () { myPrint := func ( s string ) { fmt . Println ( s ) } myPrint ( \"hello go\" ) } \u5982\u6b64\u4e00\u6765 go \u7684\u51fd\u6570\u5b9e\u9645\u4e0a\u4f1a\u975e\u5e38\u7075\u6d3b\uff0c\u6bd4\u5982\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e00\u4e2a map \u503c\u4e3a\u51fd\u6570\u7684\u6620\u5c04\uff1a 1 2 3 4 5 6 7 8 func testMapFunc () { funcMap := map [ string ] func ( int , int ) int { \"add\" : func ( a , b int ) int { return a + b }, \"sub\" : func ( a , b int ) int { return a - b }, } fmt . Println ( funcMap [ \"add\" ]( 3 , 2 )) fmt . Println ( funcMap [ \"sub\" ]( 3 , 2 )) } \u751a\u81f3\u8fd8\u53ef\u4ee5\u4f5c\u4e3a\u51fd\u6570\u7684\u53c2\u6570\u4f20\u9012\u8fdb\u53bb\uff0c\u6bd4\u5982\u8fd9\u4e2a\u4f8b\u5b50\uff1a 1 2 3 4 5 6 7 8 9 func Double ( n int ) int { return n * 2 } func Apply ( n int , f func ( int ) int ) int { return f ( n ) // f \u7684\u7c7b\u578b\u662f \"func(int) int\" } func funcAsParam () { fmt . Println ( Apply ( 10 , Double )) } \u53ef\u4ee5\u770b\u5230 go \u7684\u51fd\u6570\u4f7f\u7528\u8d77\u6765\u662f\u975e\u5e38\u7075\u6d3b\u7684\uff0c\u6709\u4e9b\u5199\u6cd5\u53ef\u80fd\u4f60\u5728\u52a8\u6001\u8bed\u8a00\u4e2d\u624d\u4f1a\u7ecf\u5e38\u770b\u5230\u3002","title":"\u51fd\u6570\u7c7b\u578b"},{"location":"basics/05_func/func/#_9","text":"\u5176\u5b9e\u6240\u8c13\u9ad8\u9636\u51fd\u6570\u5c31\u662f\u5c06\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u5176\u4ed6\u51fd\u6570\u4f5c\u4e3a\u81ea\u5df1\u7684\u53c2\u6570\uff0c\u5e76\u5728\u51fd\u6570\u4f53\u91cc\u8c03\u7528\u5b83\u4eec\u3002\u4e0a\u8fb9\u7684\u4f8b\u5b50\u5df2\u7ecf\u6f14\u793a\u5230\u5566\uff0c \u8fd9\u91cc\u6211\u4eec\u518d\u6765\u5199\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b\uff0c\u5728\u5f88\u591a\u8bed\u8a00\u4e2d\u90fd\u53ef\u4ee5\u89c1\u5230\u7684\u8c13\u8bcd\u51fd\u6570\u3002 \u6211\u4eec\u7ecf\u5e38\u60f3\u4ece\u4e00\u4e2a\u6570\u7ec4\u91cc\u8fb9\u83b7\u53d6\u6211\u4eec\u9700\u8981\u7684\u4e00\u7ec4\u6570\u636e\uff0c\u5c31\u53ef\u4ee5\u8fd9\u4e48\u5199\uff0c\u4ece\u4e00\u4e2a\u5207\u7247\u4e2d\u83b7\u53d6\u6240\u6709\u5947\u6570(odd number): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 func FilterIntSlice ( intVals [] int , predicate func ( i int ) bool ) [] int { res := make ([] int , 0 ) for _ , val := range intVals { if predicate ( val ) { res = append ( res , val ) } } return res } func main () { ints := [] int { 1 , 2 , 3 , 4 , 5 } isOdd := func ( i int ) bool { return i % 2 != 0 } // \u662f\u5947\u6570 fmt . Println ( FilterIntSlice ( ints , isOdd )) // [1 3 5] } \u662f\u4e0d\u662f\u5f88\u7b80\u5355\uff0c\u540c\u6837\u6211\u4eec\u8fd8\u53ef\u4ee5\u83b7\u53d6\u6240\u6709\u7684\u5076\u6570\uff0c\u6216\u8005\u6ee1\u8db3\u67d0\u4e9b\u6761\u4ef6\u7684\u6570\u5b57\u3002\u7559\u7ed9\u8bfb\u8005\u4f5c\u4e3a\u5c0f\u7ec3\u4e60","title":"\u9ad8\u9636\u51fd\u6570"},{"location":"basics/05_func/func/#_10","text":"\u5f88\u591a\u8bed\u8a00\u90fd\u6709\u95ed\u5305\u7684\u6982\u5ff5\uff0c \u6240\u8c13\u95ed\u5305\u5c31\u662f\u4e00\u4e2a\u51fd\u6570\u201c\u6355\u83b7\u201d\u4e86\u548c\u5b83\u5728\u540c\u4e00\u4f5c\u7528\u57df\u7684\u5176\u4ed6\u5e38\u91cf\u548c\u53d8\u91cf\u3002 \u5f53\u95ed\u5305\u88ab\u8c03\u7528\u7684\u65f6\u5019\uff0c\u4e0d\u7ba1\u5728\u7a0b\u5e8f\u4ec0\u4e48\u5730\u65b9\u8c03\u7528\uff0c\u95ed\u5305\u80fd\u591f\u4f7f\u7528\u8fd9\u4e9b\u5e38\u91cf\u6216\u8005\u53d8\u91cf\uff0c\u5e76\u4e14\u53ea\u8981\u95ed\u5305\u8fd8\u5728\u4f7f\u7528\u5b83\uff0c\u8fd9\u4e9b\u53d8\u91cf\u5c31\u4e0d\u4f1a\u9500\u6bc1\uff0c\u4e00\u76f4\u5b58\u5728\u3002 \u4e0a\u6587\u4e2d\u63d0\u5230\u7684\u533f\u540d\u51fd\u6570\u5176\u5b9e\u5c31\u662f\u95ed\u5305\u3002\u6765\u770b\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b\uff1a 1 2 3 4 5 6 7 8 // \u95ed\u5305\u793a\u4f8b func testClosure () { suffix := \".go\" addSuffix := func ( name string ) string { return name + suffix // \u8fd9\u91cc\u4f7f\u7528\u5230\u4e86 suffix \u8fd9\u4e2a\u53d8\u91cf\uff0c\u6240\u4ee5 addSuffix \u5c31\u662f\u4e00\u4e2a\u95ed\u5305 } fmt . Println ( addSuffix ( \"hello_world\" )) } \u4e4b\u540e\u518d\u8bb2\u5230 goroutine \u7684\u65f6\u5019\uff0c\u6211\u4eec\u4f1a\u770b\u5230\u4e00\u4e2a for \u5faa\u73af\u91cc\u4f7f\u7528\u95ed\u5305\u7684\u5751\u3002","title":"\u95ed\u5305"},{"location":"basics/05_func/func/#_11","text":"\u5982\u679c\u4f60\u5b66\u4e60\u8fc7\u5176\u4ed6\u8bed\u8a00\uff0c\u4e00\u5b9a\u77e5\u9053\u9012\u5f52\uff0c\u5c31\u662f\u81ea\u5df1\u8c03\u7528\u81ea\u5df1\u7684\u51fd\u6570\uff0cgo \u4e5f\u662f\u652f\u6301\u9012\u5f52\u51fd\u6570\u7684\u3002\u6bd4\u5982\u6211\u4eec\u7ecf\u5e38\u770b\u5230\u7684\u6590\u6ce2\u90a3\u5951\u6570\uff1a 1 2 3 4 5 6 func fib ( n int ) int { if n < 2 { return n } return fib ( n - 1 ) + fib ( n - 2 ) } Warning \u9012\u5f52\u9700\u8981\u6ce8\u610f\u7684\u4e00\u70b9\u5c31\u662f\u4e00\u5b9a\u8981\u6709\u4e00\u4e2a\u9012\u5f52\u51fa\u53e3\uff0c\u9632\u6b62\u65e0\u9650\u9012\u5f52\u5bfc\u81f4\u6808\u6ea2\u51fa(stackoverflow)","title":"\u9012\u5f52\u51fd\u6570"},{"location":"basics/05_func/func/#_12","text":"Go Slices: usage and internals","title":"\u53c2\u8003\uff1a"},{"location":"basics/06_error/error/","text":"go \u662f\u5982\u4f55\u5904\u7406\u9519\u8bef\u7684\uff1f \u00b6 Quote \"You can't write perfect software. Software can't be perfect. Protect your code and users from the inevitable errors. \u9519\u8bef\u5904\u7406 \u00b6 \u5982\u679c\u4f60\u4f7f\u7528\u8fc7 Python/Java \u7b49\u6d41\u884c\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u4f60\u4f1a\u53d1\u73b0\u5b83\u4eec\u4f7f\u7528\u5f02\u5e38\u673a\u5236\u6765\u8fdb\u884c\u9519\u8bef\u5904\u7406\uff0cPython \u4e2d\u4f60\u53ef\u4ee5\u4f7f\u7528 try/except \u6765\u8fdb\u884c\u5f02\u5e38\u7684\u6355\u83b7\u548c\u5904\u7406\uff0c\u5982\u679c\u5f02\u5e38\u6ca1\u6709\u88ab\u6355\u83b7\uff0c\u5c31\u4f1a\u9020\u6210\u7a0b\u5e8f\u9000\u51fa\u3002\u8fd8\u53ef\u4ee5\u901a\u8fc7\u5f02\u5e38\u6808\u6765\u8ffd\u8e2a\u5f02\u5e38\u7684\u8c03\u7528\u4fe1\u606f\u4ece\u800c\u5e2e\u52a9\u6211\u4eec\u4fee\u590d\u5f02\u5e38\u4ee3\u7801\u3002 \u5728 go \u4e2d\u4f7f\u7528\u7684\u662f\u7c7b\u4f3c c \u7684\u8fd4\u56de\u9519\u8bef\u7684\u65b9\u5f0f\uff0c\u6bd4\u5982\u6211\u4eec\u5728 go \u4ee3\u7801\u4e2d\u7ecf\u5e38\u4f1a\u770b\u5230\u5f88\u591a\u8fd9\u79cd\u9519\u8bef\u68c0\u67e5\u4ee3\u7801\u3002go \u7684\u8fd9\u79cd\u6bd4\u8f83\u539f\u59cb\u7684\u9519\u8bef\u5904\u7406\u65b9\u5f0f\u5b9e\u9645\u4e0a\u4e5f\u62db\u6765\u4e86\u5f88\u591a\u4eba\u7684\u6279\u8bc4\uff0c\u8ba4\u4e3a\u662f\u8bbe\u8ba1\u4e0a\u7684\u4e00\u4e2a\u8d25\u7b14\uff0c\u5f88\u591a\u4e60\u60ef\u4f7f\u7528\u4e86\u5f02\u5e38\u673a\u5236\u7684\u5f00\u53d1\u8005\u53ef\u80fd\u4f1a \u611f\u89c9 go \u7684\u9519\u8bef\u5904\u7406\u5199\u8d77\u6765\u975e\u5e38\u7e41\u7410\uff0c\u6bd4\u5982\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u6bcf\u4e2a\u6d41\u7a0b\u4f60\u90fd\u8981\u53bb\u5904\u7406\u8fd4\u56de\u7684\u9519\u8bef\u503c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 // from https://8thlight.com/blog/kyle-krull/2018/08/13/exploring-error-handling-patterns-in-go.html func ( router HttpRouter ) parse ( reader * bufio . Reader ) ( Request , Response ) { requestText , err := readCRLFLine ( reader ) //string, err Response if err != nil { //No input, or it doesn't end in CRLF return nil , err } requestLine , err := parseRequestLine ( requestText ) //RequestLine, err Response if err != nil { //Not a well-formed HTTP request line with {method, target, version} return nil , err } if request := router . routeRequest ( requestLine ); request != nil { //Well-formed, executable Request to a known route return request , nil } //Valid request, but no route to handle it return nil , requestLine . NotImplemented () } \u5728 go \u7684\u60ef\u4f8b\u4e2d\uff0c\u4e00\u822c\u51fd\u6570\u591a\u4e2a\u8fd4\u56de\u503c\u7684\u6700\u540e\u4e00\u4e2a\u503c\u7528\u6765\u8fd4\u56de\u9519\u8bef\uff0c\u8fd4\u56de nil \u8868\u793a\u6ca1\u6709\u9519\u8bef\uff0c\u8c03\u7528\u8005\u901a\u8fc7\u68c0\u67e5\u8fd4\u56de\u7684\u9519\u8bef\u662f\u5426\u662f nil \u5c31\u77e5\u9053\u662f\u5426\u9700\u8981\u5904\u7406\u9519\u8bef\u4e86\u3002 defer \u8bed\u53e5 \u00b6 go \u4e2d\u63d0\u4f9b\u4e86\u4e00\u4e2a defer \u8bed\u53e5\u7528\u6765\u5ef6\u8fdf\u4e00\u4e2a\u51fd\u6570(\u533f\u540d\u51fd\u6570)\u6216\u8005\u65b9\u6cd5\u7684\u6267\u884c\uff0c\u5b83\u4f1a\u5728\u51fd\u6570\u6267\u884c\u5b8c\u6210(return)\u4e4b\u524d\u8c03\u7528\u3002\u4e00\u822c\u4e3a\u4e86\u9632\u6b62\u4ee3\u7801\u91cc\u6709\u8d44\u6e90\u6cc4\u9732(\u6587\u4ef6\u3001\u6570\u636e\u5e93\u8fde\u63a5\u3001\u9501)\uff0c \u5bf9\u4e8e\u6253\u5f00\u7684\u8d44\u6e90\u6bd4\u5982\u6587\u4ef6\u7b49\u6211\u4eec\u9700\u8981\u663e\u5f0f\u5173\u95ed\uff0c\u8fd9\u79cd\u573a\u5408\u5c31\u662f defer \u53d1\u6325\u4f5c\u7528\u6700\u597d\u7684\u573a\u666f\uff0c\u4e5f\u662f go \u4ee3\u7801\u4e2d\u4f7f\u7528 defer \u6700\u5e38\u7528\u7684\u573a\u666f\u3002 1 2 3 4 5 6 7 8 9 10 11 // go f , err := os . Open ( file ) if err != nil { // handle err return err } defer f . Close () // \u4fdd\u8bc1\u6587\u4ef6\u4f1a\u5728\u51fd\u6570\u8fd4\u56de\u4e4b\u540e\u5173\u95ed\uff0c\u9632\u6b62\u8d44\u6e90\u6cc4\u9732 // \u4e5f\u5e38\u7528\u5728\u4f7f\u7528\u9501\u7684\u5730\u65b9\uff0c\u9632\u6b62\u5fd8\u8bb0\u91ca\u653e\u9501 mu . Lock () defer mu . UnLock () 1 2 3 # python with open ( \"filepath\" , \"r\" ) as f : # do with file \u5982\u679c\u4f60\u7528\u8fc7 python \u7684\u8bdd\uff0cgo \u4e2d\u7684 defer \u548c python \u4f7f\u7528 with \u8bed\u53e5\u4fdd\u8bc1\u8d44\u6e90\u4f1a\u88ab\u5173\u95ed\u76ee\u7684\u7c7b\u4f3c\u3002 \u53e6\u5916\u51fd\u6570\u91cc\u53ef\u4ee5\u4f7f\u7528\u591a\u4e2a defer \u8bed\u53e5\uff0c\u5982\u679c\u6709\u591a\u4e2a defer \u5b83\u4eec\u4f1a\u6309\u7167\u540e\u8fdb\u5148\u51fa(Last In First Out)\u7684\u987a\u5e8f\u6267\u884c\u3002 \u8fd0\u884c\u4ee5\u4e0b\u5c0f\u4f8b\u5b50\uff0c\u770b\u770b\u8f93\u51fa\u662f\u5426\u548c\u4f60\u60f3\u7684\u4e00\u6837\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 package main import ( \"fmt\" ) func testDefer () string { defer fmt . Println ( \"defer 1\" ) defer fmt . Println ( \"defer 2\" ) fmt . Println ( \"\u51fd\u6570\u4f53\" ) return \"hello\" } func main () { fmt . Println ( testDefer ()) } go \u7684 error \u7c7b\u578b \u00b6 \u4e0a\u6587\u63d0\u5230\u4e00\u822c\u6211\u4eec\u5728 go \u4e2d\u901a\u8fc7\u8fd4\u56de\u4e00\u4e2a error \u6765\u8868\u793a\u9519\u8bef\u6216\u8005\u5f02\u5e38\u72b6\u6001\uff0c\u8fd9\u662f go \u4ee3\u7801\u4e2d\u6700\u5e38\u89c1\u7684\u65b9\u5f0f\u3002\u90a3 error \u7a76\u7adf\u662f\u4ec0\u4e48\u5462\uff1f \u5176\u5b9e error \u662f go \u7684\u4e00\u4e2a\u5185\u7f6e\u7684\u63a5\u53e3\u7c7b\u578b\uff0c\u6bd4\u5982\u4f60\u53ef\u4ee5\u4f7f\u7528\u5f00\u53d1\u5de5\u5177\u8df3\u8fdb\u53bb\u770b\u4e0b error \u7684\u5b9a\u4e49\uff08\u6ce8\u610f\u8fd9\u91cc\u4f7f\u7528\u5230\u4e86\u63a5\u53e3\uff0c\u540e\u9762\u4f1a\u4ecb\u7ecd\uff09\u3002 1 2 3 4 5 // The error built-in interface type is the conventional interface for // representing an error condition, with the nil value representing no error. type error interface { Error () string } error \u7684\u5b9a\u4e49\u5f88\u7b80\u5355\uff0c\u53ea\u8981\u6211\u4eec\u81ea\u5df1\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7c7b\u578b\u7684 Error() \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5c31\u53ef\u4ee5\u5f53\u505a\u9519\u8bef\u7c7b\u578b\u4e86\u3002\u4e3e\u4e00\u4e2a\u7b80\u5355\u5c0f\u4f8b\u5b50\uff0c \u6bd4\u5982\u8ba1\u7b97\u4e24\u4e2a\u6574\u6570\u76f8\u9664\uff0c\u6211\u4eec\u77e5\u9053\u9664\u6570\u662f\u4e0d\u80fd\u4e3a 0 \u7684\uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u5c31\u53ef\u4ee5\u5199\u4e2a\u51fd\u6570\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 import ( \"errors\" // \u4f7f\u7528\u5185\u7f6e\u7684 errors \"fmt\" ) // Divide compute int a/b func Divide ( a , b int ) ( int , error ) { if b == 0 { return 0 , errors . New ( \"divide by zero\" ) } return a / b , nil } func main () { // fmt.Println(testDefer()) a , b := 1 , 0 res , err := Divide ( a , b ) if err != nil { fmt . Println ( err ) // error \u7c7b\u578b\u5b9e\u73b0\u4e86 Error() \u65b9\u6cd5\u53ef\u4ee5\u6253\u5370\u51fa\u6765 } fmt . Println ( res ) } \u5728\u5185\u7f6e\u5e93\u548c\u4e1a\u52a1\u4ee3\u7801\u4e2d\uff0c\u4f60\u4f1a\u770b\u5230\u5f88\u591a\u7c7b\u4f3c\u7684\u5904\u7406\u65b9\u5f0f\uff0c\u6bd4\u5982\u6211\u8df3\u8fdb\u53bb\u5230 fmt \u5305\u91cc\u968f\u4fbf\u641c\u5230\u7684\u4e00\u4e2a\u4f8b\u5b50(\u770b\u5185\u7f6e package \u53ef\u4ee5\u5b66\u5230\u5f88\u591a\u60ef\u7528\u6cd5)\uff1a 1 2 3 4 func ( p * pp ) Write ( b [] byte ) ( ret int , err error ) { p . buf . Write ( b ) return len ( b ), nil } \u5728\u6211\u4eec\u7684\u4e1a\u52a1\u4ee3\u7801\u4e2d\u4e5f\u662f\u8fd9\u6837\uff0c\u5982\u679c\u4f60\u5e0c\u671b\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\uff0c\u53ef\u4ee5\u5728\u51fd\u6570\u7684\u6700\u540e\u4e00\u4e2a\u8fd4\u56de\u503c\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u7c7b\u578b\u3002 go \u5982\u4f55\u81ea\u5b9a\u4e49\u81ea\u5df1\u7684\u4e1a\u52a1\u5f02\u5e38 \u00b6 \u5728 python \u4e4b\u7c7b\u7684\u4f7f\u7528\u5f02\u5e38\u5904\u7406\u7684\u7f16\u7a0b\u8bed\u8a00\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7ee7\u627f Exception \u7c7b\u6765\u81ea\u5b9a\u4e49\u81ea\u5df1\u7684\u4e1a\u52a1\u5f02\u5e38\u3002\u90a3\u5728 go \u91cc\u5982\u4f55\u5b9e\u73b0\u7c7b\u4f3c\u7684\u9700\u6c42\u5462\uff1f\u6bd4\u5982\u6211\u4eec\u7ecf\u5e38\u9700\u8981\u6839\u636e\u81ea\u5df1\u7684\u4e1a\u52a1\u4ee3\u7801\u6765\u81ea\u5b9a\u4e49\u9519\u8bef\uff0c\u7b14\u8005\u8fd9\u91cc\u4ecb\u7ecd\u4e00\u4e2a\u5e38\u7528\u7684\u65b9\u5f0f\u3002 \u8fd9\u91cc\u7528\u5230\u7684\u4e86\u4e00\u4e9b struct \u5b9a\u4e49\u7684\u8bed\u6cd5\uff0c\u5982\u679c\u4f60\u73b0\u5728\u4e0d\u61c2\u4e5f\u6ca1\u5173\u7cfb\uff0c\u5927\u6982\u4e86\u89e3\u4e00\u4e0b\u5c31\u884c\uff0c\u770b\u5b8c struct \u7ae0\u8282\u4f60\u5c31\u61c2\u4e86\u3002\u5176\u5b9e\u6211\u4eec\u53ea\u9700\u8981\u81ea\u5df1\u5b9a\u4e49\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c \u7136\u540e\u5b9e\u73b0 Error() \u65b9\u6cd5\u5c31\u5b9e\u73b0\u4e86 go \u7684 error \u63a5\u53e3\u3002\u6bd4\u5982\u8fd9\u91cc\u6211\u4eec\u7684 web \u670d\u52a1\u53eb\u505a Article \u670d\u52a1\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u53eb\u505a ArticleError \u7684\u9519\u8bef\u7c7b\u578b\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 package errors import ( \"fmt\" ) type ArticleError struct { Code int32 Message string } func ( e * ArticleError ) Error () string { return fmt . Sprintf ( \"[ArticleError] Code=%d, Message=%s\" , e . Code , e . Message ) } func NewArticleError ( code int32 , message string ) error { return & ArticleError { Code : code , Message : message , } } \u5982\u679c\u51fa\u73b0\u4e86\u4e1a\u52a1\u9519\u8bef\uff0c\u4f60\u5c31\u53ef\u4ee5\u8c03\u7528 NewArticleError \u51fd\u6570\u5e76\u4e14\u4f20\u5165\u4f60\u4e1a\u52a1\u91cc\u5b9a\u4e49\u7684\u9519\u8bef\u7801\u548c\u9519\u8bef\u4fe1\u606f\u521b\u5efa\u4e00\u4e2a\u9519\u8bef\u7c7b\u578b\u4e86\u3002 Go \u7684\u5f02\u5e38\u5904\u7406 panic/recover \u00b6 \u4e0a\u8fb9\u6211\u4eec\u63d0\u5230\u4e86\u9519\u8bef\uff0c\u8fd9\u91cc\u804a\u804a go \u7684\u5f02\u5e38\u5904\u7406\u673a\u5236 panic(\u6050\u614c)/recover(\u6062\u590d)\uff0c\u5176\u5b9e\u4e00\u822c\u6211\u4eec\u4f7f\u7528\u7684\u662f\u9519\u8bef\u5904\u7406(error)\u800c\u4e0d\u662f panic\u3002\u56e0\u4e3a\u53ea\u6709\u975e\u5e38\u4e25\u91cd\u7684\u573a\u666f \u4e0b\u624d\u4f1a\u53d1\u751f panic \u5bfc\u81f4\u4ee3\u7801\u9000\u51fa\u3002\u5e73\u5e38\u6211\u4eec\u4f7f\u7528\u7684 web \u6846\u67b6\uff0c\u4e00\u822c\u5373\u4f7f\u51fa\u9519\u4e86\uff0c\u6211\u4eec\u4e5f\u5e0c\u671b\u6574\u4e2a\u8fdb\u7a0b\u7ee7\u7eed\u6267\u884c\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u9000\u51fa\u65e0\u6cd5\u5904\u7406\u7528\u6237\u8bf7\u6c42\u3002 \u6bd4\u5982 python \u7684 web \u6846\u67b6\uff0c\u5982\u679c\u9047\u5230\u4e86\u4e1a\u52a1\u4ee3\u7801\u6ca1\u6709\u6355\u83b7\u7684\u5f02\u5e38\uff0c\u6846\u67b6\u4f1a\u7ed9\u6211\u4eec\u6355\u83b7\u7136\u540e\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef 500 \u7684\u72b6\u6001\u7801\u8868\u793a\u4ee3\u7801\u6709\u9519\u3002 go \u91cc\u533a\u5206\u5bf9\u5f85\u5f02\u5e38(panic)\u548c\u9519\u8bef(error)\u7684\uff0c\u7edd\u5927\u90e8\u5206\u573a\u666f\u4e0b\u6211\u4eec\u4f7f\u7528\u7684\u90fd\u662f\u9519\u8bef\uff0c\u53ea\u6709\u5c11\u6570\u573a\u666f\u4e0b\u53d1\u751f\u4e86\u4e25\u91cd\u9519\u8bef\u6211\u4eec\u60f3\u8ba9\u6574\u4e2a\u8fdb\u7a0b\u90fd\u9000\u51fa\u4e86\u624d\u4f1a\u4f7f\u7528\u5f02\u5e38\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5728 web \u6846\u67b6\u542f\u52a8\u4e4b\u524d\u7ecf\u5e38\u9700\u8981\u8bfb\u53d6\u914d\u7f6e\u6587\u4ef6\uff0c\u83b7\u53d6 mysql/redis \u7b49\u670d\u52a1\u7684\u5730\u5740\u548c\u7aef\u53e3\uff0c\u8fd9\u4e2a\u65f6\u5019\u5982\u679c\u8bfb\u53d6\u914d\u7f6e\u7684\u4ee3\u7801\u5931\u8d25\u4e86\uff0c \u6211\u4f1a\u4f7f\u7528 panic \u76f4\u63a5\u9000\u51fa\uff0c\u8fd9\u5c31\u662f\u4e25\u91cd\u9519\u8bef\uff0c\u56e0\u4e3a\u5373\u4f7f\u670d\u52a1\u542f\u52a8\u4e86\u4e5f\u65e0\u6cd5\u8fde\u63a5\u5230\u6570\u636e\u5e93\u6b63\u5e38\u5904\u7406\u8bf7\u6c42\uff0c\u53cd\u800c\u76f4\u63a5\u9000\u51fa\u8fdb\u7a0b\u65e9\u53d1\u73b0\u9519\u8bef\u4e3a\u597d\u3002 \u4f46\u662f\u6bd4\u5982\u7528\u6237\u4f20\u4e86\u4e00\u4e2a\u9519\u8bef\u53c2\u6570\u8fd9\u79cd\u60c5\u51b5\u4e0d\u4e25\u91cd\u7684\u9519\u8bef\uff0c\u6211\u4eec\u5e0c\u671b\u76f4\u63a5\u7ed9\u7528\u6237\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u72b6\u6001\u7801\uff0c\u800c\u4e0d\u81f3\u4e8e\u9000\u51fa\u8fdb\u7a0b\u3002 (Rail early \u4e5f\u662f\u4e00\u79cd\u5e38\u89c1\u601d\u60f3\uff0c\u9519\u8bef\u8d8a\u662f\u5f80\u540e\u8d8a\u96be\u6392\u67e5) 1 2 3 if err := readConfig ( \"filepath\" ); err != nil { panic ( err ) // \u8bfb\u53d6\u5931\u8d25\u76f4\u63a5\u9000\u51fa \uff08\u53ca\u65e9\u5931\u8d25\u9000\u51fa\u53ef\u4ee5\u63d0\u524d\u53d1\u73b0\u4e25\u91cd\u7684\u914d\u7f6e\u9519\u8bef\u95ee\u9898\uff09 } \u6bd4\u5982\u521a\u624d\u9664\u6cd5\u51fd\u6570\u7684\u4f8b\u5b50\uff0c\u5982\u679c\u6211\u4eec\u78b0\u5230\u4e86\u4e2a\u9664\u6570\u4e3a 0 \u88ab\u8ba4\u4e3a\u662f\u4e25\u91cd\u9519\u8bef\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 panic \u629b\u51fa\u5f02\u5e38\uff1a 1 2 3 4 5 6 func MustDivide ( a , b int ) int { if b == 0 { panic ( \"divide by zero\" ) } return a / b } \u5982\u679c\u6211\u4eec\u4e0d\u5e78\u4f20\u5165\u4e86\u9664\u6570\u4e3a0\uff0c\u4f46\u662f\u53c8\u4e0d\u60f3\u8ba9\u8fdb\u7a0b\u9000\u51fa\u5462\uff1fgo \u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e2a recover \u51fd\u6570\u7528\u6765\u4ece\u5f02\u5e38\u4e2d\u6062\u590d\uff0c\u6bd4\u5982\u4f7f\u7528 recover \u53ef\u4ee5\u628a\u4e00\u4e2a panic \u5305\u88c5\u6210\u4e3a error \u518d\u8fd4\u56de\uff0c\u800c\u4e0d\u662f\u8ba9\u8fdb\u7a0b\u9000\u51fa\uff1a 1 2 3 4 5 6 7 8 9 func Divide2 ( a , b int ) ( res int , e error ) { defer func () { if err := recover (); err != nil { e = fmt . Errorf ( \"%v\" , err ) } }() res = MustDivide ( a , b ) return // \u547d\u540d\u8fd4\u56de\u503c\u4e0d\u7528\u52a0\u4e0a\u8fd4\u56de\u7684\u53c2\u6570 } \u8fd9\u6837\u4e00\u6765\u6211\u4eec\u5c31\u300e\u6355\u83b7\u300f\u4e86 panic \u5f02\u5e38\u5e76\u4e14\u8fd4\u56de\u4e86\u4e00\u4e2a\u9519\u8bef\uff0c\u4ee3\u7801\u4e5f\u53ef\u4ee5\u6b63\u5e38\u6267\u884c\u800c\u4e0d\u4f1a\u9000\u51fa\u5566\u3002 \u6700\u540e\u7b80\u5355\u603b\u7ed3\u4e00\u4e0b\uff1a \u5bf9\u4e8e\u4e00\u822c\u4e0d\u592a\u4e25\u91cd\u7684\u573a\u666f\uff0c\u8fd4\u56de\u9519\u8bef\u503c error \u7c7b\u578b (\u4e1a\u52a1\u7edd\u5927\u90e8\u5206\u573a\u666f) \u5bf9\u4e8e\u4e25\u91cd\u7684\u9519\u8bef\u9700\u8981\u6574\u4e2a\u8fdb\u7a0b\u9000\u51fa\u7684\u573a\u666f\uff0c\u4f7f\u7528 panic \u6765\u629b\u5f02\u5e38\uff0c\u53ca\u65e9\u53d1\u73b0\u9519\u8bef \u5982\u679c\u5e0c\u671b\u6355\u83b7 panic \u5f02\u5e38\uff0c\u53ef\u4ee5\u4f7f\u7528 recover \u51fd\u6570\u6355\u83b7\uff0c\u5e76\u4e14\u5305\u88c5\u6210\u4e00\u4e2a\u9519\u8bef\u8fd4\u56de web \u6846\u67b6\u7b49\u4f1a\u5e2e\u4f60\u6355\u83b7 panic \u5f02\u5e38\uff0c\u7136\u540e\u8fd4\u56de\u5ba2\u6237\u7aef\u4e00\u4e2a http 500 \u72b6\u6001\u7801\u9519\u8bef \u6587\u672b\u8fd8\u6709\u51e0\u7bc7\u4e0d\u9519\u7684\u6587\u7ae0\u4f9b\u5927\u5bb6\u53c2\u8003\uff0c\u591a\u770b\u4e00\u4e9b\u6d41\u884c\u7684\u6e90\u7801\uff0c\u4f60\u5c31\u77e5\u9053\u5b83\u4eec\u7684\u4f7f\u7528\u573a\u5408\u4e86\u3002 \u53c2\u8003\uff1a \u00b6 Go \u9762\u5411\u5931\u8d25\u7f16\u7a0b Error handling and Go Defer, Panic, and Recover Go Best Practices \u2014 Error handling Golang error \u7684\u7a81\u56f4","title":"Go \u9519\u8bef\u5904\u7406"},{"location":"basics/06_error/error/#go","text":"Quote \"You can't write perfect software. Software can't be perfect. Protect your code and users from the inevitable errors.","title":"go \u662f\u5982\u4f55\u5904\u7406\u9519\u8bef\u7684\uff1f"},{"location":"basics/06_error/error/#_1","text":"\u5982\u679c\u4f60\u4f7f\u7528\u8fc7 Python/Java \u7b49\u6d41\u884c\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u4f60\u4f1a\u53d1\u73b0\u5b83\u4eec\u4f7f\u7528\u5f02\u5e38\u673a\u5236\u6765\u8fdb\u884c\u9519\u8bef\u5904\u7406\uff0cPython \u4e2d\u4f60\u53ef\u4ee5\u4f7f\u7528 try/except \u6765\u8fdb\u884c\u5f02\u5e38\u7684\u6355\u83b7\u548c\u5904\u7406\uff0c\u5982\u679c\u5f02\u5e38\u6ca1\u6709\u88ab\u6355\u83b7\uff0c\u5c31\u4f1a\u9020\u6210\u7a0b\u5e8f\u9000\u51fa\u3002\u8fd8\u53ef\u4ee5\u901a\u8fc7\u5f02\u5e38\u6808\u6765\u8ffd\u8e2a\u5f02\u5e38\u7684\u8c03\u7528\u4fe1\u606f\u4ece\u800c\u5e2e\u52a9\u6211\u4eec\u4fee\u590d\u5f02\u5e38\u4ee3\u7801\u3002 \u5728 go \u4e2d\u4f7f\u7528\u7684\u662f\u7c7b\u4f3c c \u7684\u8fd4\u56de\u9519\u8bef\u7684\u65b9\u5f0f\uff0c\u6bd4\u5982\u6211\u4eec\u5728 go \u4ee3\u7801\u4e2d\u7ecf\u5e38\u4f1a\u770b\u5230\u5f88\u591a\u8fd9\u79cd\u9519\u8bef\u68c0\u67e5\u4ee3\u7801\u3002go \u7684\u8fd9\u79cd\u6bd4\u8f83\u539f\u59cb\u7684\u9519\u8bef\u5904\u7406\u65b9\u5f0f\u5b9e\u9645\u4e0a\u4e5f\u62db\u6765\u4e86\u5f88\u591a\u4eba\u7684\u6279\u8bc4\uff0c\u8ba4\u4e3a\u662f\u8bbe\u8ba1\u4e0a\u7684\u4e00\u4e2a\u8d25\u7b14\uff0c\u5f88\u591a\u4e60\u60ef\u4f7f\u7528\u4e86\u5f02\u5e38\u673a\u5236\u7684\u5f00\u53d1\u8005\u53ef\u80fd\u4f1a \u611f\u89c9 go \u7684\u9519\u8bef\u5904\u7406\u5199\u8d77\u6765\u975e\u5e38\u7e41\u7410\uff0c\u6bd4\u5982\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u6bcf\u4e2a\u6d41\u7a0b\u4f60\u90fd\u8981\u53bb\u5904\u7406\u8fd4\u56de\u7684\u9519\u8bef\u503c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 // from https://8thlight.com/blog/kyle-krull/2018/08/13/exploring-error-handling-patterns-in-go.html func ( router HttpRouter ) parse ( reader * bufio . Reader ) ( Request , Response ) { requestText , err := readCRLFLine ( reader ) //string, err Response if err != nil { //No input, or it doesn't end in CRLF return nil , err } requestLine , err := parseRequestLine ( requestText ) //RequestLine, err Response if err != nil { //Not a well-formed HTTP request line with {method, target, version} return nil , err } if request := router . routeRequest ( requestLine ); request != nil { //Well-formed, executable Request to a known route return request , nil } //Valid request, but no route to handle it return nil , requestLine . NotImplemented () } \u5728 go \u7684\u60ef\u4f8b\u4e2d\uff0c\u4e00\u822c\u51fd\u6570\u591a\u4e2a\u8fd4\u56de\u503c\u7684\u6700\u540e\u4e00\u4e2a\u503c\u7528\u6765\u8fd4\u56de\u9519\u8bef\uff0c\u8fd4\u56de nil \u8868\u793a\u6ca1\u6709\u9519\u8bef\uff0c\u8c03\u7528\u8005\u901a\u8fc7\u68c0\u67e5\u8fd4\u56de\u7684\u9519\u8bef\u662f\u5426\u662f nil \u5c31\u77e5\u9053\u662f\u5426\u9700\u8981\u5904\u7406\u9519\u8bef\u4e86\u3002","title":"\u9519\u8bef\u5904\u7406"},{"location":"basics/06_error/error/#defer","text":"go \u4e2d\u63d0\u4f9b\u4e86\u4e00\u4e2a defer \u8bed\u53e5\u7528\u6765\u5ef6\u8fdf\u4e00\u4e2a\u51fd\u6570(\u533f\u540d\u51fd\u6570)\u6216\u8005\u65b9\u6cd5\u7684\u6267\u884c\uff0c\u5b83\u4f1a\u5728\u51fd\u6570\u6267\u884c\u5b8c\u6210(return)\u4e4b\u524d\u8c03\u7528\u3002\u4e00\u822c\u4e3a\u4e86\u9632\u6b62\u4ee3\u7801\u91cc\u6709\u8d44\u6e90\u6cc4\u9732(\u6587\u4ef6\u3001\u6570\u636e\u5e93\u8fde\u63a5\u3001\u9501)\uff0c \u5bf9\u4e8e\u6253\u5f00\u7684\u8d44\u6e90\u6bd4\u5982\u6587\u4ef6\u7b49\u6211\u4eec\u9700\u8981\u663e\u5f0f\u5173\u95ed\uff0c\u8fd9\u79cd\u573a\u5408\u5c31\u662f defer \u53d1\u6325\u4f5c\u7528\u6700\u597d\u7684\u573a\u666f\uff0c\u4e5f\u662f go \u4ee3\u7801\u4e2d\u4f7f\u7528 defer \u6700\u5e38\u7528\u7684\u573a\u666f\u3002 1 2 3 4 5 6 7 8 9 10 11 // go f , err := os . Open ( file ) if err != nil { // handle err return err } defer f . Close () // \u4fdd\u8bc1\u6587\u4ef6\u4f1a\u5728\u51fd\u6570\u8fd4\u56de\u4e4b\u540e\u5173\u95ed\uff0c\u9632\u6b62\u8d44\u6e90\u6cc4\u9732 // \u4e5f\u5e38\u7528\u5728\u4f7f\u7528\u9501\u7684\u5730\u65b9\uff0c\u9632\u6b62\u5fd8\u8bb0\u91ca\u653e\u9501 mu . Lock () defer mu . UnLock () 1 2 3 # python with open ( \"filepath\" , \"r\" ) as f : # do with file \u5982\u679c\u4f60\u7528\u8fc7 python \u7684\u8bdd\uff0cgo \u4e2d\u7684 defer \u548c python \u4f7f\u7528 with \u8bed\u53e5\u4fdd\u8bc1\u8d44\u6e90\u4f1a\u88ab\u5173\u95ed\u76ee\u7684\u7c7b\u4f3c\u3002 \u53e6\u5916\u51fd\u6570\u91cc\u53ef\u4ee5\u4f7f\u7528\u591a\u4e2a defer \u8bed\u53e5\uff0c\u5982\u679c\u6709\u591a\u4e2a defer \u5b83\u4eec\u4f1a\u6309\u7167\u540e\u8fdb\u5148\u51fa(Last In First Out)\u7684\u987a\u5e8f\u6267\u884c\u3002 \u8fd0\u884c\u4ee5\u4e0b\u5c0f\u4f8b\u5b50\uff0c\u770b\u770b\u8f93\u51fa\u662f\u5426\u548c\u4f60\u60f3\u7684\u4e00\u6837\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 package main import ( \"fmt\" ) func testDefer () string { defer fmt . Println ( \"defer 1\" ) defer fmt . Println ( \"defer 2\" ) fmt . Println ( \"\u51fd\u6570\u4f53\" ) return \"hello\" } func main () { fmt . Println ( testDefer ()) }","title":"defer \u8bed\u53e5"},{"location":"basics/06_error/error/#go-error","text":"\u4e0a\u6587\u63d0\u5230\u4e00\u822c\u6211\u4eec\u5728 go \u4e2d\u901a\u8fc7\u8fd4\u56de\u4e00\u4e2a error \u6765\u8868\u793a\u9519\u8bef\u6216\u8005\u5f02\u5e38\u72b6\u6001\uff0c\u8fd9\u662f go \u4ee3\u7801\u4e2d\u6700\u5e38\u89c1\u7684\u65b9\u5f0f\u3002\u90a3 error \u7a76\u7adf\u662f\u4ec0\u4e48\u5462\uff1f \u5176\u5b9e error \u662f go \u7684\u4e00\u4e2a\u5185\u7f6e\u7684\u63a5\u53e3\u7c7b\u578b\uff0c\u6bd4\u5982\u4f60\u53ef\u4ee5\u4f7f\u7528\u5f00\u53d1\u5de5\u5177\u8df3\u8fdb\u53bb\u770b\u4e0b error \u7684\u5b9a\u4e49\uff08\u6ce8\u610f\u8fd9\u91cc\u4f7f\u7528\u5230\u4e86\u63a5\u53e3\uff0c\u540e\u9762\u4f1a\u4ecb\u7ecd\uff09\u3002 1 2 3 4 5 // The error built-in interface type is the conventional interface for // representing an error condition, with the nil value representing no error. type error interface { Error () string } error \u7684\u5b9a\u4e49\u5f88\u7b80\u5355\uff0c\u53ea\u8981\u6211\u4eec\u81ea\u5df1\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7c7b\u578b\u7684 Error() \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5c31\u53ef\u4ee5\u5f53\u505a\u9519\u8bef\u7c7b\u578b\u4e86\u3002\u4e3e\u4e00\u4e2a\u7b80\u5355\u5c0f\u4f8b\u5b50\uff0c \u6bd4\u5982\u8ba1\u7b97\u4e24\u4e2a\u6574\u6570\u76f8\u9664\uff0c\u6211\u4eec\u77e5\u9053\u9664\u6570\u662f\u4e0d\u80fd\u4e3a 0 \u7684\uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u5c31\u53ef\u4ee5\u5199\u4e2a\u51fd\u6570\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 import ( \"errors\" // \u4f7f\u7528\u5185\u7f6e\u7684 errors \"fmt\" ) // Divide compute int a/b func Divide ( a , b int ) ( int , error ) { if b == 0 { return 0 , errors . New ( \"divide by zero\" ) } return a / b , nil } func main () { // fmt.Println(testDefer()) a , b := 1 , 0 res , err := Divide ( a , b ) if err != nil { fmt . Println ( err ) // error \u7c7b\u578b\u5b9e\u73b0\u4e86 Error() \u65b9\u6cd5\u53ef\u4ee5\u6253\u5370\u51fa\u6765 } fmt . Println ( res ) } \u5728\u5185\u7f6e\u5e93\u548c\u4e1a\u52a1\u4ee3\u7801\u4e2d\uff0c\u4f60\u4f1a\u770b\u5230\u5f88\u591a\u7c7b\u4f3c\u7684\u5904\u7406\u65b9\u5f0f\uff0c\u6bd4\u5982\u6211\u8df3\u8fdb\u53bb\u5230 fmt \u5305\u91cc\u968f\u4fbf\u641c\u5230\u7684\u4e00\u4e2a\u4f8b\u5b50(\u770b\u5185\u7f6e package \u53ef\u4ee5\u5b66\u5230\u5f88\u591a\u60ef\u7528\u6cd5)\uff1a 1 2 3 4 func ( p * pp ) Write ( b [] byte ) ( ret int , err error ) { p . buf . Write ( b ) return len ( b ), nil } \u5728\u6211\u4eec\u7684\u4e1a\u52a1\u4ee3\u7801\u4e2d\u4e5f\u662f\u8fd9\u6837\uff0c\u5982\u679c\u4f60\u5e0c\u671b\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\uff0c\u53ef\u4ee5\u5728\u51fd\u6570\u7684\u6700\u540e\u4e00\u4e2a\u8fd4\u56de\u503c\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u7c7b\u578b\u3002","title":"go \u7684 error \u7c7b\u578b"},{"location":"basics/06_error/error/#go_1","text":"\u5728 python \u4e4b\u7c7b\u7684\u4f7f\u7528\u5f02\u5e38\u5904\u7406\u7684\u7f16\u7a0b\u8bed\u8a00\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7ee7\u627f Exception \u7c7b\u6765\u81ea\u5b9a\u4e49\u81ea\u5df1\u7684\u4e1a\u52a1\u5f02\u5e38\u3002\u90a3\u5728 go \u91cc\u5982\u4f55\u5b9e\u73b0\u7c7b\u4f3c\u7684\u9700\u6c42\u5462\uff1f\u6bd4\u5982\u6211\u4eec\u7ecf\u5e38\u9700\u8981\u6839\u636e\u81ea\u5df1\u7684\u4e1a\u52a1\u4ee3\u7801\u6765\u81ea\u5b9a\u4e49\u9519\u8bef\uff0c\u7b14\u8005\u8fd9\u91cc\u4ecb\u7ecd\u4e00\u4e2a\u5e38\u7528\u7684\u65b9\u5f0f\u3002 \u8fd9\u91cc\u7528\u5230\u7684\u4e86\u4e00\u4e9b struct \u5b9a\u4e49\u7684\u8bed\u6cd5\uff0c\u5982\u679c\u4f60\u73b0\u5728\u4e0d\u61c2\u4e5f\u6ca1\u5173\u7cfb\uff0c\u5927\u6982\u4e86\u89e3\u4e00\u4e0b\u5c31\u884c\uff0c\u770b\u5b8c struct \u7ae0\u8282\u4f60\u5c31\u61c2\u4e86\u3002\u5176\u5b9e\u6211\u4eec\u53ea\u9700\u8981\u81ea\u5df1\u5b9a\u4e49\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c \u7136\u540e\u5b9e\u73b0 Error() \u65b9\u6cd5\u5c31\u5b9e\u73b0\u4e86 go \u7684 error \u63a5\u53e3\u3002\u6bd4\u5982\u8fd9\u91cc\u6211\u4eec\u7684 web \u670d\u52a1\u53eb\u505a Article \u670d\u52a1\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u53eb\u505a ArticleError \u7684\u9519\u8bef\u7c7b\u578b\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 package errors import ( \"fmt\" ) type ArticleError struct { Code int32 Message string } func ( e * ArticleError ) Error () string { return fmt . Sprintf ( \"[ArticleError] Code=%d, Message=%s\" , e . Code , e . Message ) } func NewArticleError ( code int32 , message string ) error { return & ArticleError { Code : code , Message : message , } } \u5982\u679c\u51fa\u73b0\u4e86\u4e1a\u52a1\u9519\u8bef\uff0c\u4f60\u5c31\u53ef\u4ee5\u8c03\u7528 NewArticleError \u51fd\u6570\u5e76\u4e14\u4f20\u5165\u4f60\u4e1a\u52a1\u91cc\u5b9a\u4e49\u7684\u9519\u8bef\u7801\u548c\u9519\u8bef\u4fe1\u606f\u521b\u5efa\u4e00\u4e2a\u9519\u8bef\u7c7b\u578b\u4e86\u3002","title":"go \u5982\u4f55\u81ea\u5b9a\u4e49\u81ea\u5df1\u7684\u4e1a\u52a1\u5f02\u5e38"},{"location":"basics/06_error/error/#go-panicrecover","text":"\u4e0a\u8fb9\u6211\u4eec\u63d0\u5230\u4e86\u9519\u8bef\uff0c\u8fd9\u91cc\u804a\u804a go \u7684\u5f02\u5e38\u5904\u7406\u673a\u5236 panic(\u6050\u614c)/recover(\u6062\u590d)\uff0c\u5176\u5b9e\u4e00\u822c\u6211\u4eec\u4f7f\u7528\u7684\u662f\u9519\u8bef\u5904\u7406(error)\u800c\u4e0d\u662f panic\u3002\u56e0\u4e3a\u53ea\u6709\u975e\u5e38\u4e25\u91cd\u7684\u573a\u666f \u4e0b\u624d\u4f1a\u53d1\u751f panic \u5bfc\u81f4\u4ee3\u7801\u9000\u51fa\u3002\u5e73\u5e38\u6211\u4eec\u4f7f\u7528\u7684 web \u6846\u67b6\uff0c\u4e00\u822c\u5373\u4f7f\u51fa\u9519\u4e86\uff0c\u6211\u4eec\u4e5f\u5e0c\u671b\u6574\u4e2a\u8fdb\u7a0b\u7ee7\u7eed\u6267\u884c\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u9000\u51fa\u65e0\u6cd5\u5904\u7406\u7528\u6237\u8bf7\u6c42\u3002 \u6bd4\u5982 python \u7684 web \u6846\u67b6\uff0c\u5982\u679c\u9047\u5230\u4e86\u4e1a\u52a1\u4ee3\u7801\u6ca1\u6709\u6355\u83b7\u7684\u5f02\u5e38\uff0c\u6846\u67b6\u4f1a\u7ed9\u6211\u4eec\u6355\u83b7\u7136\u540e\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef 500 \u7684\u72b6\u6001\u7801\u8868\u793a\u4ee3\u7801\u6709\u9519\u3002 go \u91cc\u533a\u5206\u5bf9\u5f85\u5f02\u5e38(panic)\u548c\u9519\u8bef(error)\u7684\uff0c\u7edd\u5927\u90e8\u5206\u573a\u666f\u4e0b\u6211\u4eec\u4f7f\u7528\u7684\u90fd\u662f\u9519\u8bef\uff0c\u53ea\u6709\u5c11\u6570\u573a\u666f\u4e0b\u53d1\u751f\u4e86\u4e25\u91cd\u9519\u8bef\u6211\u4eec\u60f3\u8ba9\u6574\u4e2a\u8fdb\u7a0b\u90fd\u9000\u51fa\u4e86\u624d\u4f1a\u4f7f\u7528\u5f02\u5e38\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5728 web \u6846\u67b6\u542f\u52a8\u4e4b\u524d\u7ecf\u5e38\u9700\u8981\u8bfb\u53d6\u914d\u7f6e\u6587\u4ef6\uff0c\u83b7\u53d6 mysql/redis \u7b49\u670d\u52a1\u7684\u5730\u5740\u548c\u7aef\u53e3\uff0c\u8fd9\u4e2a\u65f6\u5019\u5982\u679c\u8bfb\u53d6\u914d\u7f6e\u7684\u4ee3\u7801\u5931\u8d25\u4e86\uff0c \u6211\u4f1a\u4f7f\u7528 panic \u76f4\u63a5\u9000\u51fa\uff0c\u8fd9\u5c31\u662f\u4e25\u91cd\u9519\u8bef\uff0c\u56e0\u4e3a\u5373\u4f7f\u670d\u52a1\u542f\u52a8\u4e86\u4e5f\u65e0\u6cd5\u8fde\u63a5\u5230\u6570\u636e\u5e93\u6b63\u5e38\u5904\u7406\u8bf7\u6c42\uff0c\u53cd\u800c\u76f4\u63a5\u9000\u51fa\u8fdb\u7a0b\u65e9\u53d1\u73b0\u9519\u8bef\u4e3a\u597d\u3002 \u4f46\u662f\u6bd4\u5982\u7528\u6237\u4f20\u4e86\u4e00\u4e2a\u9519\u8bef\u53c2\u6570\u8fd9\u79cd\u60c5\u51b5\u4e0d\u4e25\u91cd\u7684\u9519\u8bef\uff0c\u6211\u4eec\u5e0c\u671b\u76f4\u63a5\u7ed9\u7528\u6237\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u72b6\u6001\u7801\uff0c\u800c\u4e0d\u81f3\u4e8e\u9000\u51fa\u8fdb\u7a0b\u3002 (Rail early \u4e5f\u662f\u4e00\u79cd\u5e38\u89c1\u601d\u60f3\uff0c\u9519\u8bef\u8d8a\u662f\u5f80\u540e\u8d8a\u96be\u6392\u67e5) 1 2 3 if err := readConfig ( \"filepath\" ); err != nil { panic ( err ) // \u8bfb\u53d6\u5931\u8d25\u76f4\u63a5\u9000\u51fa \uff08\u53ca\u65e9\u5931\u8d25\u9000\u51fa\u53ef\u4ee5\u63d0\u524d\u53d1\u73b0\u4e25\u91cd\u7684\u914d\u7f6e\u9519\u8bef\u95ee\u9898\uff09 } \u6bd4\u5982\u521a\u624d\u9664\u6cd5\u51fd\u6570\u7684\u4f8b\u5b50\uff0c\u5982\u679c\u6211\u4eec\u78b0\u5230\u4e86\u4e2a\u9664\u6570\u4e3a 0 \u88ab\u8ba4\u4e3a\u662f\u4e25\u91cd\u9519\u8bef\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 panic \u629b\u51fa\u5f02\u5e38\uff1a 1 2 3 4 5 6 func MustDivide ( a , b int ) int { if b == 0 { panic ( \"divide by zero\" ) } return a / b } \u5982\u679c\u6211\u4eec\u4e0d\u5e78\u4f20\u5165\u4e86\u9664\u6570\u4e3a0\uff0c\u4f46\u662f\u53c8\u4e0d\u60f3\u8ba9\u8fdb\u7a0b\u9000\u51fa\u5462\uff1fgo \u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e2a recover \u51fd\u6570\u7528\u6765\u4ece\u5f02\u5e38\u4e2d\u6062\u590d\uff0c\u6bd4\u5982\u4f7f\u7528 recover \u53ef\u4ee5\u628a\u4e00\u4e2a panic \u5305\u88c5\u6210\u4e3a error \u518d\u8fd4\u56de\uff0c\u800c\u4e0d\u662f\u8ba9\u8fdb\u7a0b\u9000\u51fa\uff1a 1 2 3 4 5 6 7 8 9 func Divide2 ( a , b int ) ( res int , e error ) { defer func () { if err := recover (); err != nil { e = fmt . Errorf ( \"%v\" , err ) } }() res = MustDivide ( a , b ) return // \u547d\u540d\u8fd4\u56de\u503c\u4e0d\u7528\u52a0\u4e0a\u8fd4\u56de\u7684\u53c2\u6570 } \u8fd9\u6837\u4e00\u6765\u6211\u4eec\u5c31\u300e\u6355\u83b7\u300f\u4e86 panic \u5f02\u5e38\u5e76\u4e14\u8fd4\u56de\u4e86\u4e00\u4e2a\u9519\u8bef\uff0c\u4ee3\u7801\u4e5f\u53ef\u4ee5\u6b63\u5e38\u6267\u884c\u800c\u4e0d\u4f1a\u9000\u51fa\u5566\u3002 \u6700\u540e\u7b80\u5355\u603b\u7ed3\u4e00\u4e0b\uff1a \u5bf9\u4e8e\u4e00\u822c\u4e0d\u592a\u4e25\u91cd\u7684\u573a\u666f\uff0c\u8fd4\u56de\u9519\u8bef\u503c error \u7c7b\u578b (\u4e1a\u52a1\u7edd\u5927\u90e8\u5206\u573a\u666f) \u5bf9\u4e8e\u4e25\u91cd\u7684\u9519\u8bef\u9700\u8981\u6574\u4e2a\u8fdb\u7a0b\u9000\u51fa\u7684\u573a\u666f\uff0c\u4f7f\u7528 panic \u6765\u629b\u5f02\u5e38\uff0c\u53ca\u65e9\u53d1\u73b0\u9519\u8bef \u5982\u679c\u5e0c\u671b\u6355\u83b7 panic \u5f02\u5e38\uff0c\u53ef\u4ee5\u4f7f\u7528 recover \u51fd\u6570\u6355\u83b7\uff0c\u5e76\u4e14\u5305\u88c5\u6210\u4e00\u4e2a\u9519\u8bef\u8fd4\u56de web \u6846\u67b6\u7b49\u4f1a\u5e2e\u4f60\u6355\u83b7 panic \u5f02\u5e38\uff0c\u7136\u540e\u8fd4\u56de\u5ba2\u6237\u7aef\u4e00\u4e2a http 500 \u72b6\u6001\u7801\u9519\u8bef \u6587\u672b\u8fd8\u6709\u51e0\u7bc7\u4e0d\u9519\u7684\u6587\u7ae0\u4f9b\u5927\u5bb6\u53c2\u8003\uff0c\u591a\u770b\u4e00\u4e9b\u6d41\u884c\u7684\u6e90\u7801\uff0c\u4f60\u5c31\u77e5\u9053\u5b83\u4eec\u7684\u4f7f\u7528\u573a\u5408\u4e86\u3002","title":"Go \u7684\u5f02\u5e38\u5904\u7406 panic/recover"},{"location":"basics/06_error/error/#_2","text":"Go \u9762\u5411\u5931\u8d25\u7f16\u7a0b Error handling and Go Defer, Panic, and Recover Go Best Practices \u2014 Error handling Golang error \u7684\u7a81\u56f4","title":"\u53c2\u8003\uff1a"},{"location":"basics/07_oop/oop/","text":"go \u662f\u5982\u4f55\u5b9e\u73b0\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u7684\uff1f \u00b6 Quote The object-oriented model makes it easy to build up programs by accretion. What this often means, in practice, is that it provides a structured way to write spaghetti code. - Paul Graham \u9762\u5411\u5bf9\u8c61\u7f16\u7a0b \u00b6 \u9762\u5411\u5bf9\u8c61\u7f16\u7a0b(OOP) \u5e94\u8be5\u662f\u8fd1\u51e0\u5341\u5e74\u6700\u91cd\u8981\u7684\u7f16\u7a0b\u8303\u5f0f\u4e4b\u4e00\uff0c\u6d41\u884c\u7684\u7f16\u7a0b\u8bed\u8a00 Java/C++/Python \u7b49\u90fd\u652f\u6301 OOP\u3002\u5982\u679c\u4f60\u4f7f\u7528\u8fc7 Java/Python \u7684 OOP\uff0c\u5e94\u8be5\u5f88\u719f\u6089\u4e00\u4e9b\u6982\u5ff5\uff0c\u6bd4\u5982\u7c7b\uff0c\u5bf9\u8c61(\u5b9e\u4f8b)\uff0c\u62bd\u8c61\uff0c\u5c01\u88c5\uff0c\u7ee7\u627f\uff0c\u591a\u6001\u7b49\u3002 \u8fc7\u7a0b\u5f0f\u7f16\u7a0b\u4e2d\u6211\u4eec\u4e00\u822c\u901a\u8fc7\u5c01\u88c5\u6210\u51fd\u6570\u6765\u8fdb\u884c\u903b\u8f91\u590d\u7528\u3002 OOP \u4e2d\u4e00\u822c\u6211\u4eec\u4f1a\u6839\u636e\u4e1a\u52a1\u8fdb\u884c\u62bd\u8c61\uff0c\u628a\u73b0\u5b9e\u4e2d\u7684\u5b9e\u4f53\u62bd\u8c61\u6210\u4e00\u4e2a\u7c7b(class)\uff0c \u7c7b\u5305\u542b\u6570\u636e(data)\u548c\u64cd\u4f5c\u6570\u636e\u7684\u65b9\u6cd5(method)\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u7c7b\u7684\u5b9e\u4f8b(instance)\u6216\u8005\u4e5f\u53eb\u5bf9\u8c61(object)\u6765\u5bf9\u5176\u8fdb\u884c\u64cd\u4f5c\uff0c\u4e0d\u540c \u7f16\u7a0b\u8bed\u8a00\u4e2d\u90fd\u5bf9 OOP \u6709\u7c7b\u4f3c\u7684\u652f\u6301\u3002 \u4f46\u662f\u521d\u5b66 go \u7684\u7ae5\u978b\u4e00\u822c\u4f1a\u5bf9 go \u7684\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u611f\u5230\u5f88\u65b0\u5947\uff0c\u5b83\u548c\u5e38\u89c1\u7684\u7f16\u7a0b\u8bed\u8a00 Python/Java \u5b9e\u73b0\u7684\u65b9\u5f0f\u5dee\u522b\u6bd4\u8f83\u5927\u3002\u6bd4\u5982 go \u91cc\u8fb9\u6ca1\u6709 class \u7684\u6982\u5ff5\uff0cgo \u901a\u8fc7 struct \u5b9e\u73b0\u81ea\u5b9a\u4e49\u7c7b\u578b\uff0c\u800c\u4e14 go \u7684 struct \u4e0d\u652f\u6301\u7ee7\u627f\uff0c\u53ea\u652f\u6301\u7ec4\u5408\u7b49\u3002\u4e00\u5f00\u59cb\u7b14\u8005\u4e5f\u611f\u89c9 go \u8fd9\u79cd oop \u65b9\u5f0f\u6bd4\u8f83\u7b80\u964b\uff0c\u4f46\u662f\u5199\u591a\u4e86\u4f60\u4f1a\u53d1\u73b0\uff0cgo \u5b9e\u73b0 oop \u7684\u65b9\u5f0f\u7b80\u5355\u53c8\u591f\u7528\u3002 \u5982\u4f55\u81ea\u5b9a\u4e49\u7c7b\u578b\uff1f \u00b6 go \u652f\u6301\u4f7f\u7528 type \u5173\u952e\u8bcd\u6765\u5b9a\u4e49\u81ea\u5df1\u7684\u7c7b\u578b\uff0c\u6bd4\u5982\u6211\u4eec\u6765\u5b9a\u4e49\u4e00\u4e2a Enum \u7c7b\u578b\uff0cgo \u9ed8\u8ba4\u6ca1\u6709\u63d0\u4f9b enum \u7c7b\u578b\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 type \u81ea\u5df1\u5b9a\u4e49\u4e00\u4e2a\u679a\u4e3e\u7c7b\u578b(\u5728\u4e1a\u52a1\u4ee3\u7801\u4e2d\u7ecf\u5e38\u7528\u5230\u679a\u4e3e): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 package main import \"fmt\" // \u81ea\u5b9a\u4e49\u4e00\u4e2a Enum\u7c7b\u578b type Enum int const ( // \u8fd9\u91cc\u5982\u679c\u662f\u81ea\u589e\u7528 iota \u66f4\u597d Init Enum = 0 Success Enum = 1 Fail Enum = 2 ) func main () { fmt . Println ( Init ) // 0 } \u7ed9\u81ea\u5b9a\u4e49\u7c7b\u578b\u6dfb\u52a0\u65b9\u6cd5 \u00b6 \u4e0a\u9762\u6211\u4eec\u81ea\u5df1\u5b9a\u4e49\u4e86\u4e00\u4e2a Enum \u7c7b\u578b\uff0c\u4f46\u662f\u5b83\u7684\u4f7f\u7528\u6709\u4e9b\u5c40\u9650\uff0c\u6bd4\u5982\u4f60\u53ef\u4ee5\u8bd5\u8bd5\u5982\u4e0b\u4ee3\u7801\uff1a 1 2 3 4 func main () { status := 0 fmt . Println ( Init == status ) // main.go|18 col 19| invalid operation: Init == status (mismatched types Enum and int) } \u4f60\u4f1a\u53d1\u73b0\u867d\u7136 Enum \u662f\u4f7f\u7528 int \u5b9a\u4e49\u7684\uff0c\u4f46\u662f\u4f60\u662f\u65e0\u6cd5\u76f4\u63a5\u8fdb\u884c\u6bd4\u8f83\u7684\uff0cgo \u8ba4\u4e3a\u5b83\u4eec\u662f\u4e0d\u540c\u7684\u7c7b\u578b\u3002\u600e\u4e48\u529e\u5462\uff1f \u4f60\u53ef\u4ee5\u4f7f\u7528 int \u6765\u8fdb\u884c\u7c7b\u578b\u8f6c\u6362\uff0c\u6bd4\u5982\u4f7f\u7528 fmt.Println(int(Init) == status) \uff0c\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u53e6\u4e00\u4e2a\u79cd\u65b9\u5f0f\uff0c \u5c31\u662f\u7ed9\u81ea\u5b9a\u4e49\u7c7b\u578b\u589e\u52a0\u65b9\u6cd5(method)\u3002 go \u5141\u8bb8\u6211\u4eec\u7ed9\u81ea\u5b9a\u4e49\u7c7b\u578b\u5b9a\u4e49\u65b9\u6cd5\uff0c\u6240\u8c13\u7684\u65b9\u6cd5\u5176\u5b9e\u5c31\u662f\u6709\u63a5\u6536\u8005(receiver)\u7684\u51fd\u6570\uff0c\u4e4b\u524d\u6211\u4eec\u5df2\u7ecf\u4ecb\u7ecd\u8fc7\u51fd\u6570\u7684\u5b9a\u4e49\u683c\u5f0f\u5982\u4e0b\uff1a 1 2 3 func functionName ( optionalParameters ) optionalReturnType { body } \u65b9\u6cd5\u7684\u5b9a\u4e49\u65b9\u5f0f\u6bd4\u8f83\u7c7b\u4f3c\uff0c\u53ea\u4e0d\u8fc7\u591a\u4e86\u4e00\u4e2a\u63a5\u6536\u8005\uff0c\u4f60\u53ef\u4ee5\u7406\u89e3\u4e3a\u65b9\u6cd5\u5c31\u662f\u6709\u63a5\u6536\u8005\u7684\u51fd\u6570\uff0c\u5b83\u7684\u683c\u5f0f\u5982\u4e0b\uff1a 1 2 3 func ( r Receiver ) functionName ( optionalParameters ) optionalReturnType { body } \u6bd4\u5982\u6211\u4eec\u8981\u7ed9 Enum \u5b9a\u4e00\u4e2a\u65b9\u6cd5\u53eb\u505a Int()\uff0c\u5b83\u8fd4\u56de Enum \u5bf9\u5e94\u7684 int \u503c\uff0c\u53ef\u4ee5\u8fd9\u4e48\u5199: 1 2 3 func ( e Enum ) Int () int { return int ( e ) } \u8fd9\u6837\u4e00\u6765\u5c31\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 1 2 3 4 func main () { status := 0 fmt . Println ( Init . Int () == status ) // \u8c03\u7528 Init \u7684 Int \u65b9\u6cd5\u8fd4\u56de int } \u4e00\u822c\u4e1a\u52a1\u4ee3\u7801\u91cc\u8fb9\u6211\u4eec\u8fd8\u4f1a\u7ed9\u6240\u6709\u72b6\u6001\u5b9a\u4e49\u5bf9\u5e94\u7684\u4e2d\u6587\u6216\u8005\u82f1\u6587\u5b57\u7b26\u4e32\uff0c\u5b8c\u6574\u7684\u4ee3\u7801\u548c\u4f7f\u7528\u793a\u4f8b\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 package main import \"fmt\" // \u81ea\u5b9a\u4e49\u4e00\u4e2a Enum\u7c7b\u578b type Enum int const ( // \u8fd9\u91cc\u5982\u679c\u662f\u81ea\u589e\u7528 iota \u66f4\u597d Init Enum = 0 Success Enum = 1 Fail Enum = 2 // \u679a\u4e3e\u5bf9\u5e94\u7684\u4e2d\u6587 InitName = \"\u521d\u59cb\u5316\" SuccessName = \"\u6210\u529f\" FailName = \"\u5931\u8d25\" ) func ( e Enum ) Int () int { return int ( e ) } func ( e Enum ) String () string { return [] string { InitName , SuccessName , FailName , }[ e ] } func main () { // \u6d4b\u8bd5\u4e00\u4e0b\u6211\u4eec\u81ea\u5df1\u5b9a\u4e49\u7684 Enum status := 0 fmt . Println ( Init . Int () == status ) status2 := Fail fmt . Println ( status2 . String ()) } \u8fd9\u6837\u6211\u4eec\u5c31\u81ea\u5df1\u5b9a\u4e49\u4e86\u4e00\u4e2a\u4e1a\u52a1\u4ee3\u7801\u5e38\u7528\u7684\u679a\u4e3e\u7c7b\u578b\uff0c\u901a\u8fc7\u7ed9\u81ea\u5b9a\u4e49\u7c7b\u578b\u6dfb\u52a0\u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u7ed9\u7c7b\u578b\u52a0\u5165\u975e\u5e38\u591a\u6709\u7528\u7684\u529f\u80fd\u3002 \u53ef\u4ee5\u770b\u5230\u65b9\u6cd5\u548c\u666e\u901a\u51fd\u6570\u76f8\u6bd4\uff0c\u5c31\u662f\u591a\u4e86\u4e00\u4e2a\u63a5\u6536\u8005\uff0c func (e Enum) String() string {} \uff0c\u4e4b\u540e\u5b66\u4e60 struct \u5b9a\u4e49\u65b9\u6cd5\u7684\u65f6\u5019\u4e5f\u662f\u7c7b\u4f3c\u7684\u3002 \u9664\u4e86\u57fa\u672c\u7c7b\u578b\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u81ea\u5b9a\u4e49\u4e00\u4e9b\u590d\u6742\u7c7b\u578b\uff0c\u6bd4\u5982\u4ee5\u4e0b\u4e00\u4e9b\u4f8b\u5b50\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 func main () { // \u5b9a\u4e49\u4e00\u4e2a counter \u7c7b\u578b type Counter map [ string ] int c := Counter {} c [ \"word\" ] ++ fmt . Println ( c ) type Queue [] int q := make ( Queue , 0 ) q = append ( q , 1 ) fmt . Println ( q ) } \u53ef\u4ee5\u770b\u5230\u76f8\u6bd4\u4f7f\u7528\u5185\u7f6e\u7c7b\u578b\uff0c\u6211\u4eec\u81ea\u5df1\u547d\u540d\u7684 Counter/Queue \u7b49\u542b\u4e49\u66f4\u52a0\u6e05\u6670\u548c\u660e\u786e\uff0c\u8fd8\u80fd\u901a\u8fc7\u589e\u52a0\u65b9\u6cd5\u5b9e\u73b0\u66f4\u591a\u529f\u80fd\u3002 \u9664\u4e86\u57fa\u4e8e\u5185\u7f6e\u7c7b\u578b\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528 go \u63d0\u4f9b\u7684\u7ed3\u6784\u4f53 struct \u6765\u5b9a\u4e49\u81ea\u5df1\u7684\u7c7b\u578b\u3002\u4e0b\u4e00\u7bc7\u6587\u7ae0\u5c06\u4ecb\u7ecd\u4e0b\u5982\u4f55\u4f7f\u7528 struct \u6765\u5b9e\u73b0\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u3002 \u6e90\u7801\u5ef6\u4f38 \u00b6 \u901a\u8fc7\u770b\u4e00\u4e9b go \u7684\u6e90\u7801\uff0c\u6211\u4eec\u53ef\u4ee5\u5b66\u4e60\u5e76\u4e14\u6a21\u4eff go \u7684\u60ef\u7528\u6cd5\uff0c\u6bd4\u5982\u672c\u6587\u63d0\u5230\u7684 Enum \u7c7b\u578b\uff0c\u5728 go \u7684\u6e90\u7801\u4f60\u53ef\u4ee5\u627e\u5230\u7c7b\u4f3c\u5b9e\u73b0\u3002 \u4ee5\u4e0b\u662f go \u7684\u5185\u7f6e\u7684 http server \u4e2d\u5173\u4e8e\u679a\u4e3e\u7684\u5b9e\u73b0\u65b9\u5f0f(\u53bb\u6389\u4e86\u6ce8\u91ca)\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 // https://golang.google.cn/src/net/http/server.go type ConnState int const ( StateNew ConnState = iota StateActive StateIdle StateHijacked StateClosed ) var stateName = map [ ConnState ] string { StateNew : \"new\" , StateActive : \"active\" , StateIdle : \"idle\" , StateHijacked : \"hijacked\" , StateClosed : \"closed\" , } func ( c ConnState ) String () string { return stateName [ c ] } \u5728\u4f60\u7684\u4e1a\u52a1\u4ee3\u7801\u4e2d\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u7c7b\u4f3c\u7684\u65b9\u5f0f\u6765\u5b9e\u73b0\u679a\u4e3e\u7c7b\u578b\u3002\u7ecf\u5e38\u5728\u8c03\u7528\u4e00\u4e9b\u5185\u7f6e\u51fd\u6570\u7684\u65f6\u5019\u8df3\u8fdb\u53bb\u770b\u770b\uff0c\u53ef\u4ee5\u8ba9\u4f60\u5b66\u5230\u5f88\u591a go \u7684 \u4e60\u60ef\u7528\u6cd5\uff0c\u4e5f\u63a8\u8350\u4f60\u7ecf\u5e38\u770b\u770b\u3002 \u5c0f\u7ec3\u4e60 \u00b6 \u8bf7\u4f60\u7ed9 Enum \u5b9e\u73b0\u5bf9\u5e94\u7684\u8fd4\u56de\u82f1\u6587\u540d\u79f0\u7684\u529f\u80fd \u5c1d\u8bd5\u4f7f\u7528\u81ea\u5df1\u5b9a\u4e49\u7684 Counter \u7c7b\u578b\u6765\u7edf\u8ba1\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u4e0d\u540c\u5355\u8bcd\u7684\u4e2a\u6570\uff0c\u4f60\u53ef\u4ee5\u7edf\u8ba1\u4e00\u4e2a\u6587\u4ef6\u4e2d\u7684\u5355\u8bcd\u4e2a\u6570\u4e48\uff1f \u53c2\u8003 \u00b6 Ultimate Visual Guide to Go Enums and iota","title":"Go \u9762\u5411\u5bf9\u8c61\u7f16\u7a0b"},{"location":"basics/07_oop/oop/#go","text":"Quote The object-oriented model makes it easy to build up programs by accretion. What this often means, in practice, is that it provides a structured way to write spaghetti code. - Paul Graham","title":"go \u662f\u5982\u4f55\u5b9e\u73b0\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u7684\uff1f"},{"location":"basics/07_oop/oop/#_1","text":"\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b(OOP) \u5e94\u8be5\u662f\u8fd1\u51e0\u5341\u5e74\u6700\u91cd\u8981\u7684\u7f16\u7a0b\u8303\u5f0f\u4e4b\u4e00\uff0c\u6d41\u884c\u7684\u7f16\u7a0b\u8bed\u8a00 Java/C++/Python \u7b49\u90fd\u652f\u6301 OOP\u3002\u5982\u679c\u4f60\u4f7f\u7528\u8fc7 Java/Python \u7684 OOP\uff0c\u5e94\u8be5\u5f88\u719f\u6089\u4e00\u4e9b\u6982\u5ff5\uff0c\u6bd4\u5982\u7c7b\uff0c\u5bf9\u8c61(\u5b9e\u4f8b)\uff0c\u62bd\u8c61\uff0c\u5c01\u88c5\uff0c\u7ee7\u627f\uff0c\u591a\u6001\u7b49\u3002 \u8fc7\u7a0b\u5f0f\u7f16\u7a0b\u4e2d\u6211\u4eec\u4e00\u822c\u901a\u8fc7\u5c01\u88c5\u6210\u51fd\u6570\u6765\u8fdb\u884c\u903b\u8f91\u590d\u7528\u3002 OOP \u4e2d\u4e00\u822c\u6211\u4eec\u4f1a\u6839\u636e\u4e1a\u52a1\u8fdb\u884c\u62bd\u8c61\uff0c\u628a\u73b0\u5b9e\u4e2d\u7684\u5b9e\u4f53\u62bd\u8c61\u6210\u4e00\u4e2a\u7c7b(class)\uff0c \u7c7b\u5305\u542b\u6570\u636e(data)\u548c\u64cd\u4f5c\u6570\u636e\u7684\u65b9\u6cd5(method)\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u7c7b\u7684\u5b9e\u4f8b(instance)\u6216\u8005\u4e5f\u53eb\u5bf9\u8c61(object)\u6765\u5bf9\u5176\u8fdb\u884c\u64cd\u4f5c\uff0c\u4e0d\u540c \u7f16\u7a0b\u8bed\u8a00\u4e2d\u90fd\u5bf9 OOP \u6709\u7c7b\u4f3c\u7684\u652f\u6301\u3002 \u4f46\u662f\u521d\u5b66 go \u7684\u7ae5\u978b\u4e00\u822c\u4f1a\u5bf9 go \u7684\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u611f\u5230\u5f88\u65b0\u5947\uff0c\u5b83\u548c\u5e38\u89c1\u7684\u7f16\u7a0b\u8bed\u8a00 Python/Java \u5b9e\u73b0\u7684\u65b9\u5f0f\u5dee\u522b\u6bd4\u8f83\u5927\u3002\u6bd4\u5982 go \u91cc\u8fb9\u6ca1\u6709 class \u7684\u6982\u5ff5\uff0cgo \u901a\u8fc7 struct \u5b9e\u73b0\u81ea\u5b9a\u4e49\u7c7b\u578b\uff0c\u800c\u4e14 go \u7684 struct \u4e0d\u652f\u6301\u7ee7\u627f\uff0c\u53ea\u652f\u6301\u7ec4\u5408\u7b49\u3002\u4e00\u5f00\u59cb\u7b14\u8005\u4e5f\u611f\u89c9 go \u8fd9\u79cd oop \u65b9\u5f0f\u6bd4\u8f83\u7b80\u964b\uff0c\u4f46\u662f\u5199\u591a\u4e86\u4f60\u4f1a\u53d1\u73b0\uff0cgo \u5b9e\u73b0 oop \u7684\u65b9\u5f0f\u7b80\u5355\u53c8\u591f\u7528\u3002","title":"\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b"},{"location":"basics/07_oop/oop/#_2","text":"go \u652f\u6301\u4f7f\u7528 type \u5173\u952e\u8bcd\u6765\u5b9a\u4e49\u81ea\u5df1\u7684\u7c7b\u578b\uff0c\u6bd4\u5982\u6211\u4eec\u6765\u5b9a\u4e49\u4e00\u4e2a Enum \u7c7b\u578b\uff0cgo \u9ed8\u8ba4\u6ca1\u6709\u63d0\u4f9b enum \u7c7b\u578b\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 type \u81ea\u5df1\u5b9a\u4e49\u4e00\u4e2a\u679a\u4e3e\u7c7b\u578b(\u5728\u4e1a\u52a1\u4ee3\u7801\u4e2d\u7ecf\u5e38\u7528\u5230\u679a\u4e3e): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 package main import \"fmt\" // \u81ea\u5b9a\u4e49\u4e00\u4e2a Enum\u7c7b\u578b type Enum int const ( // \u8fd9\u91cc\u5982\u679c\u662f\u81ea\u589e\u7528 iota \u66f4\u597d Init Enum = 0 Success Enum = 1 Fail Enum = 2 ) func main () { fmt . Println ( Init ) // 0 }","title":"\u5982\u4f55\u81ea\u5b9a\u4e49\u7c7b\u578b\uff1f"},{"location":"basics/07_oop/oop/#_3","text":"\u4e0a\u9762\u6211\u4eec\u81ea\u5df1\u5b9a\u4e49\u4e86\u4e00\u4e2a Enum \u7c7b\u578b\uff0c\u4f46\u662f\u5b83\u7684\u4f7f\u7528\u6709\u4e9b\u5c40\u9650\uff0c\u6bd4\u5982\u4f60\u53ef\u4ee5\u8bd5\u8bd5\u5982\u4e0b\u4ee3\u7801\uff1a 1 2 3 4 func main () { status := 0 fmt . Println ( Init == status ) // main.go|18 col 19| invalid operation: Init == status (mismatched types Enum and int) } \u4f60\u4f1a\u53d1\u73b0\u867d\u7136 Enum \u662f\u4f7f\u7528 int \u5b9a\u4e49\u7684\uff0c\u4f46\u662f\u4f60\u662f\u65e0\u6cd5\u76f4\u63a5\u8fdb\u884c\u6bd4\u8f83\u7684\uff0cgo \u8ba4\u4e3a\u5b83\u4eec\u662f\u4e0d\u540c\u7684\u7c7b\u578b\u3002\u600e\u4e48\u529e\u5462\uff1f \u4f60\u53ef\u4ee5\u4f7f\u7528 int \u6765\u8fdb\u884c\u7c7b\u578b\u8f6c\u6362\uff0c\u6bd4\u5982\u4f7f\u7528 fmt.Println(int(Init) == status) \uff0c\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u53e6\u4e00\u4e2a\u79cd\u65b9\u5f0f\uff0c \u5c31\u662f\u7ed9\u81ea\u5b9a\u4e49\u7c7b\u578b\u589e\u52a0\u65b9\u6cd5(method)\u3002 go \u5141\u8bb8\u6211\u4eec\u7ed9\u81ea\u5b9a\u4e49\u7c7b\u578b\u5b9a\u4e49\u65b9\u6cd5\uff0c\u6240\u8c13\u7684\u65b9\u6cd5\u5176\u5b9e\u5c31\u662f\u6709\u63a5\u6536\u8005(receiver)\u7684\u51fd\u6570\uff0c\u4e4b\u524d\u6211\u4eec\u5df2\u7ecf\u4ecb\u7ecd\u8fc7\u51fd\u6570\u7684\u5b9a\u4e49\u683c\u5f0f\u5982\u4e0b\uff1a 1 2 3 func functionName ( optionalParameters ) optionalReturnType { body } \u65b9\u6cd5\u7684\u5b9a\u4e49\u65b9\u5f0f\u6bd4\u8f83\u7c7b\u4f3c\uff0c\u53ea\u4e0d\u8fc7\u591a\u4e86\u4e00\u4e2a\u63a5\u6536\u8005\uff0c\u4f60\u53ef\u4ee5\u7406\u89e3\u4e3a\u65b9\u6cd5\u5c31\u662f\u6709\u63a5\u6536\u8005\u7684\u51fd\u6570\uff0c\u5b83\u7684\u683c\u5f0f\u5982\u4e0b\uff1a 1 2 3 func ( r Receiver ) functionName ( optionalParameters ) optionalReturnType { body } \u6bd4\u5982\u6211\u4eec\u8981\u7ed9 Enum \u5b9a\u4e00\u4e2a\u65b9\u6cd5\u53eb\u505a Int()\uff0c\u5b83\u8fd4\u56de Enum \u5bf9\u5e94\u7684 int \u503c\uff0c\u53ef\u4ee5\u8fd9\u4e48\u5199: 1 2 3 func ( e Enum ) Int () int { return int ( e ) } \u8fd9\u6837\u4e00\u6765\u5c31\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 1 2 3 4 func main () { status := 0 fmt . Println ( Init . Int () == status ) // \u8c03\u7528 Init \u7684 Int \u65b9\u6cd5\u8fd4\u56de int } \u4e00\u822c\u4e1a\u52a1\u4ee3\u7801\u91cc\u8fb9\u6211\u4eec\u8fd8\u4f1a\u7ed9\u6240\u6709\u72b6\u6001\u5b9a\u4e49\u5bf9\u5e94\u7684\u4e2d\u6587\u6216\u8005\u82f1\u6587\u5b57\u7b26\u4e32\uff0c\u5b8c\u6574\u7684\u4ee3\u7801\u548c\u4f7f\u7528\u793a\u4f8b\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 package main import \"fmt\" // \u81ea\u5b9a\u4e49\u4e00\u4e2a Enum\u7c7b\u578b type Enum int const ( // \u8fd9\u91cc\u5982\u679c\u662f\u81ea\u589e\u7528 iota \u66f4\u597d Init Enum = 0 Success Enum = 1 Fail Enum = 2 // \u679a\u4e3e\u5bf9\u5e94\u7684\u4e2d\u6587 InitName = \"\u521d\u59cb\u5316\" SuccessName = \"\u6210\u529f\" FailName = \"\u5931\u8d25\" ) func ( e Enum ) Int () int { return int ( e ) } func ( e Enum ) String () string { return [] string { InitName , SuccessName , FailName , }[ e ] } func main () { // \u6d4b\u8bd5\u4e00\u4e0b\u6211\u4eec\u81ea\u5df1\u5b9a\u4e49\u7684 Enum status := 0 fmt . Println ( Init . Int () == status ) status2 := Fail fmt . Println ( status2 . String ()) } \u8fd9\u6837\u6211\u4eec\u5c31\u81ea\u5df1\u5b9a\u4e49\u4e86\u4e00\u4e2a\u4e1a\u52a1\u4ee3\u7801\u5e38\u7528\u7684\u679a\u4e3e\u7c7b\u578b\uff0c\u901a\u8fc7\u7ed9\u81ea\u5b9a\u4e49\u7c7b\u578b\u6dfb\u52a0\u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u7ed9\u7c7b\u578b\u52a0\u5165\u975e\u5e38\u591a\u6709\u7528\u7684\u529f\u80fd\u3002 \u53ef\u4ee5\u770b\u5230\u65b9\u6cd5\u548c\u666e\u901a\u51fd\u6570\u76f8\u6bd4\uff0c\u5c31\u662f\u591a\u4e86\u4e00\u4e2a\u63a5\u6536\u8005\uff0c func (e Enum) String() string {} \uff0c\u4e4b\u540e\u5b66\u4e60 struct \u5b9a\u4e49\u65b9\u6cd5\u7684\u65f6\u5019\u4e5f\u662f\u7c7b\u4f3c\u7684\u3002 \u9664\u4e86\u57fa\u672c\u7c7b\u578b\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u81ea\u5b9a\u4e49\u4e00\u4e9b\u590d\u6742\u7c7b\u578b\uff0c\u6bd4\u5982\u4ee5\u4e0b\u4e00\u4e9b\u4f8b\u5b50\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 func main () { // \u5b9a\u4e49\u4e00\u4e2a counter \u7c7b\u578b type Counter map [ string ] int c := Counter {} c [ \"word\" ] ++ fmt . Println ( c ) type Queue [] int q := make ( Queue , 0 ) q = append ( q , 1 ) fmt . Println ( q ) } \u53ef\u4ee5\u770b\u5230\u76f8\u6bd4\u4f7f\u7528\u5185\u7f6e\u7c7b\u578b\uff0c\u6211\u4eec\u81ea\u5df1\u547d\u540d\u7684 Counter/Queue \u7b49\u542b\u4e49\u66f4\u52a0\u6e05\u6670\u548c\u660e\u786e\uff0c\u8fd8\u80fd\u901a\u8fc7\u589e\u52a0\u65b9\u6cd5\u5b9e\u73b0\u66f4\u591a\u529f\u80fd\u3002 \u9664\u4e86\u57fa\u4e8e\u5185\u7f6e\u7c7b\u578b\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528 go \u63d0\u4f9b\u7684\u7ed3\u6784\u4f53 struct \u6765\u5b9a\u4e49\u81ea\u5df1\u7684\u7c7b\u578b\u3002\u4e0b\u4e00\u7bc7\u6587\u7ae0\u5c06\u4ecb\u7ecd\u4e0b\u5982\u4f55\u4f7f\u7528 struct \u6765\u5b9e\u73b0\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u3002","title":"\u7ed9\u81ea\u5b9a\u4e49\u7c7b\u578b\u6dfb\u52a0\u65b9\u6cd5"},{"location":"basics/07_oop/oop/#_4","text":"\u901a\u8fc7\u770b\u4e00\u4e9b go \u7684\u6e90\u7801\uff0c\u6211\u4eec\u53ef\u4ee5\u5b66\u4e60\u5e76\u4e14\u6a21\u4eff go \u7684\u60ef\u7528\u6cd5\uff0c\u6bd4\u5982\u672c\u6587\u63d0\u5230\u7684 Enum \u7c7b\u578b\uff0c\u5728 go \u7684\u6e90\u7801\u4f60\u53ef\u4ee5\u627e\u5230\u7c7b\u4f3c\u5b9e\u73b0\u3002 \u4ee5\u4e0b\u662f go \u7684\u5185\u7f6e\u7684 http server \u4e2d\u5173\u4e8e\u679a\u4e3e\u7684\u5b9e\u73b0\u65b9\u5f0f(\u53bb\u6389\u4e86\u6ce8\u91ca)\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 // https://golang.google.cn/src/net/http/server.go type ConnState int const ( StateNew ConnState = iota StateActive StateIdle StateHijacked StateClosed ) var stateName = map [ ConnState ] string { StateNew : \"new\" , StateActive : \"active\" , StateIdle : \"idle\" , StateHijacked : \"hijacked\" , StateClosed : \"closed\" , } func ( c ConnState ) String () string { return stateName [ c ] } \u5728\u4f60\u7684\u4e1a\u52a1\u4ee3\u7801\u4e2d\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u7c7b\u4f3c\u7684\u65b9\u5f0f\u6765\u5b9e\u73b0\u679a\u4e3e\u7c7b\u578b\u3002\u7ecf\u5e38\u5728\u8c03\u7528\u4e00\u4e9b\u5185\u7f6e\u51fd\u6570\u7684\u65f6\u5019\u8df3\u8fdb\u53bb\u770b\u770b\uff0c\u53ef\u4ee5\u8ba9\u4f60\u5b66\u5230\u5f88\u591a go \u7684 \u4e60\u60ef\u7528\u6cd5\uff0c\u4e5f\u63a8\u8350\u4f60\u7ecf\u5e38\u770b\u770b\u3002","title":"\u6e90\u7801\u5ef6\u4f38"},{"location":"basics/07_oop/oop/#_5","text":"\u8bf7\u4f60\u7ed9 Enum \u5b9e\u73b0\u5bf9\u5e94\u7684\u8fd4\u56de\u82f1\u6587\u540d\u79f0\u7684\u529f\u80fd \u5c1d\u8bd5\u4f7f\u7528\u81ea\u5df1\u5b9a\u4e49\u7684 Counter \u7c7b\u578b\u6765\u7edf\u8ba1\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u4e0d\u540c\u5355\u8bcd\u7684\u4e2a\u6570\uff0c\u4f60\u53ef\u4ee5\u7edf\u8ba1\u4e00\u4e2a\u6587\u4ef6\u4e2d\u7684\u5355\u8bcd\u4e2a\u6570\u4e48\uff1f","title":"\u5c0f\u7ec3\u4e60"},{"location":"basics/07_oop/oop/#_6","text":"Ultimate Visual Guide to Go Enums and iota","title":"\u53c2\u8003"},{"location":"basics/08_struct/struct/","text":"go struct \u00b6 Quote I think a lot of new programmers like to use advanced data structures and advanced language features as a way of demonstrating their ability. I call it the lion-tamer syndrome. Such demonstrations are impressive, but unless they actually translate into real wins for the project, avoid them. - Glyn Williams go \u652f\u6301 OOP \u4e48\uff1f \u00b6 \u7ec6\u5fc3\u7684\u4f60\u53ef\u80fd\u53d1\u73b0\u4e86\uff0cgo \u8fde class \u5173\u952e\u5b57\u90fd\u6ca1\u6709\uff0c\u5982\u4f55\u652f\u6301\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u5462\uff1f\u6d41\u884c\u7684\u7f16\u7a0b\u8bed\u8a00\u4e00\u822c\u90fd\u652f\u6301\u5b9a\u4e49\u4e00\u4e2a\u7c7b\uff0c\u7c7b\u91cc\u8fb9\u6709\u6570\u636e(data)\u548c\u65b9\u6cd5(method)\u3002 go \u867d\u7136\u6ca1\u6709\u63d0\u4f9b class \u5173\u952e\u8bcd\uff0c\u4f46\u662f\u63d0\u4f9b\u4e86 struct \u7528\u6765\u5b9a\u4e49\u81ea\u5df1\u7684\u7c7b\u578b\uff0cstruct \u91cc\u53ef\u4ee5\u653e\u5165\u9700\u8981\u7684\u6570\u636e\u6210\u5458\uff0c\u5e76\u4e14\u53ef\u4ee5\u7ed9\u81ea\u5b9a\u4e49 struct \u589e\u52a0\u65b9\u6cd5\u3002 \u4f7f\u7528 struct \u81ea\u5b9a\u4e49\u7c7b\u578b \u00b6 \u6211\u4eec\u5f00\u59cb\u4f7f\u7528 go \u7684 struct \u6765\u770b\u4e00\u4e0b go \u91cc\u8fb9\u662f\u5982\u4f55\u5b9e\u73b0\u7c7b\u4f3c\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u7684\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u7684\u3002\u5728 go \u8bed\u8a00\u91cc\uff0c\u6211\u4eec\u4f7f\u7528 struct \u6765\u5b9a\u4e49\u4e00\u4e2a\u65b0\u7684\u7c7b\u578b\uff0c\u8fd9\u548c\u4f7f\u7528 class \u975e\u5e38\u50cf\uff0c\u6bd4\u5982\u8fd9\u91cc\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u7b80\u5355\u7684\u52a8\u7269\u7ed3\u6784\uff08\u7c7b\uff09\uff0c\u5305\u542b Name \u548c Age \u6210\u5458\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 package main import \"fmt\" type Animal struct { Name string Age int } func main () { a := Animal { Name : \"dog\" , Age : 3 } fmt . Println ( a , a . Name , a . Age ) } ok\uff0c\u7136\u540e\u8fd8\u53ef\u4ee5\u7ed9 struct \u5b9a\u4e49\u65b9\u6cd5\uff0c\u6bd4\u5982\u52a8\u7269\u90fd\u9700\u8981\u7761\u89c9\uff0c\u6240\u4ee5\u6211\u4eec\u7ed9\u5b83\u6dfb\u52a0\u4e00\u4e2a\u65b9\u6cd5\u53eb\u505a Sleep\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 package main import \"fmt\" type Animal struct { Name string Age int } func ( a Animal ) Sleep () { fmt . Printf ( \"%s is sleeping\" , a . Name ) } func main () { a := Animal { Name : \"dog\" , Age : 3 } fmt . Println ( a , a . Name , a . Age ) a . Sleep () } \u8fd9\u6837\u5b9a\u4e49\u65e2\u6709\u6570\u636e\u53c8\u6709\u4e86\u65b9\u6cd5\uff0c\u662f\u4e0d\u662f\u548c\u7c7b\u6bd4\u8f83\u50cf\u4e86\uff0c\u8fd9\u5c31\u662f\u5728 go \u4e2d\u4f7f\u7528 OOP \u7684\u65b9\u5f0f\u3002\u5f53\u7136\u4e86 OOP \u8fd8\u8fdc\u4e0d\u6b62\u8fd9\u4e9b\uff0c\u6bd4\u5982\u4f20\u7edf\u7684 \u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u8fd8\u6709\u8bbf\u95ee\u63a7\u5236\uff0c\u6784\u9020\u51fd\u6570\uff0c\u7ee7\u627f\uff0c\u591a\u6001\u7b49\u6982\u5ff5\uff0c\u6211\u4eec\u4f1a\u770b\u4e00\u4e0b\u5b83\u4eec\u662f\u5982\u4f55\u5728 go \u91cc\u8fb9\u5b9e\u73b0\u7684\uff0cgo \u7684\u65b9\u5f0f\u548c Python/Java \u7b49\u5b9e\u73b0\u8fd8\u662f\u6709\u633a\u5927\u533a\u522b\u7684\u3002 \u8bbf\u95ee\u63a7\u5236 \u00b6 \u5728 Java \u548c C++ \u4e2d\uff0c\u5bf9\u4e8e\u7c7b\u7684\u6210\u5458\u6709\u7740\u6bd4\u8f83\u4e25\u683c\u7684\u8bbf\u95ee\u63a7\u5236\uff0c\u6bd4\u5982\u5bf9\u6210\u5458\u6709 public/private \u7b49\u5173\u952e\u8bcd\u7528\u6765\u58f0\u660e\u5b83\u7684\u8bbf\u95ee\u6743\u9650\u3002\u4f46\u662f\u50cf\u662f Python \u7684\u5b9e\u73b0\u5c31\u6ca1\u6709\u90a3\u4e48\u4e25\u683c\uff0cPython \u91cc\u8fb9\u662f\u901a\u8fc7\u547d\u540d\u7684\u65b9\u5f0f\u6765\u7ea6\u5b9a\u7684\uff0c\u6bd4\u5982\u79c1\u6709\u65b9\u6cd5\u548c\u6210\u5458\u4e00\u822c\u662f\u7528\u4e0b\u5212\u7ebf\u5f00\u5934\uff0c\u544a\u8bc9\u8c03\u7528\u8005\u8fd9\u4e2a\u662f \u7c7b\u7684\u79c1\u6709\u65b9\u6cd5\u548c\u6210\u5458\uff0c\u4f60\u4e0d\u5e94\u8be5\u76f4\u63a5\u4f7f\u7528\u5b83\u4eec\uff0c\u800c\u662f\u4f7f\u7528\u66b4\u9732\u51fa\u53bb\u7684\u516c\u6709\u65b9\u6cd5\u3002\u4f46\u8fd9\u53ea\u662f\u4e00\u4e2a\u300e\u541b\u5b50\u534f\u5b9a\u300f\uff0c\u5982\u679c\u7c7b\u7684\u8bbe\u8ba1\u8005\u6ca1\u6709 \u8bbe\u8ba1\u5b8c\u5584\uff0c\u8ba9\u4f60\u975e\u8981\u53bb\u8bbf\u95ee\u4e0b\u5212\u7ebf\u5f00\u5934\u7684\u300e\u79c1\u6709\u65b9\u6cd5\u300f\uff0c\u5176\u5b9e python \u4e5f\u4e0d\u4f1a\u7981\u6b62\u3002 Go \u4e5f\u6709\u7c7b\u4f3c\u7684\u8bbf\u95ee\u63a7\u5236\uff0c\u4e0d\u8fc7\u662f\u901a\u8fc7\u6570\u636e\u548c\u65b9\u6cd5\u7684\u547d\u540d \u9996\u5b57\u6bcd\u5927\u5c0f\u5199 \u51b3\u5b9a\u7684\u3002\u5728 Go \u7684\u5305(package)\u4e2d\uff0c\u53ea\u6709\u9996\u5b57\u6bcd\u5927\u5199\u7684\u624d\u80fd\u88ab\u5176\u4ed6\u5305 \u5bfc\u5165\u4f7f\u7528\uff0c\u5c0f\u5199\u5f00\u5934\u7684\u5219\u4e0d\u884c\u3002\u6240\u4ee5\u4e00\u822c\u7ed3\u6784\u4f53\u7684\u79c1\u6709\u6570\u636e\u6210\u5458\u548c\u65b9\u6cd5\uff0c\u6211\u4eec\u4f7f\u7528\u5c0f\u5199\u5f00\u5934\uff0c\u800c\u516c\u6709\u7684\u6570\u636e\u6210\u5458\u548c\u65b9\u6cd5\uff0c\u6211\u4eec\u4f7f\u7528\u5927\u5199\u5f00\u5934\u5c31\u597d\u4e86\u3002 \u6211\u4eec\u73b0\u5728\u7ed9 Animal \u52a0\u4e0a\u4e00\u4e2a\u79c1\u6709\u7684\u6570\u636e\u6210\u5458\u53eb\u505a petName \u8868\u793a\u52a8\u7269\u7684\u5c0f\u540d\uff0c\u540c\u65f6\u65b0\u589e\u4e00\u4e2a\u65b9\u6cd5\u53eb\u505a SetPetName \u7528\u6765\u8bbe\u7f6e\u5b83\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 package main import \"fmt\" type Animal struct { Name string Age int petName string } func ( a Animal ) Sleep () { fmt . Printf ( \"%s is sleeping\" , a . Name ) } func ( a Animal ) SetPetName ( petName string ) { a . petName = petName } func main () { a := Animal { Name : \"dog\" , Age : 3 } fmt . Println ( a , a . Name , a . Age ) a . Sleep () a . SetPetName ( \"little dog\" ) fmt . Println ( a . petName ) // \u4e3a\u4ec0\u4e48\u6ca1\u6709\u8bbe\u7f6e\u6210\u529f\uff1f } \u6253\u5370\u4e0a\u8fb9\u4ee3\u7801\u770b\u4e0b\u7ed3\u679c\uff1f\u7b26\u5408\u4f60\u7684\u9884\u671f\u4e48\uff1f\u5982\u679c\u6ca1\u6709\u6b63\u786e\u8bbe\u7f6e petName \u4e3a\u4ec0\u4e48\u5462\uff1f \u6307\u9488\u63a5\u6536\u8005(pointer receiver) vs \u503c\u63a5\u6536\u8005(value receiver) \u00b6 \u5728\u51fd\u6570\u7ae0\u8282\u6211\u4eec\u8bb2\u5230\u8fc7\u51fd\u6570\u7684\u53c2\u6570\u4f20\u9012\u90fd\u662f\u901a\u8fc7\u503c\u8fdb\u884c\u4f20\u9012\u7684\uff0c\u4e5f\u5c31\u662f\u4f1a\u590d\u5236\u53c2\u6570\u7684\u503c\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u4fee\u6539\u4f20\u5165\u7684\u503c\uff0c\u5c31\u9700\u8981\u4f20\u9012\u4e00\u4e2a\u6307\u9488\uff0c \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u4e0a\u8fb9\u7684 SetPetName \u65b9\u6cd5\u6ca1\u6709\u8d77\u4f5c\u7528\u7684\u539f\u56e0\u3002\u5982\u679c\u6211\u4eec\u60f3\u8981\u4fee\u6539\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u5c31\u9700\u8981\u4f20\u5165\u4e00\u4e2a\u7ed3\u6784\u4f53\u6307\u9488\u4f5c\u4e3a\u63a5\u6536\u8005\uff1a (\u6ce8\u610f\u8fd9\u91cc\u4f9d\u7136\u662f\u503c\u62f7\u8d1d\uff0c\u4e0d\u8fc7\u62f7\u8d1d\u7684\u662f\u6307\u9488\u7684\u503c\u800c\u4e0d\u662f\u6574\u4e2a\u7ed3\u6784\u4f53\u7684\u503c\uff0c\u901a\u8fc7\u6307\u9488\u5c31\u53ef\u4ee5\u4fee\u6539\u5bf9\u5e94\u7684\u7ed3\u6784\u4f53) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 package main import \"fmt\" type Animal struct { Name string Age int petName string } func ( a Animal ) Sleep () { fmt . Printf ( \"%s is sleeping\" , a . Name ) } func ( a * Animal ) SetPetName ( petName string ) { a . petName = petName // NOTE: \u8fd9\u91cc\u7684 a \u662f\u4e00\u4e2a\u6307\u9488 // NOTE: \u4ee5\u4e0b\u8fd9\u79cd\u65b9\u5f0f\u4e5f\u662f\u53ef\u4ee5\u7684\uff0cgo \u5982\u679c\u78b0\u5230\u6307\u9488\u4f1a\u81ea\u52a8\u5e2e\u6211\u4eec\u5904\u7406\uff0c\u6240\u4ee5\u4f7f\u7528\u8d77\u6765\u66f4\u65b9\u4fbf // (*a).petName = petName } func main () { aPtr := & Animal { Name : \"dog\" , Age : 3 } aPtr . SetPetName ( \"little dog\" ) fmt . Println ( aPtr . petName ) // \u662f\u4e0d\u662f\u53ef\u4ee5\u8bbe\u7f6e\u6210\u529f\u4e86 } \u8fd0\u884c\u4ee3\u7801\u4f60\u5c31\u4f1a\u53d1\u73b0\u6211\u4eec\u6210\u529f\u4fee\u6539\u4e86 Animal \u7684 petName \u6210\u5458\u4e86\u3002\u4e00\u822c\u5982\u679c\u5fc5\u987b\u9700\u8981\u4fee\u6539\u7ed3\u6784\u4f53\uff0c\u6216\u8005\u7ed3\u6784\u4f53\u6570\u636e\u6210\u5458\u6bd4\u8f83\u591a\uff08\u51cf\u5c11\u590d\u5236\u6210\u672c\uff09\uff0c \u6211\u4eec\u5c31\u9700\u8981\u4f7f\u7528\u6307\u9488\u63a5\u6536\u8005\u3002\u5982\u679c\u4f60\u4e0d\u597d\u5224\u65ad\u4f7f\u7528\u6307\u9488\u8fd8\u662f\u503c\u63a5\u6536\u8005\uff0c\u63a8\u8350\u4f60\u4f7f\u7528\u6307\u9488\u63a5\u6536\u8005\u3002(\u6ce8\u610f\u4e00\u822c\u6211\u4eec\u4f7f\u7528\u975e\u5e38\u7b80\u77ed\u7684\u540d\u79f0\u7ed9receiver\u547d\u540d) Warning \u6ce8\u610f\u4ee3\u7801\u91cc\u7684 NOTE \u6ce8\u91ca\uff0cgo \u91cc\u63d0\u4f9b\u4e86\u7b80\u5316\u6307\u9488\u8bbf\u95ee\u6210\u5458\u7684\u65b9\u5f0f\uff0c\u6bd4\u5982\u6211\u4eec\u6ca1\u6709\u4f7f\u7528 (*a).petName \u800c\u662f\u76f4\u63a5\u4f7f\u7528\u7684 a.petName = petName \u3002\u8fd9\u91cc\u5e76\u4e0d\u662f\u8bed\u6cd5\u9519\u8bef\uff0c\u800c\u662f go \u63d0\u4f9b\u7684\u4e00\u4e2a\u597d\u7528\u7684\u8bed\u6cd5\u7cd6\uff0c\u8ba9\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u7528\u8fd9\u79cd\u65b9\u5f0f\u8bbf\u95ee\u6210\u5458\u3002 \u6784\u9020\u51fd\u6570\u5982\u4f55\u5b9e\u73b0\uff1f \u00b6 \u4e0a\u6587\u6211\u4eec\u662f\u901a\u8fc7\u521d\u59cb\u5316\u4e00\u4e2a Animal \u7ed3\u6784\u4f53\u7684\u65b9\u5f0f\u521b\u5efa\u4e86\u4e00\u4e2a Animal \"\u5bf9\u8c61\"\uff0cgo \u91cc\u5e76\u6ca1\u6709\u50cf\u5176\u4ed6\u8bed\u8a00\u90a3\u6837\u63d0\u4f9b\u6784\u9020\u51fd\u6570\u7684\u65b9\u5f0f\u6765\u521b\u5efa\u4e00\u4e2a\u5bf9\u8c61(\u662f\u4e0d\u662f\u5f88\u65e0\u8da3\uff0c\u5bf9 go \u5c31\u662f\u8fd9\u4e48\u541d\u556c)\u3002 \u6211\u4eec\u77e5\u9053 go \u91cc\u8fb9\u521b\u5efa\u4e00\u4e2a\u7a7a\u7ed3\u6784\u4f53\u7684\u65f6\u5019\uff0c\u4e0d\u540c\u7c7b\u578b\u7684\u6210\u5458\u88ab\u8d4b\u503c\u6210\u5176\u7c7b\u578b\u7684\u300e\u96f6\u503c\u300f\uff0c\u6bd4\u5982\u5bf9\u4e8e Animal \u91cc\u7684 Name(string)\u662f\u7a7a\u5b57\u7b26\u4e32, Age(int) \u662f 0\u3002 \u90a3\u5982\u679c\u6211\u4eec\u60f3\u521b\u5efa\u4e00\u4e2a Animal \u7684\u65f6\u5019\u6839\u636e\u4f20\u5165\u7684\u53c2\u6570\u6765\u521d\u59cb\u5316\u5462\uff1fgo \u91cc\u8fb9\u867d\u7136\u6ca1\u6709\u76f4\u63a5\u63d0\u4f9b\u6784\u9020\u51fd\u6570\uff0c\u4f46\u662f\u4e00\u822c\u6211\u4eec\u662f\u901a\u8fc7\u5b9a\u4e49\u4e00\u4e9b NewXXX \u5f00\u5934\u7684\u51fd\u6570\u6765\u5b9e\u73b0\u6784\u9020\u51fd\u6570\u7684\u529f\u80fd\u7684\uff0c\u6bd4\u5982\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a NewAnimal \u51fd\u6570\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 package main import \"fmt\" type Animal struct { Name string Age int petName string } func ( a Animal ) Sleep () { fmt . Printf ( \"%s is sleeping\\n\" , a . Name ) } func NewAnimal ( name string , age int ) * Animal { a := Animal { Name : name , Age : age , } return & a } func main () { a := NewAnimal ( \"cat\" , 3 ) fmt . Println ( a ) } \u8fd9\u6837\u6211\u4eec\u5c31\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7c7b\u4f3c\u6784\u9020\u51fd\u6570\u7684\u529f\u80fd\uff0c\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u6839\u636e\u4e0d\u540c\u7684\u9700\u6c42\u6765\u5b9a\u4e49\u591a\u4e2a\u6784\u9020\u51fd\u6570\u3002 \u7ec4\u5408 vs \u7ee7\u627f \u00b6 \u4e0a\u6587\u5b66\u4e60\u4e86\u5982\u4f55\u5b9a\u4e49 go \u7684 \"\u5bf9\u8c61\"\uff0c\u6211\u4eec\u7ed9 struct \u52a0\u5165\u4e86\u6570\u636e\u6210\u5458\u548c\u65b9\u6cd5\uff0c\u8fd8\u5b9e\u73b0\u4e86\u6784\u9020\u51fd\u6570\uff0c\u770b\u8d77\u6765\u7a0d\u5fae\u6709\u70b9\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u7684\u610f\u601d\u4e86\u3002 OOP \u4e2d\u8fd8\u6709\u4e00\u4e2a\u91cd\u8981\u7684\u6982\u5ff5\u5c31\u662f\u7ee7\u627f\uff0c\u901a\u8fc7\u7ee7\u627f\u5b9e\u73b0\u4e86 is-a \u7684\u7c7b\u5173\u7cfb\uff0c\u53ef\u4ee5\u5f88\u597d\u5730\u8fdb\u884c\u4ee3\u7801\u590d\u7528\u3002\u4f46\u662f go \u53ef\u80fd\u53c8\u8981\u8ba9\u4f60\u5931\u671b\u4e86\uff0c\u4f60\u4f1a \u53d1\u73b0 go \u5e76\u4e0d\u76f4\u63a5\u652f\u6301 struct \u4e4b\u95f4\u7684\u7ee7\u627f\u3002 \u90a3\u5982\u679c\u6211\u4eec\u60f3\u5b9e\u73b0\u7c7b\u4f3c\u7ee7\u627f\u7684\u529f\u80fd\u8be5\u600e\u4e48\u529e\u5462\uff1f\u5176\u5b9e go \u4e5f\u6709\u7c7b\u4f3c\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u4e0d\u8fc7 go \u4f7f\u7528\u7684\u4e0d\u662f\u7ee7\u627f\u800c\u662f\u7ec4\u5408\uff0cgo \u4f5c\u8005\u63a8\u5d07\u7684 \u601d\u60f3\u662f\u300e\u7ec4\u5408\u4f18\u4e8e\u7ee7\u627f\u300f\u3002go \u63d0\u4f9b\u4e86\u7ed3\u6784\u4f53\u7684\u5d4c\u5165(embedding)\u7528\u6765\u5b9e\u73b0\u4ee3\u7801\u590d\u7528\uff0c\u6bd4\u5982\u5982\u679c\u6211\u4eec\u60f3\u5b9a\u4e49\u4e00\u4e2a Dog \u7ed3\u6784\u4f53\uff0cDog \u4e5f\u662f\u4e00\u4e2a Animal\uff0c\u6211\u4eec\u60f3\u590d\u7528 Animal \u91cc\u7684\u6210\u5458\uff0c\u53ef\u4ee5\u5728 Dog struct \u91cc\u5d4c\u5165\u4e00\u4e2a Animal: 1 2 3 4 5 6 7 8 9 10 11 type Dog struct { Animal // embedding Color string } func main () { d := Dog {} d . Name = \"dog\" d . Sleep () } \u4f60\u4f1a\u53d1\u73b0\u5728 Dog \u91cc\u5d4c\u5165\u4e86 Animal \u4ee5\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528 Animal \u7684\u6210\u5458\u548c\u65b9\u6cd5\u4e86\uff0c\u4ece\u800c\u5b9e\u73b0\u4e86\u4ee3\u7801\u590d\u7528\uff0c\u662f\u4e0d\u662f\u5b9e\u73b0\u8d77\u6765\u5f88\u7b80\u5355\u3002 \u6211\u4eec\u8fd8\u53ef\u4ee5\u91cd\u5199 Dog \u81ea\u5df1\u7684 Sleep \u65b9\u6cd5\uff0c\u6765\u8986\u76d6\u6389 Animal \u7684 Sleep \u65b9\u6cd5\uff0c\u7ed9 Dog \u589e\u52a0\u4e00\u4e2a\u65b9\u6cd5: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 type Dog struct { Animal // embedding Color string } func ( d Dog ) Sleep () { fmt . Println ( \"Dog method Sleep\" ) } func main () { d := Dog {} d . Name = \"dog\" d . Sleep () // \u8f93\u51fa\u7684\u662f Dog \u7684 Sleep \u65b9\u6cd5\u800c\u4e0d\u662f Animal \u7684 } \u7c7b\u4f3c\u7684\uff0c\u5982\u679c\u5d4c\u5165\u7684 struct \u91cc\u7684\u6210\u5458\u540d\u5b57\u548c\u5f53\u524d struct \u540c\u540d\u51b2\u7a81\u4e86\uff0cgo \u4f1a\u4f18\u5148\u4f7f\u7528\u5f53\u524d struct \u7684\u6210\u5458\u3002 \u5230\u8fd9\u91cc\u6211\u4eec\u5c31\u5927\u6982\u5b66\u4e60\u4e86 go \u4f7f\u7528 struct \u6765\u5b9e\u73b0 OOP \u7684\u65b9\u5f0f\uff0c\u53ef\u4ee5\u770b\u5f97\u51fa\u548c\u5e38\u7528\u7684\u7f16\u7a0b\u8bed\u8a00 Java/C++/Python \u7b49\u8fd8\u662f\u6709\u4e0d\u5c11\u7684\u533a\u522b\u7684\u3002 \u603b\u5f97\u6765\u8bf4\uff0cgo \u7684\u8bbe\u8ba1\u5c31\u662f\u5927\u9053\u81f3\u7b80\uff0c\u6ca1\u6709\u5176\u4ed6\u8bed\u8a00\u90a3\u4e48\u591a\u590d\u6742\u7684\u6982\u5ff5\u548c\u8bed\u6cd5\u7cd6\uff0c\u751a\u81f3\u8ba9\u4eba\u611f\u89c9\u6bd4\u8f83\u300e\u7b80\u964b\u300f\u3002\u4f46\u662f\u7528\u591a\u4e86\u4f60\u4f1a\u53d1\u73b0\uff0cgo \u7684\u8fd9\u79cd\u8bbe\u8ba1\u7cbe\u7b80\u5e76\u4e14\u591f\u7528\uff0c\u5e76\u4e14\u5927\u5927\u7b80\u5316\u4e86\u4ee3\u7801\u7684\u5b66\u4e60\u548c\u4e0a\u624b\u6210\u672c\u3002 \u591a\u6001 \u00b6 \u5230\u8fd9\u91cc\u6211\u4eec\u8fd8\u6709\u4e00\u4e2a OOP \u4e2d\u91cd\u8981\u7684\u6982\u5ff5\u6ca1\u6709\u4ecb\u7ecd\uff0c\u5c31\u662f\u591a\u6001\u7684\u6982\u5ff5\u3002\u7b80\u5355\u7684\u8bf4\uff0c\u591a\u6001\u5c31\u662f\u540c\u4e00\u4e2a\u63a5\u53e3\uff0c\u5bf9\u4e8e\u4e0d\u540c\u7684\u5b9e\u4f8b\u6267\u884c\u4e0d\u540c\u7684\u64cd\u4f5c\u3002 \u4e0b\u4e00\u7ae0\u6211\u4eec\u5c06\u4ecb\u7ecd\u4e0b go \u7684\u63a5\u53e3(interface)\uff0c\u4ee5\u53ca\u5982\u4f55\u5728 go \u4e2d\u5b9e\u73b0\u591a\u6001\u3002 \u5e8f\u5217\u5316 \u00b6 \u5982\u679c\u60f3\u8981\u901a\u8fc7\u7f51\u7edc\u8fdb\u884c\u4f20\u8f93\uff0c\u6211\u4eec\u5c31\u9700\u8981\u4f7f\u7528\u5e8f\u5217\u5316\u534f\u8bae\uff0c\u5c06 go \u7684\u7ed3\u6784\u4f53\u6309\u7167\u4e00\u79cd\u65b9\u5f0f\u7f16\u7801\u6210\u5b57\u8282\u4e32\u3002 \u5e38\u89c1\u7684\u5e8f\u5217\u5316\u65b9\u5f0f\u6709 json/protobuf \u7b49\uff0c\u5982\u679c\u4f60\u7f16\u5199 web \u670d\u52a1\u7684\u8bdd\u5bf9\u5b83\u4eec\u4e0d\u4f1a\u964c\u751f\u3002\u5728 go \u91cc\u662f\u901a\u8fc7\u7ed9 struct \u6dfb\u52a0 tag \u6765\u5b9e\u73b0\u7684\u3002 \u6211\u4eec\u8fd9\u91cc\u7b80\u5355\u63d0\u4e00\u4e0b\uff0c\u5728\u7f16\u5199 web \u5e94\u7528\u7684\u65f6\u5019\u4f60\u4f1a\u9891\u7e41\u4f7f\u7528\u5230\u5b83\uff0c\u6ce8\u610f\u770b Animal \u6bcf\u4e2a\u5b57\u6bb5\u540e\u8fb9\u6211\u4eec\u90fd\u52a0\u4e0a\u4e86\u540d\u4e3a json \u7684 tag\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 package main import ( \"encoding/json\" \"fmt\" \"log\" ) type Animal struct { Name string `json:\"name\"` Age int `json:\"age\"` petName string `json:\"pet_name\"` } func main () { animals := [] Animal { Animal { \"dog\" , 3 , \"little dog\" }, Animal { \"cat\" , 4 , \"little cat\" }, } bs , err := json . Marshal ( animals ) if err != nil { log . Fatal ( err ) } fmt . Println ( string ( bs )) // [{\"name\":\"dog\",\"age\":3},{\"name\":\"cat\",\"age\":4}] } \u7ec3\u4e60 \u00b6 \u4e4b\u524d\u6211\u4eec\u5b66\u8fc7 go \u7684 map\uff0c\u4f46\u662f go \u91cc\u8fb9\u6ca1\u6709\u76f4\u63a5\u63d0\u4f9b\u4e00\u4e2a set\uff0c\u8bf7\u4f60\u4f7f\u7528 struct \u5c01\u88c5\u4e00\u4e2a Set\uff0c\u5e76\u4e14\u63d0\u4f9b Add/Delete/Exist \u65b9\u6cd5 \u901a\u8fc7\u4f7f\u7528\u5d4c\u5165\u5b9e\u73b0\u4e00\u4e2a Cat struct\uff0c\u52a0\u5165\u4e00\u4e2a\u6570\u636e\u6210\u5458\u53eb\u505a Height\uff0c\u5e76\u4e14\u7ed9\u4f60\u7684 Cat \u52a0\u4e0a Eat \u65b9\u6cd5\u3002 \u53c2\u8003 \u00b6 Effective Go pointers vs. Values Object Oriented Inheritance in Go Object-oriented programming without inheritance","title":"Go struct"},{"location":"basics/08_struct/struct/#go-struct","text":"Quote I think a lot of new programmers like to use advanced data structures and advanced language features as a way of demonstrating their ability. I call it the lion-tamer syndrome. Such demonstrations are impressive, but unless they actually translate into real wins for the project, avoid them. - Glyn Williams","title":"go struct"},{"location":"basics/08_struct/struct/#go-oop","text":"\u7ec6\u5fc3\u7684\u4f60\u53ef\u80fd\u53d1\u73b0\u4e86\uff0cgo \u8fde class \u5173\u952e\u5b57\u90fd\u6ca1\u6709\uff0c\u5982\u4f55\u652f\u6301\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u5462\uff1f\u6d41\u884c\u7684\u7f16\u7a0b\u8bed\u8a00\u4e00\u822c\u90fd\u652f\u6301\u5b9a\u4e49\u4e00\u4e2a\u7c7b\uff0c\u7c7b\u91cc\u8fb9\u6709\u6570\u636e(data)\u548c\u65b9\u6cd5(method)\u3002 go \u867d\u7136\u6ca1\u6709\u63d0\u4f9b class \u5173\u952e\u8bcd\uff0c\u4f46\u662f\u63d0\u4f9b\u4e86 struct \u7528\u6765\u5b9a\u4e49\u81ea\u5df1\u7684\u7c7b\u578b\uff0cstruct \u91cc\u53ef\u4ee5\u653e\u5165\u9700\u8981\u7684\u6570\u636e\u6210\u5458\uff0c\u5e76\u4e14\u53ef\u4ee5\u7ed9\u81ea\u5b9a\u4e49 struct \u589e\u52a0\u65b9\u6cd5\u3002","title":"go \u652f\u6301 OOP \u4e48\uff1f"},{"location":"basics/08_struct/struct/#struct","text":"\u6211\u4eec\u5f00\u59cb\u4f7f\u7528 go \u7684 struct \u6765\u770b\u4e00\u4e0b go \u91cc\u8fb9\u662f\u5982\u4f55\u5b9e\u73b0\u7c7b\u4f3c\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u7684\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u7684\u3002\u5728 go \u8bed\u8a00\u91cc\uff0c\u6211\u4eec\u4f7f\u7528 struct \u6765\u5b9a\u4e49\u4e00\u4e2a\u65b0\u7684\u7c7b\u578b\uff0c\u8fd9\u548c\u4f7f\u7528 class \u975e\u5e38\u50cf\uff0c\u6bd4\u5982\u8fd9\u91cc\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u7b80\u5355\u7684\u52a8\u7269\u7ed3\u6784\uff08\u7c7b\uff09\uff0c\u5305\u542b Name \u548c Age \u6210\u5458\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 package main import \"fmt\" type Animal struct { Name string Age int } func main () { a := Animal { Name : \"dog\" , Age : 3 } fmt . Println ( a , a . Name , a . Age ) } ok\uff0c\u7136\u540e\u8fd8\u53ef\u4ee5\u7ed9 struct \u5b9a\u4e49\u65b9\u6cd5\uff0c\u6bd4\u5982\u52a8\u7269\u90fd\u9700\u8981\u7761\u89c9\uff0c\u6240\u4ee5\u6211\u4eec\u7ed9\u5b83\u6dfb\u52a0\u4e00\u4e2a\u65b9\u6cd5\u53eb\u505a Sleep\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 package main import \"fmt\" type Animal struct { Name string Age int } func ( a Animal ) Sleep () { fmt . Printf ( \"%s is sleeping\" , a . Name ) } func main () { a := Animal { Name : \"dog\" , Age : 3 } fmt . Println ( a , a . Name , a . Age ) a . Sleep () } \u8fd9\u6837\u5b9a\u4e49\u65e2\u6709\u6570\u636e\u53c8\u6709\u4e86\u65b9\u6cd5\uff0c\u662f\u4e0d\u662f\u548c\u7c7b\u6bd4\u8f83\u50cf\u4e86\uff0c\u8fd9\u5c31\u662f\u5728 go \u4e2d\u4f7f\u7528 OOP \u7684\u65b9\u5f0f\u3002\u5f53\u7136\u4e86 OOP \u8fd8\u8fdc\u4e0d\u6b62\u8fd9\u4e9b\uff0c\u6bd4\u5982\u4f20\u7edf\u7684 \u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u8fd8\u6709\u8bbf\u95ee\u63a7\u5236\uff0c\u6784\u9020\u51fd\u6570\uff0c\u7ee7\u627f\uff0c\u591a\u6001\u7b49\u6982\u5ff5\uff0c\u6211\u4eec\u4f1a\u770b\u4e00\u4e0b\u5b83\u4eec\u662f\u5982\u4f55\u5728 go \u91cc\u8fb9\u5b9e\u73b0\u7684\uff0cgo \u7684\u65b9\u5f0f\u548c Python/Java \u7b49\u5b9e\u73b0\u8fd8\u662f\u6709\u633a\u5927\u533a\u522b\u7684\u3002","title":"\u4f7f\u7528 struct \u81ea\u5b9a\u4e49\u7c7b\u578b"},{"location":"basics/08_struct/struct/#_1","text":"\u5728 Java \u548c C++ \u4e2d\uff0c\u5bf9\u4e8e\u7c7b\u7684\u6210\u5458\u6709\u7740\u6bd4\u8f83\u4e25\u683c\u7684\u8bbf\u95ee\u63a7\u5236\uff0c\u6bd4\u5982\u5bf9\u6210\u5458\u6709 public/private \u7b49\u5173\u952e\u8bcd\u7528\u6765\u58f0\u660e\u5b83\u7684\u8bbf\u95ee\u6743\u9650\u3002\u4f46\u662f\u50cf\u662f Python \u7684\u5b9e\u73b0\u5c31\u6ca1\u6709\u90a3\u4e48\u4e25\u683c\uff0cPython \u91cc\u8fb9\u662f\u901a\u8fc7\u547d\u540d\u7684\u65b9\u5f0f\u6765\u7ea6\u5b9a\u7684\uff0c\u6bd4\u5982\u79c1\u6709\u65b9\u6cd5\u548c\u6210\u5458\u4e00\u822c\u662f\u7528\u4e0b\u5212\u7ebf\u5f00\u5934\uff0c\u544a\u8bc9\u8c03\u7528\u8005\u8fd9\u4e2a\u662f \u7c7b\u7684\u79c1\u6709\u65b9\u6cd5\u548c\u6210\u5458\uff0c\u4f60\u4e0d\u5e94\u8be5\u76f4\u63a5\u4f7f\u7528\u5b83\u4eec\uff0c\u800c\u662f\u4f7f\u7528\u66b4\u9732\u51fa\u53bb\u7684\u516c\u6709\u65b9\u6cd5\u3002\u4f46\u8fd9\u53ea\u662f\u4e00\u4e2a\u300e\u541b\u5b50\u534f\u5b9a\u300f\uff0c\u5982\u679c\u7c7b\u7684\u8bbe\u8ba1\u8005\u6ca1\u6709 \u8bbe\u8ba1\u5b8c\u5584\uff0c\u8ba9\u4f60\u975e\u8981\u53bb\u8bbf\u95ee\u4e0b\u5212\u7ebf\u5f00\u5934\u7684\u300e\u79c1\u6709\u65b9\u6cd5\u300f\uff0c\u5176\u5b9e python \u4e5f\u4e0d\u4f1a\u7981\u6b62\u3002 Go \u4e5f\u6709\u7c7b\u4f3c\u7684\u8bbf\u95ee\u63a7\u5236\uff0c\u4e0d\u8fc7\u662f\u901a\u8fc7\u6570\u636e\u548c\u65b9\u6cd5\u7684\u547d\u540d \u9996\u5b57\u6bcd\u5927\u5c0f\u5199 \u51b3\u5b9a\u7684\u3002\u5728 Go \u7684\u5305(package)\u4e2d\uff0c\u53ea\u6709\u9996\u5b57\u6bcd\u5927\u5199\u7684\u624d\u80fd\u88ab\u5176\u4ed6\u5305 \u5bfc\u5165\u4f7f\u7528\uff0c\u5c0f\u5199\u5f00\u5934\u7684\u5219\u4e0d\u884c\u3002\u6240\u4ee5\u4e00\u822c\u7ed3\u6784\u4f53\u7684\u79c1\u6709\u6570\u636e\u6210\u5458\u548c\u65b9\u6cd5\uff0c\u6211\u4eec\u4f7f\u7528\u5c0f\u5199\u5f00\u5934\uff0c\u800c\u516c\u6709\u7684\u6570\u636e\u6210\u5458\u548c\u65b9\u6cd5\uff0c\u6211\u4eec\u4f7f\u7528\u5927\u5199\u5f00\u5934\u5c31\u597d\u4e86\u3002 \u6211\u4eec\u73b0\u5728\u7ed9 Animal \u52a0\u4e0a\u4e00\u4e2a\u79c1\u6709\u7684\u6570\u636e\u6210\u5458\u53eb\u505a petName \u8868\u793a\u52a8\u7269\u7684\u5c0f\u540d\uff0c\u540c\u65f6\u65b0\u589e\u4e00\u4e2a\u65b9\u6cd5\u53eb\u505a SetPetName \u7528\u6765\u8bbe\u7f6e\u5b83\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 package main import \"fmt\" type Animal struct { Name string Age int petName string } func ( a Animal ) Sleep () { fmt . Printf ( \"%s is sleeping\" , a . Name ) } func ( a Animal ) SetPetName ( petName string ) { a . petName = petName } func main () { a := Animal { Name : \"dog\" , Age : 3 } fmt . Println ( a , a . Name , a . Age ) a . Sleep () a . SetPetName ( \"little dog\" ) fmt . Println ( a . petName ) // \u4e3a\u4ec0\u4e48\u6ca1\u6709\u8bbe\u7f6e\u6210\u529f\uff1f } \u6253\u5370\u4e0a\u8fb9\u4ee3\u7801\u770b\u4e0b\u7ed3\u679c\uff1f\u7b26\u5408\u4f60\u7684\u9884\u671f\u4e48\uff1f\u5982\u679c\u6ca1\u6709\u6b63\u786e\u8bbe\u7f6e petName \u4e3a\u4ec0\u4e48\u5462\uff1f","title":"\u8bbf\u95ee\u63a7\u5236"},{"location":"basics/08_struct/struct/#pointer-receiver-vs-value-receiver","text":"\u5728\u51fd\u6570\u7ae0\u8282\u6211\u4eec\u8bb2\u5230\u8fc7\u51fd\u6570\u7684\u53c2\u6570\u4f20\u9012\u90fd\u662f\u901a\u8fc7\u503c\u8fdb\u884c\u4f20\u9012\u7684\uff0c\u4e5f\u5c31\u662f\u4f1a\u590d\u5236\u53c2\u6570\u7684\u503c\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u4fee\u6539\u4f20\u5165\u7684\u503c\uff0c\u5c31\u9700\u8981\u4f20\u9012\u4e00\u4e2a\u6307\u9488\uff0c \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u4e0a\u8fb9\u7684 SetPetName \u65b9\u6cd5\u6ca1\u6709\u8d77\u4f5c\u7528\u7684\u539f\u56e0\u3002\u5982\u679c\u6211\u4eec\u60f3\u8981\u4fee\u6539\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u5c31\u9700\u8981\u4f20\u5165\u4e00\u4e2a\u7ed3\u6784\u4f53\u6307\u9488\u4f5c\u4e3a\u63a5\u6536\u8005\uff1a (\u6ce8\u610f\u8fd9\u91cc\u4f9d\u7136\u662f\u503c\u62f7\u8d1d\uff0c\u4e0d\u8fc7\u62f7\u8d1d\u7684\u662f\u6307\u9488\u7684\u503c\u800c\u4e0d\u662f\u6574\u4e2a\u7ed3\u6784\u4f53\u7684\u503c\uff0c\u901a\u8fc7\u6307\u9488\u5c31\u53ef\u4ee5\u4fee\u6539\u5bf9\u5e94\u7684\u7ed3\u6784\u4f53) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 package main import \"fmt\" type Animal struct { Name string Age int petName string } func ( a Animal ) Sleep () { fmt . Printf ( \"%s is sleeping\" , a . Name ) } func ( a * Animal ) SetPetName ( petName string ) { a . petName = petName // NOTE: \u8fd9\u91cc\u7684 a \u662f\u4e00\u4e2a\u6307\u9488 // NOTE: \u4ee5\u4e0b\u8fd9\u79cd\u65b9\u5f0f\u4e5f\u662f\u53ef\u4ee5\u7684\uff0cgo \u5982\u679c\u78b0\u5230\u6307\u9488\u4f1a\u81ea\u52a8\u5e2e\u6211\u4eec\u5904\u7406\uff0c\u6240\u4ee5\u4f7f\u7528\u8d77\u6765\u66f4\u65b9\u4fbf // (*a).petName = petName } func main () { aPtr := & Animal { Name : \"dog\" , Age : 3 } aPtr . SetPetName ( \"little dog\" ) fmt . Println ( aPtr . petName ) // \u662f\u4e0d\u662f\u53ef\u4ee5\u8bbe\u7f6e\u6210\u529f\u4e86 } \u8fd0\u884c\u4ee3\u7801\u4f60\u5c31\u4f1a\u53d1\u73b0\u6211\u4eec\u6210\u529f\u4fee\u6539\u4e86 Animal \u7684 petName \u6210\u5458\u4e86\u3002\u4e00\u822c\u5982\u679c\u5fc5\u987b\u9700\u8981\u4fee\u6539\u7ed3\u6784\u4f53\uff0c\u6216\u8005\u7ed3\u6784\u4f53\u6570\u636e\u6210\u5458\u6bd4\u8f83\u591a\uff08\u51cf\u5c11\u590d\u5236\u6210\u672c\uff09\uff0c \u6211\u4eec\u5c31\u9700\u8981\u4f7f\u7528\u6307\u9488\u63a5\u6536\u8005\u3002\u5982\u679c\u4f60\u4e0d\u597d\u5224\u65ad\u4f7f\u7528\u6307\u9488\u8fd8\u662f\u503c\u63a5\u6536\u8005\uff0c\u63a8\u8350\u4f60\u4f7f\u7528\u6307\u9488\u63a5\u6536\u8005\u3002(\u6ce8\u610f\u4e00\u822c\u6211\u4eec\u4f7f\u7528\u975e\u5e38\u7b80\u77ed\u7684\u540d\u79f0\u7ed9receiver\u547d\u540d) Warning \u6ce8\u610f\u4ee3\u7801\u91cc\u7684 NOTE \u6ce8\u91ca\uff0cgo \u91cc\u63d0\u4f9b\u4e86\u7b80\u5316\u6307\u9488\u8bbf\u95ee\u6210\u5458\u7684\u65b9\u5f0f\uff0c\u6bd4\u5982\u6211\u4eec\u6ca1\u6709\u4f7f\u7528 (*a).petName \u800c\u662f\u76f4\u63a5\u4f7f\u7528\u7684 a.petName = petName \u3002\u8fd9\u91cc\u5e76\u4e0d\u662f\u8bed\u6cd5\u9519\u8bef\uff0c\u800c\u662f go \u63d0\u4f9b\u7684\u4e00\u4e2a\u597d\u7528\u7684\u8bed\u6cd5\u7cd6\uff0c\u8ba9\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u7528\u8fd9\u79cd\u65b9\u5f0f\u8bbf\u95ee\u6210\u5458\u3002","title":"\u6307\u9488\u63a5\u6536\u8005(pointer receiver) vs \u503c\u63a5\u6536\u8005(value receiver)"},{"location":"basics/08_struct/struct/#_2","text":"\u4e0a\u6587\u6211\u4eec\u662f\u901a\u8fc7\u521d\u59cb\u5316\u4e00\u4e2a Animal \u7ed3\u6784\u4f53\u7684\u65b9\u5f0f\u521b\u5efa\u4e86\u4e00\u4e2a Animal \"\u5bf9\u8c61\"\uff0cgo \u91cc\u5e76\u6ca1\u6709\u50cf\u5176\u4ed6\u8bed\u8a00\u90a3\u6837\u63d0\u4f9b\u6784\u9020\u51fd\u6570\u7684\u65b9\u5f0f\u6765\u521b\u5efa\u4e00\u4e2a\u5bf9\u8c61(\u662f\u4e0d\u662f\u5f88\u65e0\u8da3\uff0c\u5bf9 go \u5c31\u662f\u8fd9\u4e48\u541d\u556c)\u3002 \u6211\u4eec\u77e5\u9053 go \u91cc\u8fb9\u521b\u5efa\u4e00\u4e2a\u7a7a\u7ed3\u6784\u4f53\u7684\u65f6\u5019\uff0c\u4e0d\u540c\u7c7b\u578b\u7684\u6210\u5458\u88ab\u8d4b\u503c\u6210\u5176\u7c7b\u578b\u7684\u300e\u96f6\u503c\u300f\uff0c\u6bd4\u5982\u5bf9\u4e8e Animal \u91cc\u7684 Name(string)\u662f\u7a7a\u5b57\u7b26\u4e32, Age(int) \u662f 0\u3002 \u90a3\u5982\u679c\u6211\u4eec\u60f3\u521b\u5efa\u4e00\u4e2a Animal \u7684\u65f6\u5019\u6839\u636e\u4f20\u5165\u7684\u53c2\u6570\u6765\u521d\u59cb\u5316\u5462\uff1fgo \u91cc\u8fb9\u867d\u7136\u6ca1\u6709\u76f4\u63a5\u63d0\u4f9b\u6784\u9020\u51fd\u6570\uff0c\u4f46\u662f\u4e00\u822c\u6211\u4eec\u662f\u901a\u8fc7\u5b9a\u4e49\u4e00\u4e9b NewXXX \u5f00\u5934\u7684\u51fd\u6570\u6765\u5b9e\u73b0\u6784\u9020\u51fd\u6570\u7684\u529f\u80fd\u7684\uff0c\u6bd4\u5982\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a NewAnimal \u51fd\u6570\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 package main import \"fmt\" type Animal struct { Name string Age int petName string } func ( a Animal ) Sleep () { fmt . Printf ( \"%s is sleeping\\n\" , a . Name ) } func NewAnimal ( name string , age int ) * Animal { a := Animal { Name : name , Age : age , } return & a } func main () { a := NewAnimal ( \"cat\" , 3 ) fmt . Println ( a ) } \u8fd9\u6837\u6211\u4eec\u5c31\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7c7b\u4f3c\u6784\u9020\u51fd\u6570\u7684\u529f\u80fd\uff0c\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u6839\u636e\u4e0d\u540c\u7684\u9700\u6c42\u6765\u5b9a\u4e49\u591a\u4e2a\u6784\u9020\u51fd\u6570\u3002","title":"\u6784\u9020\u51fd\u6570\u5982\u4f55\u5b9e\u73b0\uff1f"},{"location":"basics/08_struct/struct/#vs","text":"\u4e0a\u6587\u5b66\u4e60\u4e86\u5982\u4f55\u5b9a\u4e49 go \u7684 \"\u5bf9\u8c61\"\uff0c\u6211\u4eec\u7ed9 struct \u52a0\u5165\u4e86\u6570\u636e\u6210\u5458\u548c\u65b9\u6cd5\uff0c\u8fd8\u5b9e\u73b0\u4e86\u6784\u9020\u51fd\u6570\uff0c\u770b\u8d77\u6765\u7a0d\u5fae\u6709\u70b9\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u7684\u610f\u601d\u4e86\u3002 OOP \u4e2d\u8fd8\u6709\u4e00\u4e2a\u91cd\u8981\u7684\u6982\u5ff5\u5c31\u662f\u7ee7\u627f\uff0c\u901a\u8fc7\u7ee7\u627f\u5b9e\u73b0\u4e86 is-a \u7684\u7c7b\u5173\u7cfb\uff0c\u53ef\u4ee5\u5f88\u597d\u5730\u8fdb\u884c\u4ee3\u7801\u590d\u7528\u3002\u4f46\u662f go \u53ef\u80fd\u53c8\u8981\u8ba9\u4f60\u5931\u671b\u4e86\uff0c\u4f60\u4f1a \u53d1\u73b0 go \u5e76\u4e0d\u76f4\u63a5\u652f\u6301 struct \u4e4b\u95f4\u7684\u7ee7\u627f\u3002 \u90a3\u5982\u679c\u6211\u4eec\u60f3\u5b9e\u73b0\u7c7b\u4f3c\u7ee7\u627f\u7684\u529f\u80fd\u8be5\u600e\u4e48\u529e\u5462\uff1f\u5176\u5b9e go \u4e5f\u6709\u7c7b\u4f3c\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u4e0d\u8fc7 go \u4f7f\u7528\u7684\u4e0d\u662f\u7ee7\u627f\u800c\u662f\u7ec4\u5408\uff0cgo \u4f5c\u8005\u63a8\u5d07\u7684 \u601d\u60f3\u662f\u300e\u7ec4\u5408\u4f18\u4e8e\u7ee7\u627f\u300f\u3002go \u63d0\u4f9b\u4e86\u7ed3\u6784\u4f53\u7684\u5d4c\u5165(embedding)\u7528\u6765\u5b9e\u73b0\u4ee3\u7801\u590d\u7528\uff0c\u6bd4\u5982\u5982\u679c\u6211\u4eec\u60f3\u5b9a\u4e49\u4e00\u4e2a Dog \u7ed3\u6784\u4f53\uff0cDog \u4e5f\u662f\u4e00\u4e2a Animal\uff0c\u6211\u4eec\u60f3\u590d\u7528 Animal \u91cc\u7684\u6210\u5458\uff0c\u53ef\u4ee5\u5728 Dog struct \u91cc\u5d4c\u5165\u4e00\u4e2a Animal: 1 2 3 4 5 6 7 8 9 10 11 type Dog struct { Animal // embedding Color string } func main () { d := Dog {} d . Name = \"dog\" d . Sleep () } \u4f60\u4f1a\u53d1\u73b0\u5728 Dog \u91cc\u5d4c\u5165\u4e86 Animal \u4ee5\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528 Animal \u7684\u6210\u5458\u548c\u65b9\u6cd5\u4e86\uff0c\u4ece\u800c\u5b9e\u73b0\u4e86\u4ee3\u7801\u590d\u7528\uff0c\u662f\u4e0d\u662f\u5b9e\u73b0\u8d77\u6765\u5f88\u7b80\u5355\u3002 \u6211\u4eec\u8fd8\u53ef\u4ee5\u91cd\u5199 Dog \u81ea\u5df1\u7684 Sleep \u65b9\u6cd5\uff0c\u6765\u8986\u76d6\u6389 Animal \u7684 Sleep \u65b9\u6cd5\uff0c\u7ed9 Dog \u589e\u52a0\u4e00\u4e2a\u65b9\u6cd5: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 type Dog struct { Animal // embedding Color string } func ( d Dog ) Sleep () { fmt . Println ( \"Dog method Sleep\" ) } func main () { d := Dog {} d . Name = \"dog\" d . Sleep () // \u8f93\u51fa\u7684\u662f Dog \u7684 Sleep \u65b9\u6cd5\u800c\u4e0d\u662f Animal \u7684 } \u7c7b\u4f3c\u7684\uff0c\u5982\u679c\u5d4c\u5165\u7684 struct \u91cc\u7684\u6210\u5458\u540d\u5b57\u548c\u5f53\u524d struct \u540c\u540d\u51b2\u7a81\u4e86\uff0cgo \u4f1a\u4f18\u5148\u4f7f\u7528\u5f53\u524d struct \u7684\u6210\u5458\u3002 \u5230\u8fd9\u91cc\u6211\u4eec\u5c31\u5927\u6982\u5b66\u4e60\u4e86 go \u4f7f\u7528 struct \u6765\u5b9e\u73b0 OOP \u7684\u65b9\u5f0f\uff0c\u53ef\u4ee5\u770b\u5f97\u51fa\u548c\u5e38\u7528\u7684\u7f16\u7a0b\u8bed\u8a00 Java/C++/Python \u7b49\u8fd8\u662f\u6709\u4e0d\u5c11\u7684\u533a\u522b\u7684\u3002 \u603b\u5f97\u6765\u8bf4\uff0cgo \u7684\u8bbe\u8ba1\u5c31\u662f\u5927\u9053\u81f3\u7b80\uff0c\u6ca1\u6709\u5176\u4ed6\u8bed\u8a00\u90a3\u4e48\u591a\u590d\u6742\u7684\u6982\u5ff5\u548c\u8bed\u6cd5\u7cd6\uff0c\u751a\u81f3\u8ba9\u4eba\u611f\u89c9\u6bd4\u8f83\u300e\u7b80\u964b\u300f\u3002\u4f46\u662f\u7528\u591a\u4e86\u4f60\u4f1a\u53d1\u73b0\uff0cgo \u7684\u8fd9\u79cd\u8bbe\u8ba1\u7cbe\u7b80\u5e76\u4e14\u591f\u7528\uff0c\u5e76\u4e14\u5927\u5927\u7b80\u5316\u4e86\u4ee3\u7801\u7684\u5b66\u4e60\u548c\u4e0a\u624b\u6210\u672c\u3002","title":"\u7ec4\u5408 vs \u7ee7\u627f"},{"location":"basics/08_struct/struct/#_3","text":"\u5230\u8fd9\u91cc\u6211\u4eec\u8fd8\u6709\u4e00\u4e2a OOP \u4e2d\u91cd\u8981\u7684\u6982\u5ff5\u6ca1\u6709\u4ecb\u7ecd\uff0c\u5c31\u662f\u591a\u6001\u7684\u6982\u5ff5\u3002\u7b80\u5355\u7684\u8bf4\uff0c\u591a\u6001\u5c31\u662f\u540c\u4e00\u4e2a\u63a5\u53e3\uff0c\u5bf9\u4e8e\u4e0d\u540c\u7684\u5b9e\u4f8b\u6267\u884c\u4e0d\u540c\u7684\u64cd\u4f5c\u3002 \u4e0b\u4e00\u7ae0\u6211\u4eec\u5c06\u4ecb\u7ecd\u4e0b go \u7684\u63a5\u53e3(interface)\uff0c\u4ee5\u53ca\u5982\u4f55\u5728 go \u4e2d\u5b9e\u73b0\u591a\u6001\u3002","title":"\u591a\u6001"},{"location":"basics/08_struct/struct/#_4","text":"\u5982\u679c\u60f3\u8981\u901a\u8fc7\u7f51\u7edc\u8fdb\u884c\u4f20\u8f93\uff0c\u6211\u4eec\u5c31\u9700\u8981\u4f7f\u7528\u5e8f\u5217\u5316\u534f\u8bae\uff0c\u5c06 go \u7684\u7ed3\u6784\u4f53\u6309\u7167\u4e00\u79cd\u65b9\u5f0f\u7f16\u7801\u6210\u5b57\u8282\u4e32\u3002 \u5e38\u89c1\u7684\u5e8f\u5217\u5316\u65b9\u5f0f\u6709 json/protobuf \u7b49\uff0c\u5982\u679c\u4f60\u7f16\u5199 web \u670d\u52a1\u7684\u8bdd\u5bf9\u5b83\u4eec\u4e0d\u4f1a\u964c\u751f\u3002\u5728 go \u91cc\u662f\u901a\u8fc7\u7ed9 struct \u6dfb\u52a0 tag \u6765\u5b9e\u73b0\u7684\u3002 \u6211\u4eec\u8fd9\u91cc\u7b80\u5355\u63d0\u4e00\u4e0b\uff0c\u5728\u7f16\u5199 web \u5e94\u7528\u7684\u65f6\u5019\u4f60\u4f1a\u9891\u7e41\u4f7f\u7528\u5230\u5b83\uff0c\u6ce8\u610f\u770b Animal \u6bcf\u4e2a\u5b57\u6bb5\u540e\u8fb9\u6211\u4eec\u90fd\u52a0\u4e0a\u4e86\u540d\u4e3a json \u7684 tag\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 package main import ( \"encoding/json\" \"fmt\" \"log\" ) type Animal struct { Name string `json:\"name\"` Age int `json:\"age\"` petName string `json:\"pet_name\"` } func main () { animals := [] Animal { Animal { \"dog\" , 3 , \"little dog\" }, Animal { \"cat\" , 4 , \"little cat\" }, } bs , err := json . Marshal ( animals ) if err != nil { log . Fatal ( err ) } fmt . Println ( string ( bs )) // [{\"name\":\"dog\",\"age\":3},{\"name\":\"cat\",\"age\":4}] }","title":"\u5e8f\u5217\u5316"},{"location":"basics/08_struct/struct/#_5","text":"\u4e4b\u524d\u6211\u4eec\u5b66\u8fc7 go \u7684 map\uff0c\u4f46\u662f go \u91cc\u8fb9\u6ca1\u6709\u76f4\u63a5\u63d0\u4f9b\u4e00\u4e2a set\uff0c\u8bf7\u4f60\u4f7f\u7528 struct \u5c01\u88c5\u4e00\u4e2a Set\uff0c\u5e76\u4e14\u63d0\u4f9b Add/Delete/Exist \u65b9\u6cd5 \u901a\u8fc7\u4f7f\u7528\u5d4c\u5165\u5b9e\u73b0\u4e00\u4e2a Cat struct\uff0c\u52a0\u5165\u4e00\u4e2a\u6570\u636e\u6210\u5458\u53eb\u505a Height\uff0c\u5e76\u4e14\u7ed9\u4f60\u7684 Cat \u52a0\u4e0a Eat \u65b9\u6cd5\u3002","title":"\u7ec3\u4e60"},{"location":"basics/08_struct/struct/#_6","text":"Effective Go pointers vs. Values Object Oriented Inheritance in Go Object-oriented programming without inheritance","title":"\u53c2\u8003"},{"location":"basics/09_interface/interface/","text":"go \u63a5\u53e3(interface) \u00b6 Quote When I see a bird that walks like a duck and swims like a duck and quacks like a duck, I call that bird a duck. \u2013James Whitcomb Riley \u63a5\u53e3(interface) \u00b6 \u5982\u679c\u4f60\u4f7f\u7528\u8fc7 Python/Ruby \u4e4b\u7c7b\u7684\u52a8\u6001\u8bed\u8a00\uff0c\u5e94\u8be5\u4f1a\u5bf9 \u300e\u9e2d\u5b50\u7c7b\u578b\u300f \u6bd4\u8f83\u719f\u6089\u3002 \u5f53\u770b\u5230\u4e00\u53ea\u9e1f\u8d70\u8d77\u6765\u50cf\u9e2d\u5b50\u3001\u6e38\u6cf3\u8d77\u6765\u50cf\u9e2d\u5b50\u3001\u53eb\u8d77\u6765\u4e5f\u50cf\u9e2d\u5b50\uff0c\u90a3\u4e48\u8fd9\u53ea\u9e1f\u5c31\u53ef\u4ee5\u88ab\u79f0\u4e3a\u9e2d\u5b50\u3002 go \u901a\u8fc7\u63a5\u53e3\u5b9e\u73b0\u4e86\u7c7b\u578b\u5b89\u5168\u7684\u9e2d\u5b50\u7c7b\u578b\uff0c\u540c\u65f6\u53c8\u907f\u514d\u4e86OOP \u7f16\u7a0b\u4e2d\u7684\u7ee7\u627f\uff0c\u6211\u4eec\u6765\u5b66\u4e60\u4e0b go \u7684\u63a5\u53e3(interface)\u3002 go \u7684\u63a5\u53e3\u662f\u4e00\u79cd\u62bd\u8c61\u7684\u81ea\u5b9a\u4e49\u7c7b\u578b\uff0c\u6ca1\u6cd5\u76f4\u63a5\u5b9e\u4f8b\u5316\uff0c\u5b83\u58f0\u660e\u4e86\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u65b9\u6cd5\u7684\u7b7e\u540d\u3002\u5982\u679c\u4e00\u4e2a struct \u5b9e\u73b0\u4e86\u4e00\u4e2a\u63a5\u53e3\u5b9a\u4e49\u7684\u6240\u6709\u65b9\u6cd5\uff0c\u6211\u4eec\u5c31\u8bf4\u8fd9\u4e2a struct \u5b9e\u73b0\u4e86\u8fd9\u4e2a\u63a5\u53e3\u3002\u6ce8\u610f\u8fd9\u91cc\u7684\u300e\u5b9e\u73b0\u300f\u662f\u9690\u5f0f\u7684\uff0c\u4f60\u4e0d\u7528\u663e\u793a\u58f0\u660e\u67d0\u4e2a struct \u5b9e\u73b0\u4e86\u54ea\u4e2a\u63a5\u53e3\u3002 \u6211\u4eec\u6765\u770b\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u4e0a\u4e00\u7ae0\u5b66\u4e60 struct \u65f6\u5019\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a Animal\uff0c\u5b83\u6709\u4e00\u4e2a Sleep \u65b9\u6cd5\u3002\u8fd9\u91cc\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u53eb\u505a Sleeper \u7684\u63a5\u53e3(go \u559c\u6b22\u7528 er \u7ed9\u4e00\u4e2a\u63a5\u53e3\u4f5c\u4e3a\u540e\u7f00\uff0c\u6bd4\u5982Reader/Writer)\uff1a 1 2 3 4 // Sleeper \u63a5\u53e3\u58f0\u660e type Sleeper interface { Sleep () // \u58f0\u660e\u4e00\u4e2a Sleep() \u65b9\u6cd5 } \u7136\u540e\u5b9a\u4e49\u4e24\u4e2a struct\uff0c\u4e00\u4e2a\u732b(Cat)\u548c\u4e00\u4e2a\u72d7(Dog)\uff0c\u5e76\u4e14\u5b83\u4eec\u90fd\u5b9e\u4e86 Sleep \u65b9\u6cd5\uff0c\u4e5f\u5c31\u662f\u8bf4\u9690\u5f0f\u5b9e\u73b0\u4e86 Sleeper \u63a5\u53e3\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 type Dog struct { Name string } func ( d Dog ) Sleep () { fmt . Printf ( \"Dog %s is sleeping\\n\" , d . Name ) } type Cat struct { Name string } func ( c Cat ) Sleep () { fmt . Printf ( \"Cat %s is sleeping\\n\" , c . Name ) } \u597d\u4e86\uff0c\u7136\u540e\u6211\u4eec\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u4e0d\u8fc7\u4e3a\u4e86\u652f\u6301\u591a\u6001\uff0c\u51fd\u6570\u7684\u53c2\u6570\u662f\u4e00\u4e2a\u63a5\u53e3\u7c7b\u578b\u800c\u4e0d\u662f\u5177\u4f53\u7684 struct \u7c7b\u578b\u3002 1 2 3 func AnimalSleep ( s Sleeper ) { s . Sleep () } \u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 package main import ( \"fmt\" ) // Sleeper \u63a5\u53e3\u58f0\u660e type Sleeper interface { Sleep () // \u58f0\u660e\u4e00\u4e2a Sleep() \u65b9\u6cd5 } type Dog struct { Name string } func ( d Dog ) Sleep () { fmt . Printf ( \"Dog %s is sleeping\\n\" , d . Name ) } type Cat struct { Name string } func ( c Cat ) Sleep () { fmt . Printf ( \"Cat %s is sleeping\\n\" , c . Name ) } func AnimalSleep ( s Sleeper ) { // \u6ce8\u610f\u53c2\u6570\u662f\u4e00\u4e2a interface s . Sleep () } func main () { var s Sleeper dog := Dog { Name : \"xiaobai\" } cat := Cat { Name : \"hellokitty\" } s = dog AnimalSleep ( s ) // \u4f7f\u7528 dog \u7684 Sleep() s = cat AnimalSleep ( s ) // \u4f7f\u7528 cat \u7684 Sleep() // \u521b\u5efa\u4e00\u4e2a Sleeper \u5207\u7247 sleepList := [] Sleeper { Dog { Name : \"xiaobai\" }, Cat { Name : \"kitty\" }} for _ , s := range sleepList { s . Sleep () } } ok\uff0c\u5230\u8fd9\u91cc\u6211\u4eec\u5c31\u7528 go \u7684\u63a5\u53e3\u5b9e\u73b0\u4e86\u591a\u6001\uff0c\u6211\u4eec\u5148\u58f0\u660e\u4e86\u4e00\u4e2a\u63a5\u53e3\u7c7b\u578b\u7684\u503c\uff0c\u53ea\u8981\u5b9e\u73b0\u4e86\u8fd9\u4e2a\u63a5\u53e3\u7684 struct \u53d8\u91cf\uff0c\u90fd\u53ef\u4ee5\u8d4b\u503c\u7ed9\u5b83\uff0c \u800c\u8c03\u7528\u65b9\u6cd5\u7684\u65f6\u5019\uff0cgo \u4f1a\u6839\u636e\u5b9e\u9645\u7c7b\u578b\u9009\u62e9\u4f7f\u7528\u54ea\u4e2a struct \u7684\u65b9\u6cd5\u3002 \u63a5\u53e3\u5d4c\u5165 \u00b6 \u6211\u4eec\u77e5\u9053 go \u7684 struct \u53ef\u4ee5\u901a\u8fc7\u5d4c\u5165\u5b9e\u73b0\u4ee3\u7801\u590d\u7528\uff0cgo \u7684\u63a5\u53e3\u4e5f\u652f\u6301 \u5d4c\u5165 \uff0c \u6765\u770b\u4e00\u4e2a go \u6807\u51c6\u5e93\u7684\u4f8b\u5b50\u3002go \u6807\u51c6\u5e93\u91cc\u8fb9\u5b9a\u4e49\u4e86 Reader \u548c Writer \u63a5\u53e3\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 type Reader interface { Read ( p [] byte ) ( n int , err error ) } type Writer interface { Write ( p [] byte ) ( n int , err error ) } \u53ea\u8981\u4e00\u4e2a\u7ed3\u6784\u4f53\u5b9e\u73b0\u4e86 Read \u6216\u8005 Write \u65b9\u6cd5\uff0c\u5b83\u5c31\u5206\u522b\u5b9e\u73b0\u4e86 Reader \u548c Writer \u63a5\u53e3\u3002go \u8fd8\u652f\u6301\u63a5\u53e3\u5d4c\u5957\uff0c\u6bd4\u5982\u6211\u4eec\u53ef\u4ee5\u5d4c\u5957\u8fd9\u4fe9 \u63a5\u53e3\u58f0\u660e\u4e00\u4e2a\u65b0\u7684\u63a5\u53e3 ReadWriter: 1 2 3 4 5 // ReadWriter is the interface that combines the Reader and Writer interfaces. type ReadWriter interface { Reader Writer } \u6211\u4eec\u4e5f\u6765\u8bd5\u4e00\u4e0b\uff0c\u521a\u624d\u58f0\u660e\u4e86 Sleeper \u63a5\u53e3\uff0c\u518d\u6765\u58f0\u660e\u4e00\u4e2a\u53eb\u505a Eater \u7684\u63a5\u53e3\u3002\u6709\u4e86\u7761\u548c\u5403\uff0c\u6211\u4eec\u518d\u7ec4\u5408\u4e00\u4e0b\u641e\u4e00\u4e2a\u53eb\u505a LazyAnimal \u7684\u63a5\u53e3\uff08\u53ea\u77e5\u9053\u5403\u548c\u7761\u80fd\u4e0d\u61d2\u4e48\uff1f): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 package main import ( \"fmt\" ) // Sleeper \u63a5\u53e3\u58f0\u660e type Sleeper interface { Sleep () // \u58f0\u660e\u4e00\u4e2a Sleep() \u65b9\u6cd5 } type Eater interface { Eat ( foodName string ) // \u58f0\u660e\u4e00\u4e2aEat \u65b9\u6cd5 } type LazyAnimal interface { Sleeper Eater } type Dog struct { Name string } func ( d Dog ) Sleep () { fmt . Printf ( \"Dog %s is sleeping\\n\" , d . Name ) } func ( d Dog ) Eat ( foodName string ) { fmt . Printf ( \"Dog %s is eating %s\\n\" , d . Name , foodName ) } type Cat struct { Name string } func ( c Cat ) Sleep () { fmt . Printf ( \"Cat %s is sleeping\\n\" , c . Name ) } func ( c Cat ) Eat ( foodName string ) { fmt . Printf ( \"Cat %s is eating %s\\n\" , c . Name , foodName ) } func main () { sleepList := [] LazyAnimal { Dog { Name : \"xiaobai\" }, Cat { Name : \"kitty\" }} foodName := \"food\" for _ , s := range sleepList { s . Sleep () s . Eat ( foodName ) } } \u5927\u529f\u544a\u6210\uff0c\u8fd9\u91cc\u6211\u4eec\u5c31\u5b9e\u73b0\u4e86\u63a5\u53e3\u7684\u5d4c\u5165\uff0c\u4ee3\u7801\u90fd\u662f\u6bd4\u8f83\u7b80\u5355\u76f4\u767d\u7684\u3002\u6765\u603b\u7ed3\u4e00\u4e0b\u91cd\u70b9\u5185\u5bb9\uff1a go \u53ef\u4ee5\u58f0\u660e\u63a5\u53e3\uff0c\u5b83\u5305\u542b\u4e86\u4e00\u7cfb\u5217\u65b9\u6cd5\u58f0\u660e struct \u53ef\u4ee5\u5b9e\u73b0\u63a5\u53e3\uff0c\u53ea\u8981\u4e00\u4e2a struct \u5b9e\u73b0\u4e86\u4e00\u4e2a\u63a5\u53e3\u7684\u6240\u6709\u65b9\u6cd5\uff0c\u6211\u4eec\u5c31\u8bf4 struct \u5b9e\u73b0\u4e86\u8fd9\u4e2a\u63a5\u53e3\uff08\u9690\u5f0f\u7684\uff09 \u63a5\u53e3\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5d4c\u5165\u6765\u58f0\u660e\u4e00\u4e2a\u65b0\u7684\u63a5\u53e3\uff0c\u6bd4\u5982 ReadWriter \u5185\u5d4c\u4e86 Reader \u548c Writer\u3002 go \u63d0\u5021\u201c\u5c0f\u800c\u7f8e\u201d\u7684\u63a5\u53e3\uff0c\u7136\u540e\u901a\u8fc7\u5d4c\u5165\u6765\u7ec4\u5408\u65b0\u63a5\u53e3 \u7c7b\u578b\u65ad\u8a00(type assert) \u00b6 \u4e0a\u6587\u6211\u4eec\u770b\u5230\u5728\u4f7f\u7528\u63a5\u53e3\u7684\u5730\u65b9\uff0c\u6211\u4eec\u53ef\u4ee5\u4f20\u5165\u4e00\u4e2a\u5177\u4f53\u7684\u5b9e\u73b0\u4e86\u63a5\u53e3\u7684 struct \u7c7b\u578b\uff0c\u4f46\u662f\u6211\u4eec\u5982\u4f55\u83b7\u53d6\u4f20\u5165\u7684\u5230\u5e95\u662f\u54ea\u79cd struct \u7c7b\u578b\u5462\uff1f go \u7ed9\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u79cd\u65b9\u5f0f\u53eb\u505a\u7c7b\u578b\u65ad\u8a00\u6765\u83b7\u53d6\u5177\u4f53\u7684\u7c7b\u578b\uff0c\u5b83\u7684\u8bed\u6cd5\u6bd4\u8f83\u7b80\u5355\uff0c\u683c\u5f0f\u5982\u4e0b\uff1a 1 instance , ok := interfaceVal .( RealType ) // \u5982\u679c ok \u4e3a true \u7684\u8bdd\uff0c\u63a5\u53e3\u503c\u5c31\u8f6c\u6210\u4e86\u6211\u4eec\u9700\u8981\u7684\u7c7b\u578b \u6211\u4eec\u7ee7\u7eed\u518d\u4e0a\u8fb9\u7684\u4ee3\u7801\u91cc\u52a0\u4e0a\u7c7b\u578b\u65ad\u8a00\u7684\u6f14\u793a\uff0c\u6ce8\u610f\u7c7b\u578b\u65ad\u8a00\u90a3\u51e0\u884c\u4ee3\u7801\uff0c\u518d for \u5faa\u73af\u91cc\u8fb9\u6211\u4eec\u4f7f\u7528\u7c7b\u578b\u65ad\u8a00\u83b7\u53d6\u4e86\u63a5\u53e3\u503c\u7684\u771f\u6b63\u7c7b\u578b\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 func main () { sleepList := [] LazyAnimal { Dog { Name : \"xiaobai\" }, Cat { Name : \"kitty\" }} foodName := \"food\" for _ , s := range sleepList { s . Sleep () s . Eat ( foodName ) // \u7c7b\u578b\u65ad\u8a00 type assert if dog , ok := s .( Dog ); ok { fmt . Printf ( \"I am a Dog, my name is %s\" , dog . Name ) } if cat , ok := s .( Cat ); ok { fmt . Printf ( \"I am a Cat, my name is %s\" , cat . Name ) } } } \u4f7f\u7528\u7a7a\u63a5\u53e3\u5b9e\u73b0\u6cdb\u578b \u00b6 \u4e4b\u524d\u5728\u51fd\u6570\u90a3\u4e00\u7ae0\u6211\u4eec\u63d0\u5230 go \u76ee\u524d\u6ca1\u6709\u76f4\u63a5\u63d0\u4f9b\u5bf9\u6cdb\u578b\u7684\u652f\u6301\uff0c\u5b66\u4e86\u63a5\u53e3\u4e4b\u540e\u5176\u5b9e\u6211\u4eec\u53ef\u4ee5\u7528\u63a5\u53e3\u6765\u5b9e\u73b0\u3002 \u4e0a\u6587\u63d0\u5230\uff0c\u5982\u679c\u4e00\u4e2a struct \u5b9e\u73b0\u4e86\u4e00\u4e2a\u63a5\u53e3\u58f0\u660e\u6240\u6709\u65b9\u6cd5\uff0c\u6211\u4eec\u5c31\u8bf4\u8fd9\u4e2a struct (\u9690\u5f0f)\u5b9e\u73b0\u4e86\u8fd9\u4e2a\u63a5\u53e3\uff0c\u90a3\u5982\u679c\u662f\u4e00\u4e2a\u6ca1\u6709\u58f0\u660e \u4efb\u4f55\u65b9\u6cd5\u7684\u7a7a\u63a5\u53e3(empty interface)\u5462\uff1f\u6309\u7167\u8fd9\u4e2a\u5b9a\u4e49\u5c82\u4e0d\u662f\u6240\u6709\u7c7b\u578b\u90fd\u5b9e\u73b0\u4e86\u7a7a\u63a5\u53e3\u4e48\uff1f \u4f60\u731c\u5bf9\u4e86\uff0c\u6240\u6709\u7c7b\u578b\u90fd\u5b9e\u73b0\u4e86\u7a7a\u63a5\u53e3( interface{} )\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u7a7a\u63a5\u53e3+\u7c7b\u578b\u65ad\u8a00\u8f6c\u6210\u4efb\u4f55\u6211\u4eec\u9700\u8981\u7684\u7c7b\u578b\u3002\u6765\u770b\u4e0b\u8fd9\u4e2a\u4f8b\u5b50\uff0c \u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u7a7a\u63a5\u53e3\u6570\u7ec4\uff0c\u5b83\u7684\u5143\u7d20\u53ef\u4ee5\u662f\u4efb\u4f55\u7c7b\u578b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 package main import ( \"fmt\" ) type Dog struct { Name string } func ( d Dog ) Sleep () { fmt . Printf ( \"Dog %s is sleeping\\n\" , d . Name ) } type Cat struct { Name string } func ( c Cat ) Sleep () { fmt . Printf ( \"Cat %s is sleeping\\n\" , c . Name ) } func main () { animalList := [] interface {}{ Dog { Name : \"xiaobai\" }, Cat { Name : \"kitty\" }} for _ , s := range animalList { if dog , ok := s .( Dog ); ok { fmt . Printf ( \"I am a Dog, my name is %s\\n\" , dog . Name ) } if cat , ok := s .( Cat ); ok { fmt . Printf ( \"I am a Cat, my name is %s\\n\" , cat . Name ) } } } \u90a3\u6211\u4eec\u5982\u4f55\u5b9e\u73b0\u6cdb\u578b\u5462\uff1f\u7a7a\u63a5\u53e3\u5176\u5b9e\u7ed9\u4e86\u6211\u4eec\u601d\u8def\u3002\u65e2\u7136\u5b83\u80fd\u8f6c\u6210\u6240\u6709\u7c7b\u578b\uff0c\u90a3\u6211\u4eec\u4ee5\u7a7a\u63a5\u53e3\u4f5c\u4e3a\u53c2\u6570\u4e0d\u5c31\u597d\u4e86\u561b\uff0c\u8fd9\u4e2a\u60f3\u6cd5\u662f\u5bf9\u7684\u3002 \u5982\u679c\u4f60\u6709\u7559\u610f\u7684\u8bdd\uff0c\u5230\u73b0\u5728\u6211\u4eec\u7684\u4ee3\u7801\u793a\u4f8b\u91cc\u8fb9\u4f7f\u7528\u6700\u591a\u7684\u662f\u5565\uff0c\u5176\u5b9e\u662f\u8fd9\u53e5\u8bdd fmt.Println() \uff0c\u4e0d\u77e5\u9053\u4f60\u4e4b\u524d\u6709\u6ca1\u6709\u53d1\u73b0\u8fd9\u4e2a\u51fd\u6570 \u5c45\u7136\u53ef\u4ee5\u4f20\u9012\u4efb\u610f\u7c7b\u578b\u8fdb\u53bb\uff0c\u7528\u7684\u662f\u4ec0\u4e48\u9ed1\u9b54\u6cd5\u5462\uff1f \u65e2\u7136\u6211\u4eec\u77e5\u9053\u4e86\u7a7a\u63a5\u53e3\uff0c\u53ef\u4ee5\u81ea\u5df1\u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u7684\u53ef\u4ee5\u6253\u5370\u591a\u79cd\u7c7b\u578b\u7684 MyPrint \u51fd\u6570\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 func MyPrint ( i interface {}) { switch o := i .( type ) { case int : fmt . Printf ( \"%d\\n\" , o ) case float64 : fmt . Printf ( \"%f\\n\" , o ) case string : fmt . Printf ( \"%s\\n\" , o ) default : fmt . Printf ( \"%+v\\n\" , o ) } } func main () { MyPrint ( 1 ) MyPrint ( 4.2 ) MyPrint ( \"hello\" ) MyPrint ( map [ string ] string { \"hello\" : \"go\" }) } \u5b9e\u9645\u4e0a\u5982\u679c\u4f60\u7528\u5f00\u53d1\u5de5\u5177\u8df3\u8f6c\u5305 fmt \u5bf9\u5e94 fmt.Println \u7684\u51fd\u6570\u5b9e\u73b0\uff0c\u53ef\u4ee5\u770b\u5230\u5b83\u4e5f\u662f\u4ee5\u7a7a\u63a5\u53e3\u4f5c\u4e3a\u53c2\u6570\u7684: 1 2 3 4 5 6 // Println formats using the default formats for its operands and writes to standard output. // Spaces are always added between operands and a newline is appended. // It returns the number of bytes written and any write error encountered. func Println ( a ... interface {}) ( n int , err error ) { return Fprintln ( os . Stdout , a ... ) } \u7a7a\u63a5\u53e3\u5728\u5b9e\u73b0\u6cdb\u578b\u7684\u65f6\u5019\u5f88\u6709\u7528\uff0c\u4e0d\u8fc7\u4e00\u822c\u60c5\u51b5\u4e0b\u5982\u679c\u4e0d\u662f\u5fc5\u8981\uff0c\u6211\u4eec\u8fd8\u662f\u5355\u72ec\u5b9e\u73b0\u5bf9\u5e94\u7c7b\u578b\u7684\u51fd\u6570\u5c31\u597d\uff0c\u4ee3\u7801\u53ef\u8bfb\u6027\u4e5f\u66f4\u9ad8\u3002 \u7ec3\u4e60 \u00b6 \u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u7684 a+b \u51fd\u6570\uff0c\u9700\u8981\u540c\u65f6\u652f\u6301 int \u548c float64 \u53c2\u6570 \u53c2\u8003 \u00b6 Golang and inheritance why generics","title":"Go \u63a5\u53e3"},{"location":"basics/09_interface/interface/#go-interface","text":"Quote When I see a bird that walks like a duck and swims like a duck and quacks like a duck, I call that bird a duck. \u2013James Whitcomb Riley","title":"go \u63a5\u53e3(interface)"},{"location":"basics/09_interface/interface/#interface","text":"\u5982\u679c\u4f60\u4f7f\u7528\u8fc7 Python/Ruby \u4e4b\u7c7b\u7684\u52a8\u6001\u8bed\u8a00\uff0c\u5e94\u8be5\u4f1a\u5bf9 \u300e\u9e2d\u5b50\u7c7b\u578b\u300f \u6bd4\u8f83\u719f\u6089\u3002 \u5f53\u770b\u5230\u4e00\u53ea\u9e1f\u8d70\u8d77\u6765\u50cf\u9e2d\u5b50\u3001\u6e38\u6cf3\u8d77\u6765\u50cf\u9e2d\u5b50\u3001\u53eb\u8d77\u6765\u4e5f\u50cf\u9e2d\u5b50\uff0c\u90a3\u4e48\u8fd9\u53ea\u9e1f\u5c31\u53ef\u4ee5\u88ab\u79f0\u4e3a\u9e2d\u5b50\u3002 go \u901a\u8fc7\u63a5\u53e3\u5b9e\u73b0\u4e86\u7c7b\u578b\u5b89\u5168\u7684\u9e2d\u5b50\u7c7b\u578b\uff0c\u540c\u65f6\u53c8\u907f\u514d\u4e86OOP \u7f16\u7a0b\u4e2d\u7684\u7ee7\u627f\uff0c\u6211\u4eec\u6765\u5b66\u4e60\u4e0b go \u7684\u63a5\u53e3(interface)\u3002 go \u7684\u63a5\u53e3\u662f\u4e00\u79cd\u62bd\u8c61\u7684\u81ea\u5b9a\u4e49\u7c7b\u578b\uff0c\u6ca1\u6cd5\u76f4\u63a5\u5b9e\u4f8b\u5316\uff0c\u5b83\u58f0\u660e\u4e86\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u65b9\u6cd5\u7684\u7b7e\u540d\u3002\u5982\u679c\u4e00\u4e2a struct \u5b9e\u73b0\u4e86\u4e00\u4e2a\u63a5\u53e3\u5b9a\u4e49\u7684\u6240\u6709\u65b9\u6cd5\uff0c\u6211\u4eec\u5c31\u8bf4\u8fd9\u4e2a struct \u5b9e\u73b0\u4e86\u8fd9\u4e2a\u63a5\u53e3\u3002\u6ce8\u610f\u8fd9\u91cc\u7684\u300e\u5b9e\u73b0\u300f\u662f\u9690\u5f0f\u7684\uff0c\u4f60\u4e0d\u7528\u663e\u793a\u58f0\u660e\u67d0\u4e2a struct \u5b9e\u73b0\u4e86\u54ea\u4e2a\u63a5\u53e3\u3002 \u6211\u4eec\u6765\u770b\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u4e0a\u4e00\u7ae0\u5b66\u4e60 struct \u65f6\u5019\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a Animal\uff0c\u5b83\u6709\u4e00\u4e2a Sleep \u65b9\u6cd5\u3002\u8fd9\u91cc\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u53eb\u505a Sleeper \u7684\u63a5\u53e3(go \u559c\u6b22\u7528 er \u7ed9\u4e00\u4e2a\u63a5\u53e3\u4f5c\u4e3a\u540e\u7f00\uff0c\u6bd4\u5982Reader/Writer)\uff1a 1 2 3 4 // Sleeper \u63a5\u53e3\u58f0\u660e type Sleeper interface { Sleep () // \u58f0\u660e\u4e00\u4e2a Sleep() \u65b9\u6cd5 } \u7136\u540e\u5b9a\u4e49\u4e24\u4e2a struct\uff0c\u4e00\u4e2a\u732b(Cat)\u548c\u4e00\u4e2a\u72d7(Dog)\uff0c\u5e76\u4e14\u5b83\u4eec\u90fd\u5b9e\u4e86 Sleep \u65b9\u6cd5\uff0c\u4e5f\u5c31\u662f\u8bf4\u9690\u5f0f\u5b9e\u73b0\u4e86 Sleeper \u63a5\u53e3\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 type Dog struct { Name string } func ( d Dog ) Sleep () { fmt . Printf ( \"Dog %s is sleeping\\n\" , d . Name ) } type Cat struct { Name string } func ( c Cat ) Sleep () { fmt . Printf ( \"Cat %s is sleeping\\n\" , c . Name ) } \u597d\u4e86\uff0c\u7136\u540e\u6211\u4eec\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u4e0d\u8fc7\u4e3a\u4e86\u652f\u6301\u591a\u6001\uff0c\u51fd\u6570\u7684\u53c2\u6570\u662f\u4e00\u4e2a\u63a5\u53e3\u7c7b\u578b\u800c\u4e0d\u662f\u5177\u4f53\u7684 struct \u7c7b\u578b\u3002 1 2 3 func AnimalSleep ( s Sleeper ) { s . Sleep () } \u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 package main import ( \"fmt\" ) // Sleeper \u63a5\u53e3\u58f0\u660e type Sleeper interface { Sleep () // \u58f0\u660e\u4e00\u4e2a Sleep() \u65b9\u6cd5 } type Dog struct { Name string } func ( d Dog ) Sleep () { fmt . Printf ( \"Dog %s is sleeping\\n\" , d . Name ) } type Cat struct { Name string } func ( c Cat ) Sleep () { fmt . Printf ( \"Cat %s is sleeping\\n\" , c . Name ) } func AnimalSleep ( s Sleeper ) { // \u6ce8\u610f\u53c2\u6570\u662f\u4e00\u4e2a interface s . Sleep () } func main () { var s Sleeper dog := Dog { Name : \"xiaobai\" } cat := Cat { Name : \"hellokitty\" } s = dog AnimalSleep ( s ) // \u4f7f\u7528 dog \u7684 Sleep() s = cat AnimalSleep ( s ) // \u4f7f\u7528 cat \u7684 Sleep() // \u521b\u5efa\u4e00\u4e2a Sleeper \u5207\u7247 sleepList := [] Sleeper { Dog { Name : \"xiaobai\" }, Cat { Name : \"kitty\" }} for _ , s := range sleepList { s . Sleep () } } ok\uff0c\u5230\u8fd9\u91cc\u6211\u4eec\u5c31\u7528 go \u7684\u63a5\u53e3\u5b9e\u73b0\u4e86\u591a\u6001\uff0c\u6211\u4eec\u5148\u58f0\u660e\u4e86\u4e00\u4e2a\u63a5\u53e3\u7c7b\u578b\u7684\u503c\uff0c\u53ea\u8981\u5b9e\u73b0\u4e86\u8fd9\u4e2a\u63a5\u53e3\u7684 struct \u53d8\u91cf\uff0c\u90fd\u53ef\u4ee5\u8d4b\u503c\u7ed9\u5b83\uff0c \u800c\u8c03\u7528\u65b9\u6cd5\u7684\u65f6\u5019\uff0cgo \u4f1a\u6839\u636e\u5b9e\u9645\u7c7b\u578b\u9009\u62e9\u4f7f\u7528\u54ea\u4e2a struct \u7684\u65b9\u6cd5\u3002","title":"\u63a5\u53e3(interface)"},{"location":"basics/09_interface/interface/#_1","text":"\u6211\u4eec\u77e5\u9053 go \u7684 struct \u53ef\u4ee5\u901a\u8fc7\u5d4c\u5165\u5b9e\u73b0\u4ee3\u7801\u590d\u7528\uff0cgo \u7684\u63a5\u53e3\u4e5f\u652f\u6301 \u5d4c\u5165 \uff0c \u6765\u770b\u4e00\u4e2a go \u6807\u51c6\u5e93\u7684\u4f8b\u5b50\u3002go \u6807\u51c6\u5e93\u91cc\u8fb9\u5b9a\u4e49\u4e86 Reader \u548c Writer \u63a5\u53e3\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 type Reader interface { Read ( p [] byte ) ( n int , err error ) } type Writer interface { Write ( p [] byte ) ( n int , err error ) } \u53ea\u8981\u4e00\u4e2a\u7ed3\u6784\u4f53\u5b9e\u73b0\u4e86 Read \u6216\u8005 Write \u65b9\u6cd5\uff0c\u5b83\u5c31\u5206\u522b\u5b9e\u73b0\u4e86 Reader \u548c Writer \u63a5\u53e3\u3002go \u8fd8\u652f\u6301\u63a5\u53e3\u5d4c\u5957\uff0c\u6bd4\u5982\u6211\u4eec\u53ef\u4ee5\u5d4c\u5957\u8fd9\u4fe9 \u63a5\u53e3\u58f0\u660e\u4e00\u4e2a\u65b0\u7684\u63a5\u53e3 ReadWriter: 1 2 3 4 5 // ReadWriter is the interface that combines the Reader and Writer interfaces. type ReadWriter interface { Reader Writer } \u6211\u4eec\u4e5f\u6765\u8bd5\u4e00\u4e0b\uff0c\u521a\u624d\u58f0\u660e\u4e86 Sleeper \u63a5\u53e3\uff0c\u518d\u6765\u58f0\u660e\u4e00\u4e2a\u53eb\u505a Eater \u7684\u63a5\u53e3\u3002\u6709\u4e86\u7761\u548c\u5403\uff0c\u6211\u4eec\u518d\u7ec4\u5408\u4e00\u4e0b\u641e\u4e00\u4e2a\u53eb\u505a LazyAnimal \u7684\u63a5\u53e3\uff08\u53ea\u77e5\u9053\u5403\u548c\u7761\u80fd\u4e0d\u61d2\u4e48\uff1f): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 package main import ( \"fmt\" ) // Sleeper \u63a5\u53e3\u58f0\u660e type Sleeper interface { Sleep () // \u58f0\u660e\u4e00\u4e2a Sleep() \u65b9\u6cd5 } type Eater interface { Eat ( foodName string ) // \u58f0\u660e\u4e00\u4e2aEat \u65b9\u6cd5 } type LazyAnimal interface { Sleeper Eater } type Dog struct { Name string } func ( d Dog ) Sleep () { fmt . Printf ( \"Dog %s is sleeping\\n\" , d . Name ) } func ( d Dog ) Eat ( foodName string ) { fmt . Printf ( \"Dog %s is eating %s\\n\" , d . Name , foodName ) } type Cat struct { Name string } func ( c Cat ) Sleep () { fmt . Printf ( \"Cat %s is sleeping\\n\" , c . Name ) } func ( c Cat ) Eat ( foodName string ) { fmt . Printf ( \"Cat %s is eating %s\\n\" , c . Name , foodName ) } func main () { sleepList := [] LazyAnimal { Dog { Name : \"xiaobai\" }, Cat { Name : \"kitty\" }} foodName := \"food\" for _ , s := range sleepList { s . Sleep () s . Eat ( foodName ) } } \u5927\u529f\u544a\u6210\uff0c\u8fd9\u91cc\u6211\u4eec\u5c31\u5b9e\u73b0\u4e86\u63a5\u53e3\u7684\u5d4c\u5165\uff0c\u4ee3\u7801\u90fd\u662f\u6bd4\u8f83\u7b80\u5355\u76f4\u767d\u7684\u3002\u6765\u603b\u7ed3\u4e00\u4e0b\u91cd\u70b9\u5185\u5bb9\uff1a go \u53ef\u4ee5\u58f0\u660e\u63a5\u53e3\uff0c\u5b83\u5305\u542b\u4e86\u4e00\u7cfb\u5217\u65b9\u6cd5\u58f0\u660e struct \u53ef\u4ee5\u5b9e\u73b0\u63a5\u53e3\uff0c\u53ea\u8981\u4e00\u4e2a struct \u5b9e\u73b0\u4e86\u4e00\u4e2a\u63a5\u53e3\u7684\u6240\u6709\u65b9\u6cd5\uff0c\u6211\u4eec\u5c31\u8bf4 struct \u5b9e\u73b0\u4e86\u8fd9\u4e2a\u63a5\u53e3\uff08\u9690\u5f0f\u7684\uff09 \u63a5\u53e3\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5d4c\u5165\u6765\u58f0\u660e\u4e00\u4e2a\u65b0\u7684\u63a5\u53e3\uff0c\u6bd4\u5982 ReadWriter \u5185\u5d4c\u4e86 Reader \u548c Writer\u3002 go \u63d0\u5021\u201c\u5c0f\u800c\u7f8e\u201d\u7684\u63a5\u53e3\uff0c\u7136\u540e\u901a\u8fc7\u5d4c\u5165\u6765\u7ec4\u5408\u65b0\u63a5\u53e3","title":"\u63a5\u53e3\u5d4c\u5165"},{"location":"basics/09_interface/interface/#type-assert","text":"\u4e0a\u6587\u6211\u4eec\u770b\u5230\u5728\u4f7f\u7528\u63a5\u53e3\u7684\u5730\u65b9\uff0c\u6211\u4eec\u53ef\u4ee5\u4f20\u5165\u4e00\u4e2a\u5177\u4f53\u7684\u5b9e\u73b0\u4e86\u63a5\u53e3\u7684 struct \u7c7b\u578b\uff0c\u4f46\u662f\u6211\u4eec\u5982\u4f55\u83b7\u53d6\u4f20\u5165\u7684\u5230\u5e95\u662f\u54ea\u79cd struct \u7c7b\u578b\u5462\uff1f go \u7ed9\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u79cd\u65b9\u5f0f\u53eb\u505a\u7c7b\u578b\u65ad\u8a00\u6765\u83b7\u53d6\u5177\u4f53\u7684\u7c7b\u578b\uff0c\u5b83\u7684\u8bed\u6cd5\u6bd4\u8f83\u7b80\u5355\uff0c\u683c\u5f0f\u5982\u4e0b\uff1a 1 instance , ok := interfaceVal .( RealType ) // \u5982\u679c ok \u4e3a true \u7684\u8bdd\uff0c\u63a5\u53e3\u503c\u5c31\u8f6c\u6210\u4e86\u6211\u4eec\u9700\u8981\u7684\u7c7b\u578b \u6211\u4eec\u7ee7\u7eed\u518d\u4e0a\u8fb9\u7684\u4ee3\u7801\u91cc\u52a0\u4e0a\u7c7b\u578b\u65ad\u8a00\u7684\u6f14\u793a\uff0c\u6ce8\u610f\u7c7b\u578b\u65ad\u8a00\u90a3\u51e0\u884c\u4ee3\u7801\uff0c\u518d for \u5faa\u73af\u91cc\u8fb9\u6211\u4eec\u4f7f\u7528\u7c7b\u578b\u65ad\u8a00\u83b7\u53d6\u4e86\u63a5\u53e3\u503c\u7684\u771f\u6b63\u7c7b\u578b\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 func main () { sleepList := [] LazyAnimal { Dog { Name : \"xiaobai\" }, Cat { Name : \"kitty\" }} foodName := \"food\" for _ , s := range sleepList { s . Sleep () s . Eat ( foodName ) // \u7c7b\u578b\u65ad\u8a00 type assert if dog , ok := s .( Dog ); ok { fmt . Printf ( \"I am a Dog, my name is %s\" , dog . Name ) } if cat , ok := s .( Cat ); ok { fmt . Printf ( \"I am a Cat, my name is %s\" , cat . Name ) } } }","title":"\u7c7b\u578b\u65ad\u8a00(type assert)"},{"location":"basics/09_interface/interface/#_2","text":"\u4e4b\u524d\u5728\u51fd\u6570\u90a3\u4e00\u7ae0\u6211\u4eec\u63d0\u5230 go \u76ee\u524d\u6ca1\u6709\u76f4\u63a5\u63d0\u4f9b\u5bf9\u6cdb\u578b\u7684\u652f\u6301\uff0c\u5b66\u4e86\u63a5\u53e3\u4e4b\u540e\u5176\u5b9e\u6211\u4eec\u53ef\u4ee5\u7528\u63a5\u53e3\u6765\u5b9e\u73b0\u3002 \u4e0a\u6587\u63d0\u5230\uff0c\u5982\u679c\u4e00\u4e2a struct \u5b9e\u73b0\u4e86\u4e00\u4e2a\u63a5\u53e3\u58f0\u660e\u6240\u6709\u65b9\u6cd5\uff0c\u6211\u4eec\u5c31\u8bf4\u8fd9\u4e2a struct (\u9690\u5f0f)\u5b9e\u73b0\u4e86\u8fd9\u4e2a\u63a5\u53e3\uff0c\u90a3\u5982\u679c\u662f\u4e00\u4e2a\u6ca1\u6709\u58f0\u660e \u4efb\u4f55\u65b9\u6cd5\u7684\u7a7a\u63a5\u53e3(empty interface)\u5462\uff1f\u6309\u7167\u8fd9\u4e2a\u5b9a\u4e49\u5c82\u4e0d\u662f\u6240\u6709\u7c7b\u578b\u90fd\u5b9e\u73b0\u4e86\u7a7a\u63a5\u53e3\u4e48\uff1f \u4f60\u731c\u5bf9\u4e86\uff0c\u6240\u6709\u7c7b\u578b\u90fd\u5b9e\u73b0\u4e86\u7a7a\u63a5\u53e3( interface{} )\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u7a7a\u63a5\u53e3+\u7c7b\u578b\u65ad\u8a00\u8f6c\u6210\u4efb\u4f55\u6211\u4eec\u9700\u8981\u7684\u7c7b\u578b\u3002\u6765\u770b\u4e0b\u8fd9\u4e2a\u4f8b\u5b50\uff0c \u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u7a7a\u63a5\u53e3\u6570\u7ec4\uff0c\u5b83\u7684\u5143\u7d20\u53ef\u4ee5\u662f\u4efb\u4f55\u7c7b\u578b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 package main import ( \"fmt\" ) type Dog struct { Name string } func ( d Dog ) Sleep () { fmt . Printf ( \"Dog %s is sleeping\\n\" , d . Name ) } type Cat struct { Name string } func ( c Cat ) Sleep () { fmt . Printf ( \"Cat %s is sleeping\\n\" , c . Name ) } func main () { animalList := [] interface {}{ Dog { Name : \"xiaobai\" }, Cat { Name : \"kitty\" }} for _ , s := range animalList { if dog , ok := s .( Dog ); ok { fmt . Printf ( \"I am a Dog, my name is %s\\n\" , dog . Name ) } if cat , ok := s .( Cat ); ok { fmt . Printf ( \"I am a Cat, my name is %s\\n\" , cat . Name ) } } } \u90a3\u6211\u4eec\u5982\u4f55\u5b9e\u73b0\u6cdb\u578b\u5462\uff1f\u7a7a\u63a5\u53e3\u5176\u5b9e\u7ed9\u4e86\u6211\u4eec\u601d\u8def\u3002\u65e2\u7136\u5b83\u80fd\u8f6c\u6210\u6240\u6709\u7c7b\u578b\uff0c\u90a3\u6211\u4eec\u4ee5\u7a7a\u63a5\u53e3\u4f5c\u4e3a\u53c2\u6570\u4e0d\u5c31\u597d\u4e86\u561b\uff0c\u8fd9\u4e2a\u60f3\u6cd5\u662f\u5bf9\u7684\u3002 \u5982\u679c\u4f60\u6709\u7559\u610f\u7684\u8bdd\uff0c\u5230\u73b0\u5728\u6211\u4eec\u7684\u4ee3\u7801\u793a\u4f8b\u91cc\u8fb9\u4f7f\u7528\u6700\u591a\u7684\u662f\u5565\uff0c\u5176\u5b9e\u662f\u8fd9\u53e5\u8bdd fmt.Println() \uff0c\u4e0d\u77e5\u9053\u4f60\u4e4b\u524d\u6709\u6ca1\u6709\u53d1\u73b0\u8fd9\u4e2a\u51fd\u6570 \u5c45\u7136\u53ef\u4ee5\u4f20\u9012\u4efb\u610f\u7c7b\u578b\u8fdb\u53bb\uff0c\u7528\u7684\u662f\u4ec0\u4e48\u9ed1\u9b54\u6cd5\u5462\uff1f \u65e2\u7136\u6211\u4eec\u77e5\u9053\u4e86\u7a7a\u63a5\u53e3\uff0c\u53ef\u4ee5\u81ea\u5df1\u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u7684\u53ef\u4ee5\u6253\u5370\u591a\u79cd\u7c7b\u578b\u7684 MyPrint \u51fd\u6570\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 func MyPrint ( i interface {}) { switch o := i .( type ) { case int : fmt . Printf ( \"%d\\n\" , o ) case float64 : fmt . Printf ( \"%f\\n\" , o ) case string : fmt . Printf ( \"%s\\n\" , o ) default : fmt . Printf ( \"%+v\\n\" , o ) } } func main () { MyPrint ( 1 ) MyPrint ( 4.2 ) MyPrint ( \"hello\" ) MyPrint ( map [ string ] string { \"hello\" : \"go\" }) } \u5b9e\u9645\u4e0a\u5982\u679c\u4f60\u7528\u5f00\u53d1\u5de5\u5177\u8df3\u8f6c\u5305 fmt \u5bf9\u5e94 fmt.Println \u7684\u51fd\u6570\u5b9e\u73b0\uff0c\u53ef\u4ee5\u770b\u5230\u5b83\u4e5f\u662f\u4ee5\u7a7a\u63a5\u53e3\u4f5c\u4e3a\u53c2\u6570\u7684: 1 2 3 4 5 6 // Println formats using the default formats for its operands and writes to standard output. // Spaces are always added between operands and a newline is appended. // It returns the number of bytes written and any write error encountered. func Println ( a ... interface {}) ( n int , err error ) { return Fprintln ( os . Stdout , a ... ) } \u7a7a\u63a5\u53e3\u5728\u5b9e\u73b0\u6cdb\u578b\u7684\u65f6\u5019\u5f88\u6709\u7528\uff0c\u4e0d\u8fc7\u4e00\u822c\u60c5\u51b5\u4e0b\u5982\u679c\u4e0d\u662f\u5fc5\u8981\uff0c\u6211\u4eec\u8fd8\u662f\u5355\u72ec\u5b9e\u73b0\u5bf9\u5e94\u7c7b\u578b\u7684\u51fd\u6570\u5c31\u597d\uff0c\u4ee3\u7801\u53ef\u8bfb\u6027\u4e5f\u66f4\u9ad8\u3002","title":"\u4f7f\u7528\u7a7a\u63a5\u53e3\u5b9e\u73b0\u6cdb\u578b"},{"location":"basics/09_interface/interface/#_3","text":"\u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u7684 a+b \u51fd\u6570\uff0c\u9700\u8981\u540c\u65f6\u652f\u6301 int \u548c float64 \u53c2\u6570","title":"\u7ec3\u4e60"},{"location":"basics/09_interface/interface/#_4","text":"Golang and inheritance why generics","title":"\u53c2\u8003"},{"location":"basics/10_goroutine/goroutine/","text":"Go goroutine \u521d\u63a2 \u00b6 Quote Before you launch a goroutine, know when it will stop. - https://the-zen-of-go.netlify.com/ CPython \u4e4b\u75db GIL \u00b6 \u5982\u679c\u4f60\u7528\u8fc7 Python \u5e76\u4e14\u4f7f\u7528\u8fc7 CPython \u89e3\u91ca\u5668\uff0c\u5e94\u8be5\u77e5\u9053\u201d\u81ed\u540d\u662d\u8457\u201c\u7684 GIL\uff0c\u5168\u5c40\u89e3\u91ca\u9501\u3002\u8fd9\u5bfc\u81f4 Python \u5728\u591a\u7ebf\u7a0b\u4e0b\u6ca1\u6cd5\u5229\u7528\u591a\u6838 CPU\uff0c\u5bf9\u4e8e IO \u5bc6\u96c6\u7a0b\u5e8f\u6765\u8bf4\u53ef\u80fd\u5f71\u54cd\u8fd8\u4e0d\u5927\uff0c\u4f46\u662f\u5bf9\u4e8e CPU \u5bc6\u96c6\u7684\u7a0b\u5e8f\u6027\u80fd\u53ef\u80fd\u8fd8\u4e0d\u5982\u5355\u7ebf\u7a0b\u3002\u5f53\u9047\u5230\u6027\u80fd\u74f6\u9888\u7684\u65f6\u5019\uff0c\u4f60\u53ef\u4ee5\u8003\u8651 \u4f7f\u7528\u591a\u8fdb\u7a0b\u6216\u8005\u6362\u6210 Go \u6765\u6539\u5199\u83b7\u5f97\u66f4\u9ad8\u7684\u6027\u80fd\u3002 Go \u6740\u624b\u950f Goroutine \u00b6 \u542f\u52a8\u4e00\u4e2a Goroutine \u00b6 \u7f16\u5199\u4e00\u4e2a\u5e76\u53d1\u8bf7\u6c42\u7f51\u5740\u4f8b\u5b50 \u00b6 https://golangbot.com/goroutines/ https://gobyexample.com/goroutines https://www.flysnow.org/2017/04/11/go-in-action-go-goroutine.html https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-goroutine/ https://www.zhihu.com/question/20862617","title":"Goroutine \u521d\u63a2"},{"location":"basics/10_goroutine/goroutine/#go-goroutine","text":"Quote Before you launch a goroutine, know when it will stop. - https://the-zen-of-go.netlify.com/","title":"Go goroutine \u521d\u63a2"},{"location":"basics/10_goroutine/goroutine/#cpython-gil","text":"\u5982\u679c\u4f60\u7528\u8fc7 Python \u5e76\u4e14\u4f7f\u7528\u8fc7 CPython \u89e3\u91ca\u5668\uff0c\u5e94\u8be5\u77e5\u9053\u201d\u81ed\u540d\u662d\u8457\u201c\u7684 GIL\uff0c\u5168\u5c40\u89e3\u91ca\u9501\u3002\u8fd9\u5bfc\u81f4 Python \u5728\u591a\u7ebf\u7a0b\u4e0b\u6ca1\u6cd5\u5229\u7528\u591a\u6838 CPU\uff0c\u5bf9\u4e8e IO \u5bc6\u96c6\u7a0b\u5e8f\u6765\u8bf4\u53ef\u80fd\u5f71\u54cd\u8fd8\u4e0d\u5927\uff0c\u4f46\u662f\u5bf9\u4e8e CPU \u5bc6\u96c6\u7684\u7a0b\u5e8f\u6027\u80fd\u53ef\u80fd\u8fd8\u4e0d\u5982\u5355\u7ebf\u7a0b\u3002\u5f53\u9047\u5230\u6027\u80fd\u74f6\u9888\u7684\u65f6\u5019\uff0c\u4f60\u53ef\u4ee5\u8003\u8651 \u4f7f\u7528\u591a\u8fdb\u7a0b\u6216\u8005\u6362\u6210 Go \u6765\u6539\u5199\u83b7\u5f97\u66f4\u9ad8\u7684\u6027\u80fd\u3002","title":"CPython \u4e4b\u75db GIL"},{"location":"basics/10_goroutine/goroutine/#go-goroutine_1","text":"","title":"Go \u6740\u624b\u950f Goroutine"},{"location":"basics/10_goroutine/goroutine/#goroutine","text":"","title":"\u542f\u52a8\u4e00\u4e2a Goroutine"},{"location":"basics/10_goroutine/goroutine/#_1","text":"https://golangbot.com/goroutines/ https://gobyexample.com/goroutines https://www.flysnow.org/2017/04/11/go-in-action-go-goroutine.html https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-goroutine/ https://www.zhihu.com/question/20862617","title":"\u7f16\u5199\u4e00\u4e2a\u5e76\u53d1\u8bf7\u6c42\u7f51\u5740\u4f8b\u5b50"}]}